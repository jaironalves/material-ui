{
  "components": {
    "Alert": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The action to display. It renders after the message, at the end of the alert.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "closeText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Override the default label for the *close popup* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Close'",
            "computed": false
          },
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'info'",
                "computed": false
              },
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The main color for the alert. Unless provided, the value is taken from the `severity` prop.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Override the icon displayed before the children.\nUnless provided, the icon is mapped to the value of the `severity` prop.",
          "tags": []
        },
        "iconMapping": {
          "type": {
            "name": "shape",
            "value": {
              "error": {
                "name": "node",
                "required": false
              },
              "info": {
                "name": "node",
                "required": false
              },
              "success": {
                "name": "node",
                "required": false
              },
              "warning": {
                "name": "node",
                "required": false
              }
            }
          },
          "required": false,
          "description": "The component maps the `severity` prop to a range of different icons,\nfor instance success to `<SuccessOutlined>`.\nIf you wish to change this mapping, you can provide your own.\nAlternatively, you can use the `icon` prop to override the icon displayed.",
          "defaultValue": {
            "value": "{\n  success: <SuccessOutlinedIcon fontSize=\"inherit\" />,\n  warning: <ReportProblemOutlinedIcon fontSize=\"inherit\" />,\n  error: <ErrorOutlineIcon fontSize=\"inherit\" />,\n  info: <InfoOutlinedIcon fontSize=\"inherit\" />,\n}",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.\nWhen provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "role": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The ARIA role attribute of the element.",
          "defaultValue": {
            "value": "'alert'",
            "computed": false
          },
          "tags": []
        },
        "severity": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'info'",
                "computed": false
              },
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The severity of the alert. This defines the color and icon used.",
          "defaultValue": {
            "value": "'success'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'filled'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'standard'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Alert",
      "styles": {
        "classes": [
          "root",
          "standardSuccess",
          "standardInfo",
          "standardWarning",
          "standardError",
          "outlinedSuccess",
          "outlinedInfo",
          "outlinedWarning",
          "outlinedError",
          "filledSuccess",
          "filledInfo",
          "filledWarning",
          "filledError",
          "icon",
          "message",
          "action"
        ],
        "name": "MuiAlert",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "standardSuccess": "Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`.",
          "standardInfo": "Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`.",
          "standardWarning": "Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`.",
          "standardError": "Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`.",
          "outlinedSuccess": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`.",
          "outlinedInfo": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`.",
          "outlinedWarning": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`.",
          "outlinedError": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`.",
          "filledSuccess": "Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`.",
          "filledInfo": "Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`.",
          "filledWarning": "Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`.",
          "filledError": "Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`.",
          "icon": "Styles applied to the icon wrapper element.",
          "message": "Styles applied to the message wrapper element.",
          "action": "Styles applied to the action wrapper element if `action` is provided."
        },
        "globalClasses": {
          "root": "MuiAlert-root",
          "standardSuccess": "MuiAlert-standardSuccess",
          "standardInfo": "MuiAlert-standardInfo",
          "standardWarning": "MuiAlert-standardWarning",
          "standardError": "MuiAlert-standardError",
          "outlinedSuccess": "MuiAlert-outlinedSuccess",
          "outlinedInfo": "MuiAlert-outlinedInfo",
          "outlinedWarning": "MuiAlert-outlinedWarning",
          "outlinedError": "MuiAlert-outlinedError",
          "filledSuccess": "MuiAlert-filledSuccess",
          "filledInfo": "MuiAlert-filledInfo",
          "filledWarning": "MuiAlert-filledWarning",
          "filledError": "MuiAlert-filledError",
          "icon": "MuiAlert-icon",
          "message": "MuiAlert-message",
          "action": "MuiAlert-action"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/Alert/Alert.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/alert"
      ]
    },
    "AlertTitle": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "AlertTitle",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiAlertTitle",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiAlertTitle-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/AlertTitle/AlertTitle.js",
      "inheritance": null,
      "usedInPages": []
    },
    "AppBar": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'transparent'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "position": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'absolute'",
                "computed": false
              },
              {
                "value": "'fixed'",
                "computed": false
              },
              {
                "value": "'relative'",
                "computed": false
              },
              {
                "value": "'static'",
                "computed": false
              },
              {
                "value": "'sticky'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The positioning type. The behavior of the different options is described\n[in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\nNote: `sticky` is not universally supported and will fall back to `static` when unavailable.",
          "defaultValue": {
            "value": "'fixed'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "AppBar",
      "styles": {
        "classes": [
          "root",
          "positionFixed",
          "positionAbsolute",
          "positionSticky",
          "positionStatic",
          "positionRelative",
          "colorDefault",
          "colorPrimary",
          "colorSecondary",
          "colorInherit",
          "colorTransparent"
        ],
        "name": "MuiAppBar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "positionFixed": "Styles applied to the root element if `position=\"fixed\"`.",
          "positionAbsolute": "Styles applied to the root element if `position=\"absolute\"`.",
          "positionSticky": "Styles applied to the root element if `position=\"sticky\"`.",
          "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
          "positionRelative": "Styles applied to the root element if `position=\"relative\"`.",
          "colorDefault": "Styles applied to the root element if `color=\"default\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "colorTransparent": "Styles applied to the root element if `color=\"transparent\"`."
        },
        "globalClasses": {
          "root": "MuiAppBar-root",
          "positionFixed": "MuiAppBar-positionFixed",
          "positionAbsolute": "MuiAppBar-positionAbsolute",
          "positionSticky": "MuiAppBar-positionSticky",
          "positionStatic": "MuiAppBar-positionStatic",
          "positionRelative": "MuiAppBar-positionRelative",
          "colorDefault": "MuiAppBar-colorDefault",
          "colorPrimary": "MuiAppBar-colorPrimary",
          "colorSecondary": "MuiAppBar-colorSecondary",
          "colorInherit": "MuiAppBar-colorInherit",
          "colorTransparent": "MuiAppBar-colorTransparent"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLElement",
      "filename": "/packages/material-ui/src/AppBar/AppBar.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/app-bar"
      ]
    },
    "Autocomplete": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the portion of the selected suggestion that has not been typed by the user,\nknown as the completion string, appears inline after the input cursor in the textbox.\nThe inline completion string is visually highlighted and has a selected state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "autoHighlight": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the first option is automatically highlighted.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "autoSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the selected option becomes the value of the input\nwhen the Autocomplete loses focus unless the user chooses\na different option or changes the character string in the input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "blurOnSelect": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'mouse'",
                    "computed": false
                  },
                  {
                    "value": "'touch'",
                    "computed": false
                  }
                ]
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "Control if the input should be blurred when an option is selected:\n\n- `false` the input is not blurred.\n- `true` the input is always blurred.\n- `touch` the input is blurred after a touch event.\n- `mouse` the input is blurred after a mouse event.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "ChipProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Chip`](/api/chip/) element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "clearOnEscape": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, clear all values when the user presses escape and the popup is closed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "clearText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Override the default text for the *clear* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Clear'",
            "computed": false
          },
          "tags": []
        },
        "closeIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in place of the default close icon.",
          "defaultValue": {
            "value": "<CloseIcon fontSize=\"small\" />",
            "computed": false
          },
          "tags": []
        },
        "closeText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Override the default text for the *close popup* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Close'",
            "computed": false
          },
          "tags": []
        },
        "debug": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the popup will ignore the blur event if the input if filled.\nYou can inspect the popup markup with your browser tools.\nConsider this option when you need to customize the component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "any"
              },
              {
                "name": "array"
              }
            ]
          },
          "required": false,
          "description": "The default input value. Use when the component is not controlled.",
          "defaultValue": {
            "value": "props.multiple ? [] : null",
            "computed": false
          },
          "tags": []
        },
        "disableClearable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input can't be cleared.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableCloseOnSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the popup won't close when a value is selected.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableListWrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list box in the popup will not wrap focus.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableOpenOnFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the popup won't open on input focus.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disablePortal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "filterOptions": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A filter function that determines the options that are eligible.",
          "tags": [
            {
              "title": "param",
              "description": "The options to render.",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "T"
                  }
                ]
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "The state of the component.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "state"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "T"
                  }
                ]
              }
            }
          ]
        },
        "filterSelectedOptions": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hide the selected options from the list box.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "forcePopupIcon": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "Force the visibility display of the popup icon.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "freeSolo": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "getOptionDisabled": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Used to determine the disabled state for a given option.",
          "tags": []
        },
        "getOptionLabel": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Used to determine the string value for a given option.\nIt's used to fill the input (and the list box options if `renderOption` is not provided).",
          "defaultValue": {
            "value": "x => x",
            "computed": false
          },
          "tags": []
        },
        "getOptionSelected": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Used to determine if an option is selected.\nUses strict equality by default.",
          "tags": []
        },
        "groupBy": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "If provided, the options will be grouped under the returned string.\nThe groupBy value is also used as the text for group headings when `renderGroup` is not provided.",
          "tags": [
            {
              "title": "param",
              "description": "The option to group.",
              "type": {
                "type": "NameExpression",
                "name": "T"
              },
              "name": "options"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
          "tags": []
        },
        "includeInputInList": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the highlight can move to the input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "inputValue": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The input value.",
          "tags": []
        },
        "ListboxComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the listbox.",
          "defaultValue": {
            "value": "'ul'",
            "computed": false
          },
          "tags": []
        },
        "ListboxProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the Listbox element.",
          "tags": []
        },
        "loading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is in a loading state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "loadingText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Text to display when in a loading state.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Loading…'",
            "computed": false
          },
          "tags": []
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, `value` must be an array and the menu will support multiple selections.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "noOptionsText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Text to display when there are no options.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'No options'",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value of the Autocomplete",
              "type": {
                "type": "NameExpression",
                "name": "T"
              },
              "name": "value"
            }
          ]
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the popup requests to be closed.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onInputChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the input value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value of the text input.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the popup requests to be opened.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Control the popup` open state.",
          "tags": []
        },
        "openText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Override the default text for the *open popup* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Open'",
            "computed": false
          },
          "tags": []
        },
        "options": {
          "type": {
            "name": "array"
          },
          "required": true,
          "description": "Array of options.",
          "tags": []
        },
        "PaperComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the body of the popup.",
          "defaultValue": {
            "value": "Paper",
            "computed": true
          },
          "tags": []
        },
        "PopperComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to position the popup.",
          "defaultValue": {
            "value": "Popper",
            "computed": true
          },
          "tags": []
        },
        "popupIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in place of the default popup icon.",
          "defaultValue": {
            "value": "<ArrowDropDownIcon />",
            "computed": false
          },
          "tags": []
        },
        "renderGroup": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the group.",
          "tags": [
            {
              "title": "param",
              "description": "The group to render.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "option"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "renderInput": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Render the input.",
          "tags": [
            {
              "title": "param",
              "description": "The props for an Input component",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "params"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "renderOption": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the option, use `getOptionLabel` by default.",
          "tags": [
            {
              "title": "param",
              "description": "The option to render.",
              "type": {
                "type": "NameExpression",
                "name": "T"
              },
              "name": "option"
            },
            {
              "title": "param",
              "description": "The state of the component.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "state"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "renderTags": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the selected value.",
          "tags": [
            {
              "title": "param",
              "description": "The `value` provided to the component.",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "T"
                  }
                ]
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "A tag props getter.",
              "type": {
                "type": "NameExpression",
                "name": "function"
              },
              "name": "getTagProps"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "selectOnFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input's text will be selected on focus.\nIt helps the user clear the selected value.",
          "defaultValue": {
            "value": "!props.freeSolo",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the autocomplete.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "any"
              },
              {
                "name": "array"
              }
            ]
          },
          "required": false,
          "description": "The value of the autocomplete.\n\nThe value must have reference equality with the option in order to be selected.\nYou can customize the equality behavior with the `getOptionSelected` prop.",
          "tags": []
        }
      },
      "name": "Autocomplete",
      "styles": {
        "classes": [
          "root",
          "focused",
          "tag",
          "tagSizeSmall",
          "hasPopupIcon",
          "hasClearIcon",
          "inputRoot",
          "input",
          "inputFocused",
          "endAdornment",
          "clearIndicator",
          "clearIndicatorDirty",
          "popupIndicator",
          "popupIndicatorOpen",
          "popper",
          "popperDisablePortal",
          "paper",
          "listbox",
          "loading",
          "noOptions",
          "option",
          "groupLabel",
          "groupUl"
        ],
        "name": "MuiAutocomplete",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "focused": "Pseudo-class applied to the root element if focused.",
          "tag": "Styles applied to the tag elements, e.g. the chips.",
          "tagSizeSmall": "Styles applied to the tag elements, e.g. the chips if `size=\"small\"`.",
          "hasPopupIcon": "Styles applied when the popup icon is rendered.",
          "hasClearIcon": "Styles applied when the clear icon is rendered.",
          "inputRoot": "Styles applied to the Input element.",
          "input": "Styles applied to the input element.",
          "inputFocused": "Styles applied to the input element if tag focused.",
          "endAdornment": "Styles applied to the endAdornment element.",
          "clearIndicator": "Styles applied to the clear indicator.",
          "clearIndicatorDirty": "Styles applied to the clear indicator if the input is dirty.",
          "popupIndicator": "Styles applied to the popup indicator.",
          "popupIndicatorOpen": "Styles applied to the popup indicator if the popup is open.",
          "popper": "Styles applied to the popper element.",
          "popperDisablePortal": "Styles applied to the popper element if `disablePortal={true}`.",
          "paper": "Styles applied to the `Paper` component.",
          "listbox": "Styles applied to the `listbox` component.",
          "loading": "Styles applied to the loading wrapper.",
          "noOptions": "Styles applied to the no option wrapper.",
          "option": "Styles applied to the option elements.",
          "groupLabel": "Styles applied to the group's label elements.",
          "groupUl": "Styles applied to the group's ul elements.",
          "const": "eslint-enable no-unused-vars"
        },
        "globalClasses": {
          "root": "MuiAutocomplete-root",
          "focused": "Mui-focused",
          "tag": "MuiAutocomplete-tag",
          "tagSizeSmall": "MuiAutocomplete-tagSizeSmall",
          "hasPopupIcon": "MuiAutocomplete-hasPopupIcon",
          "hasClearIcon": "MuiAutocomplete-hasClearIcon",
          "inputRoot": "MuiAutocomplete-inputRoot",
          "input": "MuiAutocomplete-input",
          "inputFocused": "MuiAutocomplete-inputFocused",
          "endAdornment": "MuiAutocomplete-endAdornment",
          "clearIndicator": "MuiAutocomplete-clearIndicator",
          "clearIndicatorDirty": "MuiAutocomplete-clearIndicatorDirty",
          "popupIndicator": "MuiAutocomplete-popupIndicator",
          "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
          "popper": "MuiAutocomplete-popper",
          "popperDisablePortal": "MuiAutocomplete-popperDisablePortal",
          "paper": "MuiAutocomplete-paper",
          "listbox": "MuiAutocomplete-listbox",
          "loading": "MuiAutocomplete-loading",
          "noOptions": "MuiAutocomplete-noOptions",
          "option": "MuiAutocomplete-option",
          "groupLabel": "MuiAutocomplete-groupLabel",
          "groupUl": "MuiAutocomplete-groupUl"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/Autocomplete/Autocomplete.js",
      "inheritance": null,
      "usedInPages": [
        "/components/autocomplete"
      ]
    },
    "Avatar": {
      "description": "",
      "methods": [],
      "props": {
        "alt": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Used to render icon or text elements inside the Avatar if `src` is not set.\nThis can be an element, or just a string.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "imgProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Attributes applied to the `img` element if the component is used to display an image.\nIt can be used to listen for the loading error event.",
          "tags": []
        },
        "sizes": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The `sizes` attribute for the `img` element.",
          "tags": []
        },
        "src": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The `src` attribute for the `img` element.",
          "tags": []
        },
        "srcSet": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The `srcSet` attribute for the `img` element.\nUse this attribute for responsive image display.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'circle'",
                "computed": false
              },
              {
                "value": "'rounded'",
                "computed": false
              },
              {
                "value": "'square'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The shape of the avatar.",
          "defaultValue": {
            "value": "'circle'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Avatar",
      "styles": {
        "classes": [
          "root",
          "colorDefault",
          "circle",
          "rounded",
          "square",
          "img",
          "fallback"
        ],
        "name": "MuiAvatar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorDefault": "Styles applied to the root element if not `src` or `srcSet`.",
          "circle": "Styles applied to the root element if `variant=\"circle\"`.",
          "rounded": "Styles applied to the root element if `variant=\"rounded\"`.",
          "square": "Styles applied to the root element if `variant=\"square\"`.",
          "img": "Styles applied to the img element if either `src` or `srcSet` is defined.",
          "fallback": "Styles applied to the fallback icon"
        },
        "globalClasses": {
          "root": "MuiAvatar-root",
          "colorDefault": "MuiAvatar-colorDefault",
          "circle": "MuiAvatar-circle",
          "rounded": "MuiAvatar-rounded",
          "square": "MuiAvatar-square",
          "img": "MuiAvatar-img",
          "fallback": "MuiAvatar-fallback"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Avatar/Avatar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/avatars"
      ]
    },
    "AvatarGroup": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The avatars to stack.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "spacing": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'small'",
                    "computed": false
                  }
                ]
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Spacing between avatars.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "AvatarGroup",
      "styles": {
        "classes": [
          "root",
          "avatar"
        ],
        "name": "MuiAvatarGroup",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "avatar": "Styles applied to the avatar elements."
        },
        "globalClasses": {
          "root": "MuiAvatarGroup-root",
          "avatar": "MuiAvatarGroup-avatar"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/AvatarGroup/AvatarGroup.js",
      "inheritance": null,
      "usedInPages": [
        "/components/avatars"
      ]
    },
    "Backdrop": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "invisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the backdrop is invisible.\nIt can be used when rendering a popover or a custom select component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the backdrop is open.",
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "appear": {
                    "name": "number",
                    "required": false
                  },
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "tags": []
        }
      },
      "name": "Backdrop",
      "styles": {
        "classes": [
          "root",
          "invisible"
        ],
        "name": "MuiBackdrop",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "invisible": "Styles applied to the root element if `invisible={true}`."
        },
        "globalClasses": {
          "root": "MuiBackdrop-root",
          "invisible": "MuiBackdrop-invisible"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Backdrop/Backdrop.js",
      "inheritance": null,
      "usedInPages": [
        "/components/backdrop"
      ]
    },
    "Badge": {
      "description": "",
      "methods": [],
      "props": {
        "anchorOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "enum",
                "value": [
                  {
                    "value": "'left'",
                    "computed": false
                  },
                  {
                    "value": "'right'",
                    "computed": false
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "enum",
                "value": [
                  {
                    "value": "'bottom'",
                    "computed": false
                  },
                  {
                    "value": "'top'",
                    "computed": false
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "The anchor of the badge.",
          "defaultValue": {
            "value": "{\n  vertical: 'top',\n  horizontal: 'right',\n}",
            "computed": false
          },
          "tags": []
        },
        "badgeContent": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content rendered within the badge.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The badge will be added relative to this node.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "invisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the badge will be invisible.",
          "tags": []
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Max count to show.",
          "defaultValue": {
            "value": "99",
            "computed": false
          },
          "tags": []
        },
        "overlap": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'circle'",
                "computed": false
              },
              {
                "value": "'rectangle'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Wrapped shape the badge should overlap.",
          "defaultValue": {
            "value": "'rectangle'",
            "computed": false
          },
          "tags": []
        },
        "showZero": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Controls whether the badge is hidden when `badgeContent` is zero.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dot'",
                "computed": false
              },
              {
                "value": "'standard'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Badge",
      "styles": {
        "classes": [
          "root",
          "badge",
          "colorPrimary",
          "colorSecondary",
          "colorError",
          "dot",
          "anchorOriginTopRightRectangle",
          "anchorOriginBottomRightRectangle",
          "anchorOriginTopLeftRectangle",
          "anchorOriginBottomLeftRectangle",
          "anchorOriginTopRightCircle",
          "anchorOriginBottomRightCircle",
          "anchorOriginTopLeftCircle",
          "anchorOriginBottomLeftCircle",
          "invisible"
        ],
        "name": "MuiBadge",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "badge": "Styles applied to the badge `span` element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "dot": "Styles applied to the root element if `variant=\"dot\"`.",
          "anchorOriginTopRightRectangle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"rectangle\"`.",
          "anchorOriginBottomRightRectangle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangle\"`.",
          "anchorOriginTopLeftRectangle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"rectangle\"`.",
          "anchorOriginBottomLeftRectangle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangle\"`.",
          "anchorOriginTopRightCircle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"circle\"`.",
          "anchorOriginBottomRightCircle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"circle\"`.",
          "anchorOriginTopLeftCircle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"circle\"`.",
          "anchorOriginBottomLeftCircle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"circle\"`.",
          "invisible": "Pseudo-class to the badge `span` element if `invisible={true}`."
        },
        "globalClasses": {
          "root": "MuiBadge-root",
          "badge": "MuiBadge-badge",
          "colorPrimary": "MuiBadge-colorPrimary",
          "colorSecondary": "MuiBadge-colorSecondary",
          "colorError": "MuiBadge-colorError",
          "dot": "MuiBadge-dot",
          "anchorOriginTopRightRectangle": "MuiBadge-anchorOriginTopRightRectangle",
          "anchorOriginBottomRightRectangle": "MuiBadge-anchorOriginBottomRightRectangle",
          "anchorOriginTopLeftRectangle": "MuiBadge-anchorOriginTopLeftRectangle",
          "anchorOriginBottomLeftRectangle": "MuiBadge-anchorOriginBottomLeftRectangle",
          "anchorOriginTopRightCircle": "MuiBadge-anchorOriginTopRightCircle",
          "anchorOriginBottomRightCircle": "MuiBadge-anchorOriginBottomRightCircle",
          "anchorOriginTopLeftCircle": "MuiBadge-anchorOriginTopLeftCircle",
          "anchorOriginBottomLeftCircle": "MuiBadge-anchorOriginBottomLeftCircle",
          "invisible": "MuiBadge-invisible"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Badge/Badge.js",
      "inheritance": null,
      "usedInPages": [
        "/components/avatars",
        "/components/badges"
      ]
    },
    "BottomNavigation": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "We default to the index of the child.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "showLabels": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, all `BottomNavigationAction`s will show their labels.\nBy default, only the selected `BottomNavigationAction` will show its label.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the currently selected `BottomNavigationAction`.",
          "tags": []
        }
      },
      "name": "BottomNavigation",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiBottomNavigation",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiBottomNavigation-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/BottomNavigation/BottomNavigation.js",
      "inheritance": null,
      "usedInPages": [
        "/components/bottom-navigation"
      ]
    },
    "BottomNavigationAction": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "unsupportedProp"
          },
          "required": false,
          "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label element.",
          "tags": []
        },
        "showLabel": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `BottomNavigationAction` will show its label.\nBy default, only the selected `BottomNavigationAction`\ninside `BottomNavigation` will show its label.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "You can provide your own value. Otherwise, we fallback to the child position index.",
          "tags": []
        }
      },
      "name": "BottomNavigationAction",
      "styles": {
        "classes": [
          "root",
          "selected",
          "iconOnly",
          "wrapper",
          "label"
        ],
        "name": "MuiBottomNavigationAction",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "selected": "Pseudo-class applied to the root element if selected.",
          "iconOnly": "Pseudo-class applied to the root element if `showLabel={false}` and not selected.",
          "wrapper": "Styles applied to the span element that wraps the icon and label.",
          "label": "Styles applied to the label's span element."
        },
        "globalClasses": {
          "root": "MuiBottomNavigationAction-root",
          "selected": "Mui-selected",
          "iconOnly": "MuiBottomNavigationAction-iconOnly",
          "wrapper": "MuiBottomNavigationAction-wrapper",
          "label": "MuiBottomNavigationAction-label"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/BottomNavigationAction/BottomNavigationAction.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/bottom-navigation"
      ]
    },
    "Breadcrumbs": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The breadcrumb children.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it maps the variant to a good default headline component.",
          "defaultValue": {
            "value": "'nav'",
            "computed": false
          },
          "tags": []
        },
        "expandText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Override the default label for the expand button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Show path'",
            "computed": false
          },
          "tags": []
        },
        "itemsAfterCollapse": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "If max items is exceeded, the number of items to show after the ellipsis.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "itemsBeforeCollapse": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "If max items is exceeded, the number of items to show before the ellipsis.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "maxItems": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Specifies the maximum number of breadcrumbs to display. When there are more\nthan the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\nwill be shown, with an ellipsis in between.",
          "defaultValue": {
            "value": "8",
            "computed": false
          },
          "tags": []
        },
        "separator": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Custom separator node.",
          "defaultValue": {
            "value": "'/'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Breadcrumbs",
      "styles": {
        "classes": [
          "root",
          "ol",
          "li",
          "separator"
        ],
        "name": "MuiBreadcrumbs",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "ol": "Styles applied to the ol element.",
          "li": "Styles applied to the li element.",
          "separator": "Styles applied to the separator element."
        },
        "globalClasses": {
          "root": "MuiBreadcrumbs-root",
          "ol": "MuiBreadcrumbs-ol",
          "li": "MuiBreadcrumbs-li",
          "separator": "MuiBreadcrumbs-separator"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLElement",
      "filename": "/packages/material-ui/src/Breadcrumbs/Breadcrumbs.js",
      "inheritance": null,
      "usedInPages": [
        "/components/breadcrumbs"
      ]
    },
    "Button": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableElevation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, no elevation is used.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
          "tags": []
        },
        "endIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Element placed after the children.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "href": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "startIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Element placed before the children.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'contained'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Button",
      "styles": {
        "classes": [
          "root",
          "label",
          "text",
          "textPrimary",
          "textSecondary",
          "outlined",
          "outlinedPrimary",
          "outlinedSecondary",
          "contained",
          "containedPrimary",
          "containedSecondary",
          "disableElevation",
          "focusVisible",
          "disabled",
          "colorInherit",
          "textSizeSmall",
          "textSizeLarge",
          "outlinedSizeSmall",
          "outlinedSizeLarge",
          "containedSizeSmall",
          "containedSizeLarge",
          "sizeSmall",
          "sizeLarge",
          "fullWidth",
          "startIcon",
          "endIcon",
          "iconSizeSmall",
          "iconSizeMedium",
          "iconSizeLarge"
        ],
        "name": "MuiButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "label": "Styles applied to the span element that wraps the children.",
          "text": "Styles applied to the root element if `variant=\"text\"`.",
          "textPrimary": "Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.",
          "textSecondary": "Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.",
          "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
          "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
          "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
          "contained": "Styles applied to the root element if `variant=\"contained\"`.",
          "containedPrimary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`.",
          "containedSecondary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`.",
          "disableElevation": "Styles applied to the root element if `disableElevation={true}`.",
          "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "textSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`.",
          "textSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`.",
          "outlinedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`.",
          "outlinedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`.",
          "containedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`.",
          "containedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "startIcon": "Styles applied to the startIcon element if supplied.",
          "endIcon": "Styles applied to the endIcon element if supplied.",
          "iconSizeSmall": "Styles applied to the icon element if supplied and `size=\"small\"`.",
          "iconSizeMedium": "Styles applied to the icon element if supplied and `size=\"medium\"`.",
          "iconSizeLarge": "Styles applied to the icon element if supplied and `size=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiButton-root",
          "label": "MuiButton-label",
          "text": "MuiButton-text",
          "textPrimary": "MuiButton-textPrimary",
          "textSecondary": "MuiButton-textSecondary",
          "outlined": "MuiButton-outlined",
          "outlinedPrimary": "MuiButton-outlinedPrimary",
          "outlinedSecondary": "MuiButton-outlinedSecondary",
          "contained": "MuiButton-contained",
          "containedPrimary": "MuiButton-containedPrimary",
          "containedSecondary": "MuiButton-containedSecondary",
          "disableElevation": "MuiButton-disableElevation",
          "focusVisible": "Mui-focusVisible",
          "disabled": "Mui-disabled",
          "colorInherit": "MuiButton-colorInherit",
          "textSizeSmall": "MuiButton-textSizeSmall",
          "textSizeLarge": "MuiButton-textSizeLarge",
          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
          "containedSizeSmall": "MuiButton-containedSizeSmall",
          "containedSizeLarge": "MuiButton-containedSizeLarge",
          "sizeSmall": "MuiButton-sizeSmall",
          "sizeLarge": "MuiButton-sizeLarge",
          "fullWidth": "MuiButton-fullWidth",
          "startIcon": "MuiButton-startIcon",
          "endIcon": "MuiButton-endIcon",
          "iconSizeSmall": "MuiButton-iconSizeSmall",
          "iconSizeMedium": "MuiButton-iconSizeMedium",
          "iconSizeLarge": "MuiButton-iconSizeLarge"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/Button/Button.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/button-group",
        "/components/buttons"
      ]
    },
    "ButtonBase": {
      "description": "`ButtonBase` contains as few styles as possible.\nIt aims to be a simple building block for creating a button.\nIt contains a load of style reset and some focus/ripple logic.",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",
          "tags": []
        },
        "centerRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripples will be centered.\nThey won't start at the cursor interaction position.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "custom",
            "raw": "elementTypeAcceptingRef"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the base button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableTouchRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the touch ripple effect will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "focusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the base button will have a keyboard focus ripple.\n`disableRipple` must also be `false`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "focusVisibleClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop can help a person know which element has the keyboard focus.\nThe class name will be applied when the element gain the focus through a keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\nif needed.",
          "tags": []
        },
        "onFocusVisible": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",
          "tags": []
        },
        "TouchRippleProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `TouchRipple` element.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'submit'",
                "computed": false
              },
              {
                "value": "'reset'",
                "computed": false
              },
              {
                "value": "'button'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Used to control the button's purpose.\nThis prop passes the value to the `type` attribute of the native button component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ButtonBase",
      "styles": {
        "classes": [
          "root",
          "disabled",
          "focusVisible"
        ],
        "name": "MuiButtonBase",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
          "": "TouchRipple is only needed client-side, x2 boost on the server."
        },
        "globalClasses": {
          "root": "MuiButtonBase-root",
          "disabled": "Mui-disabled",
          "focusVisible": "Mui-focusVisible"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/ButtonBase/ButtonBase.js",
      "inheritance": null,
      "usedInPages": [
        "/components/buttons"
      ]
    },
    "ButtonGroup": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button group.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the buttons will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button ripple effect will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the buttons will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'vertical'",
                "computed": false
              },
              {
                "value": "'horizontal'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The group orientation.",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'contained'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'outlined'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ButtonGroup",
      "styles": {
        "classes": [
          "root",
          "contained",
          "disabled",
          "fullWidth",
          "vertical",
          "grouped",
          "groupedHorizontal",
          "groupedVertical",
          "groupedText",
          "groupedTextHorizontal",
          "groupedTextVertical",
          "groupedTextPrimary",
          "groupedTextSecondary",
          "groupedOutlined",
          "groupedOutlinedHorizontal",
          "groupedOutlinedVertical",
          "groupedOutlinedPrimary",
          "groupedOutlinedSecondary",
          "groupedContained",
          "groupedContainedHorizontal",
          "groupedContainedVertical",
          "groupedContainedPrimary",
          "groupedContainedSecondary"
        ],
        "name": "MuiButtonGroup",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "contained": "Styles applied to the root element if `variant=\"contained\"`.",
          "disabled": "Pseudo-class applied to child elements if `disabled={true}`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "grouped": "Styles applied to the children.",
          "groupedHorizontal": "Styles applied to the children if `orientation=\"horizontal\"`.",
          "groupedVertical": "Styles applied to the children if `orientation=\"vertical\"`.",
          "groupedText": "Styles applied to the children if `variant=\"text\"`.",
          "groupedTextHorizontal": "Styles applied to the children if `variant=\"text\"` and `orientation=\"horizontal\"`.",
          "groupedTextVertical": "Styles applied to the children if `variant=\"text\"` and `orientation=\"vertical\"`.",
          "groupedTextPrimary": "Styles applied to the children if `variant=\"text\"` and `color=\"primary\"`.",
          "groupedTextSecondary": "Styles applied to the children if `variant=\"text\"` and `color=\"secondary\"`.",
          "groupedOutlined": "Styles applied to the children if `variant=\"outlined\"`.",
          "groupedOutlinedHorizontal": "Styles applied to the children if `variant=\"outlined\"` and `orientation=\"horizontal\"`.",
          "groupedOutlinedVertical": "Styles applied to the children if `variant=\"outlined\"` and `orientation=\"vertical\"`.",
          "groupedOutlinedPrimary": "Styles applied to the children if `variant=\"outlined\"` and `color=\"primary\"`.",
          "groupedOutlinedSecondary": "Styles applied to the children if `variant=\"outlined\"` and `color=\"secondary\"`.",
          "groupedContained": "Styles applied to the children if `variant=\"contained\"`.",
          "groupedContainedHorizontal": "Styles applied to the children if `variant=\"contained\"` and `orientation=\"horizontal\"`.",
          "groupedContainedVertical": "Styles applied to the children if `variant=\"contained\"` and `orientation=\"vertical\"`.",
          "groupedContainedPrimary": "Styles applied to the children if `variant=\"contained\"` and `color=\"primary\"`.",
          "groupedContainedSecondary": "Styles applied to the children if `variant=\"contained\"` and `color=\"secondary\"`."
        },
        "globalClasses": {
          "root": "MuiButtonGroup-root",
          "contained": "MuiButtonGroup-contained",
          "disabled": "Mui-disabled",
          "fullWidth": "MuiButtonGroup-fullWidth",
          "vertical": "MuiButtonGroup-vertical",
          "grouped": "MuiButtonGroup-grouped",
          "groupedHorizontal": "MuiButtonGroup-groupedHorizontal",
          "groupedVertical": "MuiButtonGroup-groupedVertical",
          "groupedText": "MuiButtonGroup-groupedText",
          "groupedTextHorizontal": "MuiButtonGroup-groupedTextHorizontal",
          "groupedTextVertical": "MuiButtonGroup-groupedTextVertical",
          "groupedTextPrimary": "MuiButtonGroup-groupedTextPrimary",
          "groupedTextSecondary": "MuiButtonGroup-groupedTextSecondary",
          "groupedOutlined": "MuiButtonGroup-groupedOutlined",
          "groupedOutlinedHorizontal": "MuiButtonGroup-groupedOutlinedHorizontal",
          "groupedOutlinedVertical": "MuiButtonGroup-groupedOutlinedVertical",
          "groupedOutlinedPrimary": "MuiButtonGroup-groupedOutlinedPrimary",
          "groupedOutlinedSecondary": "MuiButtonGroup-groupedOutlinedSecondary",
          "groupedContained": "MuiButtonGroup-groupedContained",
          "groupedContainedHorizontal": "MuiButtonGroup-groupedContainedHorizontal",
          "groupedContainedVertical": "MuiButtonGroup-groupedContainedVertical",
          "groupedContainedPrimary": "MuiButtonGroup-groupedContainedPrimary",
          "groupedContainedSecondary": "MuiButtonGroup-groupedContainedSecondary"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ButtonGroup/ButtonGroup.js",
      "inheritance": null,
      "usedInPages": [
        "/components/button-group"
      ]
    },
    "Card": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "raised": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the card will use raised styling.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Card",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiCard",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiCard-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Card/Card.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardActionArea": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "CardActionArea",
      "styles": {
        "classes": [
          "root",
          "focusVisible",
          "focusHighlight"
        ],
        "name": "MuiCardActionArea",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "focusVisible": "Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused.",
          "focusHighlight": "Styles applied to the overlay that covers the action area when it is keyboard focused."
        },
        "globalClasses": {
          "root": "MuiCardActionArea-root",
          "focusVisible": "Mui-focusVisible",
          "focusHighlight": "MuiCardActionArea-focusHighlight"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/CardActionArea/CardActionArea.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardActions": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the actions do not have additional margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "CardActions",
      "styles": {
        "classes": [
          "root",
          "spacing"
        ],
        "name": "MuiCardActions",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "spacing": "Styles applied to the root element if `disableSpacing={false}`."
        },
        "globalClasses": {
          "root": "MuiCardActions-root",
          "spacing": "MuiCardActions-spacing"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardActions/CardActions.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardContent": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "CardContent",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiCardContent",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiCardContent-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardContent/CardContent.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardHeader": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The action to display in the card header.",
          "tags": []
        },
        "avatar": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The Avatar for the Card Header.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, `subheader` and `title` won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `title` text, and optional `subheader` text\nwith the Typography component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "subheader": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "subheaderTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the subheader\n(as long as disableTypography is not `true`).",
          "tags": []
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the Card Title.",
          "tags": []
        },
        "titleTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the title\n(as long as disableTypography is not `true`).",
          "tags": []
        }
      },
      "name": "CardHeader",
      "styles": {
        "classes": [
          "root",
          "avatar",
          "action",
          "content",
          "title",
          "subheader"
        ],
        "name": "MuiCardHeader",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "avatar": "Styles applied to the avatar element.",
          "action": "Styles applied to the action element.",
          "content": "Styles applied to the content wrapper element.",
          "title": "Styles applied to the title Typography element.",
          "subheader": "Styles applied to the subheader Typography element."
        },
        "globalClasses": {
          "root": "MuiCardHeader-root",
          "avatar": "MuiCardHeader-avatar",
          "action": "MuiCardHeader-action",
          "content": "MuiCardHeader-content",
          "title": "MuiCardHeader-title",
          "subheader": "MuiCardHeader-subheader"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardHeader/CardHeader.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardMedia": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.node, props => {\n  if (!props.children && !props.image && !props.src && !props.component) {\n    return new Error(\n      'Material-UI: either `children`, `image`, `src` or `component` prop must be specified.',\n    );\n  }\n  return null;\n})",
            "chained": {
              "name": "node"
            }
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "Component for rendering image.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "image": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Image to be displayed as a background image.\nEither `image` or `src` prop must be specified.\nNote that caller must specify height otherwise the image will not be visible.",
          "tags": []
        },
        "src": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "An alias for `image` property.\nAvailable only with media components.\nMedia components: `video`, `audio`, `picture`, `iframe`, `img`.",
          "tags": []
        }
      },
      "name": "CardMedia",
      "styles": {
        "classes": [
          "root",
          "media",
          "img"
        ],
        "name": "MuiCardMedia",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "media": "Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`.",
          "img": "Styles applied to the root element if `component=\"picture or img\"`."
        },
        "globalClasses": {
          "root": "MuiCardMedia-root",
          "media": "MuiCardMedia-media",
          "img": "MuiCardMedia-img"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardMedia/CardMedia.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "Checkbox": {
      "description": "",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is checked.",
          "tags": []
        },
        "checkedIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is checked.",
          "defaultValue": {
            "value": "<CheckBoxIcon />",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the checkbox will be disabled.",
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is unchecked.",
          "defaultValue": {
            "value": "<CheckBoxOutlineBlankIcon />",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "indeterminate": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component appears indeterminate.\nThis does not set the native input element to indeterminate due\nto inconsistent behavior across browsers.\nHowever, we set a `data-indeterminate` attribute on the input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "indeterminateIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is indeterminate.",
          "defaultValue": {
            "value": "<IndeterminateCheckBoxIcon />",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the checkbox.\n`small` is equivalent to the dense checkbox styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The input component prop `type`.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "Checkbox",
      "styles": {
        "classes": [
          "root",
          "checked",
          "disabled",
          "indeterminate",
          "colorPrimary",
          "colorSecondary"
        ],
        "name": "MuiCheckbox",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "checked": "Pseudo-class applied to the root element if `checked={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "indeterminate": "Pseudo-class applied to the root element if `indeterminate={true}`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
        },
        "globalClasses": {
          "root": "MuiCheckbox-root",
          "checked": "Mui-checked",
          "disabled": "Mui-disabled",
          "indeterminate": "MuiCheckbox-indeterminate",
          "colorPrimary": "MuiCheckbox-colorPrimary",
          "colorSecondary": "MuiCheckbox-colorSecondary"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Checkbox/Checkbox.js",
      "inheritance": {
        "component": "IconButton",
        "pathname": "/api/icon-button"
      },
      "usedInPages": [
        "/components/checkboxes",
        "/components/transfer-list"
      ]
    },
    "Chip": {
      "description": "Chips represent complex entities in small blocks, such as a contact.",
      "methods": [],
      "props": {
        "avatar": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Avatar element.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "unsupportedProp"
          },
          "required": false,
          "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "clickable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the chip will appear clickable, and will raise when pressed,\neven if the onClick prop is not defined.\nIf false, the chip will not be clickable, even if onClick prop is defined.\nThis can be used, for example,\nalong with the component prop to indicate an anchor Chip is clickable.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "tags": []
        },
        "deleteIcon": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Override the default delete icon element. Shown only if `onDelete` is set.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the chip should be displayed in a disabled state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Icon element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the label.",
          "tags": []
        },
        "onDelete": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function fired when the delete icon is clicked.\nIf set, the delete icon will be shown.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the chip.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Chip",
      "styles": {
        "classes": [
          "root",
          "sizeSmall",
          "colorPrimary",
          "colorSecondary",
          "disabled",
          "clickable",
          "clickableColorPrimary",
          "clickableColorSecondary",
          "deletable",
          "deletableColorPrimary",
          "deletableColorSecondary",
          "outlined",
          "outlinedPrimary",
          "outlinedSecondary",
          "avatar",
          "avatarSmall",
          "avatarColorPrimary",
          "avatarColorSecondary",
          "icon",
          "iconSmall",
          "iconColorPrimary",
          "iconColorSecondary",
          "label",
          "labelSmall",
          "deleteIcon",
          "deleteIconSmall",
          "deleteIconColorPrimary",
          "deleteIconColorSecondary",
          "deleteIconOutlinedColorPrimary",
          "deleteIconOutlinedColorSecondary"
        ],
        "name": "MuiChip",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "clickable": "Styles applied to the root element if `onClick` is defined or `clickable={true}`.",
          "clickableColorPrimary": "Styles applied to the root element if `onClick` and `color=\"primary\"` is defined or `clickable={true}`.",
          "clickableColorSecondary": "Styles applied to the root element if `onClick` and `color=\"secondary\"` is defined or `clickable={true}`.",
          "deletable": "Styles applied to the root element if `onDelete` is defined.",
          "deletableColorPrimary": "Styles applied to the root element if `onDelete` and `color=\"primary\"` is defined.",
          "deletableColorSecondary": "Styles applied to the root element if `onDelete` and `color=\"secondary\"` is defined.",
          "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
          "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
          "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
          "avatar": "Styles applied to the `avatar` element.",
          "avatarSmall": "Styles applied to the `avatar` element if `size=\"small\"`.",
          "avatarColorPrimary": "Styles applied to the `avatar` element if `color=\"primary\"`.",
          "avatarColorSecondary": "Styles applied to the `avatar` element if `color=\"secondary\"`.",
          "icon": "Styles applied to the `icon` element.",
          "iconSmall": "Styles applied to the `icon` element if `size=\"small\"`.",
          "iconColorPrimary": "Styles applied to the `icon` element if `color=\"primary\"`.",
          "iconColorSecondary": "Styles applied to the `icon` element if `color=\"secondary\"`.",
          "label": "Styles applied to the label `span` element.",
          "labelSmall": "Styles applied to the label `span` element if `size=\"small\"`.",
          "deleteIcon": "Styles applied to the `deleteIcon` element.",
          "deleteIconSmall": "Styles applied to the `deleteIcon` element if `size=\"small\"`.",
          "deleteIconColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"default\"`.",
          "deleteIconColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"default\"`.",
          "deleteIconOutlinedColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"outlined\"`.",
          "deleteIconOutlinedColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiChip-root",
          "sizeSmall": "MuiChip-sizeSmall",
          "colorPrimary": "MuiChip-colorPrimary",
          "colorSecondary": "MuiChip-colorSecondary",
          "disabled": "Mui-disabled",
          "clickable": "MuiChip-clickable",
          "clickableColorPrimary": "MuiChip-clickableColorPrimary",
          "clickableColorSecondary": "MuiChip-clickableColorSecondary",
          "deletable": "MuiChip-deletable",
          "deletableColorPrimary": "MuiChip-deletableColorPrimary",
          "deletableColorSecondary": "MuiChip-deletableColorSecondary",
          "outlined": "MuiChip-outlined",
          "outlinedPrimary": "MuiChip-outlinedPrimary",
          "outlinedSecondary": "MuiChip-outlinedSecondary",
          "avatar": "MuiChip-avatar",
          "avatarSmall": "MuiChip-avatarSmall",
          "avatarColorPrimary": "MuiChip-avatarColorPrimary",
          "avatarColorSecondary": "MuiChip-avatarColorSecondary",
          "icon": "MuiChip-icon",
          "iconSmall": "MuiChip-iconSmall",
          "iconColorPrimary": "MuiChip-iconColorPrimary",
          "iconColorSecondary": "MuiChip-iconColorSecondary",
          "label": "MuiChip-label",
          "labelSmall": "MuiChip-labelSmall",
          "deleteIcon": "MuiChip-deleteIcon",
          "deleteIconSmall": "MuiChip-deleteIconSmall",
          "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
          "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
          "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
          "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Chip/Chip.js",
      "inheritance": null,
      "usedInPages": [
        "/components/chips"
      ]
    },
    "CircularProgress": {
      "description": "## ARIA\n\nIf the progress bar is describing the loading progress of a particular region of a page,\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\nattribute to `true` on that region until it has finished loading.",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "disableShrink": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.bool, props => {\n  if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n    return new Error(\n      'Material-UI: you have provided the `disableShrink` prop ' +\n        'with a variant other than `indeterminate`. This will have no effect.',\n    );\n  }\n\n  return null;\n})",
            "chained": {
              "name": "bool"
            }
          },
          "required": false,
          "description": "If `true`, the shrink animation is disabled.\nThis only works if variant is `indeterminate`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The size of the circle.\nIf using a number, the pixel unit is assumed.\nIf using a string, you need to provide the CSS unit, e.g '3rem'.",
          "defaultValue": {
            "value": "40",
            "computed": false
          },
          "tags": []
        },
        "thickness": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The thickness of the circle.",
          "defaultValue": {
            "value": "3.6",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The value of the progress indicator for the determinate and static variants.\nValue between 0 and 100.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'determinate'",
                "computed": false
              },
              {
                "value": "'indeterminate'",
                "computed": false
              },
              {
                "value": "'static'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.\nUse indeterminate when there is no progress value.",
          "defaultValue": {
            "value": "'indeterminate'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "CircularProgress",
      "styles": {
        "classes": [
          "root",
          "static",
          "indeterminate",
          "colorPrimary",
          "colorSecondary",
          "svg",
          "circle",
          "circleStatic",
          "circleIndeterminate",
          "circleDisableShrink"
        ],
        "name": "MuiCircularProgress",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "static": "Styles applied to the root element if `variant=\"static\"`.",
          "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "svg": "Styles applied to the `svg` element.",
          "circle": "Styles applied to the `circle` svg path.",
          "circleStatic": "Styles applied to the `circle` svg path if `variant=\"static\"`.",
          "circleIndeterminate": "Styles applied to the `circle` svg path if `variant=\"indeterminate\"`.",
          "circleDisableShrink": "Styles applied to the `circle` svg path if `disableShrink={true}`."
        },
        "globalClasses": {
          "root": "MuiCircularProgress-root",
          "static": "MuiCircularProgress-static",
          "indeterminate": "MuiCircularProgress-indeterminate",
          "colorPrimary": "MuiCircularProgress-colorPrimary",
          "colorSecondary": "MuiCircularProgress-colorSecondary",
          "svg": "MuiCircularProgress-svg",
          "circle": "MuiCircularProgress-circle",
          "circleStatic": "MuiCircularProgress-circleStatic",
          "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
          "circleDisableShrink": "MuiCircularProgress-circleDisableShrink"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CircularProgress/CircularProgress.js",
      "inheritance": null,
      "usedInPages": [
        "/components/progress"
      ]
    },
    "ClickAwayListener": {
      "description": "Listen for click events that occur somewhere in the document, outside of the element itself.\nFor instance, if you need to hide a menu when people click anywhere else on your page.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef.isRequired"
          },
          "required": false,
          "description": "The wrapped element.",
          "tags": []
        },
        "mouseEvent": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'onClick'",
                "computed": false
              },
              {
                "value": "'onMouseDown'",
                "computed": false
              },
              {
                "value": "'onMouseUp'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The mouse event to listen to. You can disable the listener by providing `false`.",
          "defaultValue": {
            "value": "'onClick'",
            "computed": false
          },
          "tags": []
        },
        "onClickAway": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when a \"click away\" event is detected.",
          "tags": []
        },
        "touchEvent": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'onTouchStart'",
                "computed": false
              },
              {
                "value": "'onTouchEnd'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The touch event to listen to. You can disable the listener by providing `false`.",
          "defaultValue": {
            "value": "'onTouchEnd'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ClickAwayListener",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": false,
      "filename": "/packages/material-ui/src/ClickAwayListener/ClickAwayListener.js",
      "inheritance": null,
      "usedInPages": [
        "/components/click-away-listener",
        "/components/menus"
      ]
    },
    "Collapse": {
      "description": "The Collapse transition is used by the\n[Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content node to be collapsed.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "collapsedHeight": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "The height of the container when collapsed.",
          "defaultValue": {
            "value": "'0px'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will transition in.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "duration.standard",
            "computed": true
          },
          "tags": []
        }
      },
      "name": "Collapse",
      "styles": {
        "classes": [
          "container",
          "entered",
          "hidden",
          "wrapper",
          "wrapperInner"
        ],
        "name": "MuiCollapse",
        "descriptions": {
          "container": "Styles applied to the container element.",
          "entered": "Styles applied to the container element when the transition has entered.",
          "hidden": "Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px.",
          "wrapper": "Styles applied to the outer wrapper element.",
          "wrapperInner": "Styles applied to the inner wrapper element."
        },
        "globalClasses": {
          "container": "MuiCollapse-container",
          "entered": "MuiCollapse-entered",
          "hidden": "MuiCollapse-hidden",
          "wrapper": "MuiCollapse-wrapper",
          "wrapperInner": "MuiCollapse-wrapperInner"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Collapse/Collapse.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/cards",
        "/components/lists",
        "/components/transitions"
      ]
    },
    "Container": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the left and right padding is removed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fixed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set the max-width to match the min-width of the current breakpoint.\nThis is useful if you'd prefer to design for a fixed set of sizes\ninstead of trying to accommodate a fully fluid viewport.\nIt's fluid by default.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "maxWidth": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'xs'",
                "computed": false
              },
              {
                "value": "'sm'",
                "computed": false
              },
              {
                "value": "'md'",
                "computed": false
              },
              {
                "value": "'lg'",
                "computed": false
              },
              {
                "value": "'xl'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine the max-width of the container.\nThe container width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
          "defaultValue": {
            "value": "'lg'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Container",
      "styles": {
        "classes": [
          "root",
          "disableGutters",
          "fixed",
          "maxWidthXs",
          "maxWidthSm",
          "maxWidthMd",
          "maxWidthLg",
          "maxWidthXl"
        ],
        "name": "MuiContainer",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "disableGutters": "Styles applied to the root element if `disableGutters={true}`.",
          "fixed": "Styles applied to the root element if `fixed={true}`.",
          "maxWidthXs": "Styles applied to the root element if `maxWidth=\"xs\"`.",
          "maxWidthSm": "Styles applied to the root element if `maxWidth=\"sm\"`.",
          "maxWidthMd": "Styles applied to the root element if `maxWidth=\"md\"`.",
          "maxWidthLg": "Styles applied to the root element if `maxWidth=\"lg\"`.",
          "maxWidthXl": "Styles applied to the root element if `maxWidth=\"xl\"`."
        },
        "globalClasses": {
          "root": "MuiContainer-root",
          "disableGutters": "MuiContainer-disableGutters",
          "fixed": "MuiContainer-fixed",
          "maxWidthXs": "MuiContainer-maxWidthXs",
          "maxWidthSm": "MuiContainer-maxWidthSm",
          "maxWidthMd": "MuiContainer-maxWidthMd",
          "maxWidthLg": "MuiContainer-maxWidthLg",
          "maxWidthXl": "MuiContainer-maxWidthXl"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLElement",
      "filename": "/packages/material-ui/src/Container/Container.js",
      "inheritance": null,
      "usedInPages": [
        "/components/container"
      ]
    },
    "CssBaseline": {
      "description": "Kickstart an elegant, consistent, and simple baseline to build upon.",
      "displayName": "CssBaseline",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "You can wrap a node.",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "CssBaseline",
      "styles": {
        "classes": [
          "@global"
        ],
        "name": "MuiCssBaseline",
        "descriptions": {
          "const": "eslint-disable no-unused-vars",
          "return": "eslint-enable no-unused-vars"
        },
        "globalClasses": {
          "@global": "MuiCssBaseline-@global"
        }
      },
      "spread": false,
      "filename": "/packages/material-ui/src/CssBaseline/CssBaseline.js",
      "inheritance": null,
      "usedInPages": [
        "/components/css-baseline"
      ]
    },
    "Dialog": {
      "description": "Dialogs are overlaid modal paper based components with a backdrop.",
      "methods": [],
      "props": {
        "aria-describedby": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id(s) of the element(s) that describe the dialog.",
          "tags": []
        },
        "aria-labelledby": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id(s) of the element(s) that label the dialog.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Dialog children, usually the included sub-components.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableBackdropClick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, clicking the backdrop will not fire the `onClose` callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableEscapeKeyDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hitting escape will not fire the `onClose` callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullScreen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the dialog will be full-screen",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the dialog stretches to `maxWidth`.\n\nNotice that the dialog width grow is limited by the default margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "maxWidth": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'xs'",
                "computed": false
              },
              {
                "value": "'sm'",
                "computed": false
              },
              {
                "value": "'md'",
                "computed": false
              },
              {
                "value": "'lg'",
                "computed": false
              },
              {
                "value": "'xl'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine the max-width of the dialog.\nThe dialog width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
          "defaultValue": {
            "value": "'sm'",
            "computed": false
          },
          "tags": []
        },
        "onBackdropClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the backdrop is clicked.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the dialog enters.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog is entering.",
          "tags": []
        },
        "onEscapeKeyDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the escape key is pressed,\n`disableKeyboard` is false and the modal is in focus.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the dialog exits.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the Dialog is open.",
          "tags": []
        },
        "PaperComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the body of the dialog.",
          "defaultValue": {
            "value": "Paper",
            "computed": true
          },
          "tags": []
        },
        "PaperProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Paper`](/api/paper/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "scroll": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'body'",
                "computed": false
              },
              {
                "value": "'paper'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine the container for scrolling the dialog.",
          "defaultValue": {
            "value": "'paper'",
            "computed": false
          },
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Fade",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "tags": []
        }
      },
      "name": "Dialog",
      "styles": {
        "classes": [
          "root",
          "scrollPaper",
          "scrollBody",
          "container",
          "paper",
          "paperScrollPaper",
          "paperScrollBody",
          "paperWidthFalse",
          "paperWidthXs",
          "paperWidthSm",
          "paperWidthMd",
          "paperWidthLg",
          "paperWidthXl",
          "paperFullWidth",
          "paperFullScreen"
        ],
        "name": "MuiDialog",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "scrollPaper": "Styles applied to the container element if `scroll=\"paper\"`.",
          "scrollBody": "Styles applied to the container element if `scroll=\"body\"`.",
          "container": "Styles applied to the container element.",
          "paper": "Styles applied to the `Paper` component.",
          "paperScrollPaper": "Styles applied to the `Paper` component if `scroll=\"paper\"`.",
          "paperScrollBody": "Styles applied to the `Paper` component if `scroll=\"body\"`.",
          "paperWidthFalse": "Styles applied to the `Paper` component if `maxWidth=false`.",
          "paperWidthXs": "Styles applied to the `Paper` component if `maxWidth=\"xs\"`.",
          "paperWidthSm": "Styles applied to the `Paper` component if `maxWidth=\"sm\"`.",
          "paperWidthMd": "Styles applied to the `Paper` component if `maxWidth=\"md\"`.",
          "paperWidthLg": "Styles applied to the `Paper` component if `maxWidth=\"lg\"`.",
          "paperWidthXl": "Styles applied to the `Paper` component if `maxWidth=\"xl\"`.",
          "paperFullWidth": "Styles applied to the `Paper` component if `fullWidth={true}`.",
          "paperFullScreen": "Styles applied to the `Paper` component if `fullScreen={true}`."
        },
        "globalClasses": {
          "root": "MuiDialog-root",
          "scrollPaper": "MuiDialog-scrollPaper",
          "scrollBody": "MuiDialog-scrollBody",
          "container": "MuiDialog-container",
          "paper": "MuiDialog-paper",
          "paperScrollPaper": "MuiDialog-paperScrollPaper",
          "paperScrollBody": "MuiDialog-paperScrollBody",
          "paperWidthFalse": "MuiDialog-paperWidthFalse",
          "paperWidthXs": "MuiDialog-paperWidthXs",
          "paperWidthSm": "MuiDialog-paperWidthSm",
          "paperWidthMd": "MuiDialog-paperWidthMd",
          "paperWidthLg": "MuiDialog-paperWidthLg",
          "paperWidthXl": "MuiDialog-paperWidthXl",
          "paperFullWidth": "MuiDialog-paperFullWidth",
          "paperFullScreen": "MuiDialog-paperFullScreen"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Dialog/Dialog.js",
      "inheritance": {
        "component": "Modal",
        "pathname": "/api/modal"
      },
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogActions": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the actions do not have additional margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "DialogActions",
      "styles": {
        "classes": [
          "root",
          "spacing"
        ],
        "name": "MuiDialogActions",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "spacing": "Styles applied to the root element if `disableSpacing={false}`."
        },
        "globalClasses": {
          "root": "MuiDialogActions-root",
          "spacing": "MuiDialogActions-spacing"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/DialogActions/DialogActions.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogContent": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "dividers": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Display the top and bottom dividers.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "DialogContent",
      "styles": {
        "classes": [
          "root",
          "dividers"
        ],
        "name": "MuiDialogContent",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "dividers": "Styles applied to the root element if `dividers={true}`."
        },
        "globalClasses": {
          "root": "MuiDialogContent-root",
          "dividers": "MuiDialogContent-dividers"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/DialogContent/DialogContent.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogContentText": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "DialogContentText",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiDialogContentText",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiDialogContentText-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLParagraphElement",
      "filename": "/packages/material-ui/src/DialogContentText/DialogContentText.js",
      "inheritance": {
        "component": "Typography",
        "pathname": "/api/typography"
      },
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogTitle": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the children won't be wrapped by a typography component.\nFor instance, this can be useful to render an h4 instead of the default h2.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "DialogTitle",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiDialogTitle",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiDialogTitle-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/DialogTitle/DialogTitle.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "Divider": {
      "description": "",
      "methods": [],
      "props": {
        "absolute": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Absolutely position the element.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'hr'",
            "computed": false
          },
          "tags": []
        },
        "flexItem": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a vertical divider will have the correct height when used in flex container.\n(By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "light": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the divider will have a lighter color.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The divider orientation.",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'fullWidth'",
                "computed": false
              },
              {
                "value": "'inset'",
                "computed": false
              },
              {
                "value": "'middle'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'fullWidth'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Divider",
      "styles": {
        "classes": [
          "root",
          "absolute",
          "inset",
          "light",
          "middle",
          "vertical",
          "flexItem"
        ],
        "name": "MuiDivider",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "absolute": "Styles applied to the root element if `absolute={true}`.",
          "inset": "Styles applied to the root element if `variant=\"inset\"`.",
          "light": "Styles applied to the root element if `light={true}`.",
          "middle": "Styles applied to the root element if `variant=\"middle\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "flexItem": "Styles applied to the root element if `flexItem={true}`."
        },
        "globalClasses": {
          "root": "MuiDivider-root",
          "absolute": "MuiDivider-absolute",
          "inset": "MuiDivider-inset",
          "light": "MuiDivider-light",
          "middle": "MuiDivider-middle",
          "vertical": "MuiDivider-vertical",
          "flexItem": "MuiDivider-flexItem"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLHRElement",
      "filename": "/packages/material-ui/src/Divider/Divider.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dividers",
        "/components/lists"
      ]
    },
    "Drawer": {
      "description": "The props of the [Modal](/api/modal/) component are available\nwhen `variant=\"temporary\"` is set.",
      "methods": [],
      "props": {
        "anchor": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Side from which the drawer will appear.",
          "defaultValue": {
            "value": "'left'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The contents of the drawer.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "elevation": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The elevation of the drawer.",
          "defaultValue": {
            "value": "16",
            "computed": false
          },
          "tags": []
        },
        "ModalProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Modal`](/api/modal/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the drawer is open.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "PaperProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Paper`](/api/paper/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "SlideProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Slide`](/api/slide/) element.",
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'permanent'",
                "computed": false
              },
              {
                "value": "'persistent'",
                "computed": false
              },
              {
                "value": "'temporary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'temporary'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Drawer",
      "styles": {
        "classes": [
          "root",
          "docked",
          "paper",
          "paperAnchorLeft",
          "paperAnchorRight",
          "paperAnchorTop",
          "paperAnchorBottom",
          "paperAnchorDockedLeft",
          "paperAnchorDockedTop",
          "paperAnchorDockedRight",
          "paperAnchorDockedBottom",
          "modal"
        ],
        "name": "MuiDrawer",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "docked": "Styles applied to the root element if `variant=\"permanent or persistent\"`.",
          "paper": "Styles applied to the `Paper` component.",
          "paperAnchorLeft": "Styles applied to the `Paper` component if `anchor=\"left\"`.",
          "paperAnchorRight": "Styles applied to the `Paper` component if `anchor=\"right\"`.",
          "paperAnchorTop": "Styles applied to the `Paper` component if `anchor=\"top\"`.",
          "paperAnchorBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"`.",
          "paperAnchorDockedLeft": "Styles applied to the `Paper` component if `anchor=\"left\"` and `variant` is not \"temporary\".",
          "paperAnchorDockedTop": "Styles applied to the `Paper` component if `anchor=\"top\"` and `variant` is not \"temporary\".",
          "paperAnchorDockedRight": "Styles applied to the `Paper` component if `anchor=\"right\"` and `variant` is not \"temporary\".",
          "paperAnchorDockedBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"` and `variant` is not \"temporary\".",
          "modal": "Styles applied to the `Modal` component."
        },
        "globalClasses": {
          "root": "MuiDrawer-root",
          "docked": "MuiDrawer-docked",
          "paper": "MuiDrawer-paper",
          "paperAnchorLeft": "MuiDrawer-paperAnchorLeft",
          "paperAnchorRight": "MuiDrawer-paperAnchorRight",
          "paperAnchorTop": "MuiDrawer-paperAnchorTop",
          "paperAnchorBottom": "MuiDrawer-paperAnchorBottom",
          "paperAnchorDockedLeft": "MuiDrawer-paperAnchorDockedLeft",
          "paperAnchorDockedTop": "MuiDrawer-paperAnchorDockedTop",
          "paperAnchorDockedRight": "MuiDrawer-paperAnchorDockedRight",
          "paperAnchorDockedBottom": "MuiDrawer-paperAnchorDockedBottom",
          "modal": "MuiDrawer-modal"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Drawer/Drawer.js",
      "inheritance": null,
      "usedInPages": [
        "/components/drawers"
      ]
    },
    "ExpansionPanel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.node.isRequired, props => {\n  const summary = React.Children.toArray(props.children)[0];\n  if (isFragment(summary)) {\n    return new Error(\n      \"Material-UI: the ExpansionPanel doesn't accept a Fragment as a child. \" +\n        'Consider providing an array instead.',\n    );\n  }\n\n  if (!React.isValidElement(summary)) {\n    return new Error(\n      'Material-UI: expected the first child of ExpansionPanel to be a valid element.',\n    );\n  }\n\n  return null;\n})",
            "chained": {
              "name": "node"
            }
          },
          "required": false,
          "description": "The content of the expansion panel.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "defaultExpanded": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, expands the panel by default.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the panel will be displayed in a disabled state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "expanded": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, expands the panel, otherwise collapse it.\nSetting this prop enables control over the panel.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the expand/collapse state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The `expanded` state of the panel.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "expanded"
            }
          ]
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the collapse effect.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Collapse",
            "computed": true
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "tags": []
        }
      },
      "name": "ExpansionPanel",
      "styles": {
        "classes": [
          "root",
          "rounded",
          "expanded",
          "disabled"
        ],
        "name": "MuiExpansionPanel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "rounded": "Styles applied to the root element if `square={false}`.",
          "expanded": "Styles applied to the root element if `expanded={true}`.",
          "disabled": "Styles applied to the root element if `disabled={true}`."
        },
        "globalClasses": {
          "root": "MuiExpansionPanel-root",
          "rounded": "MuiExpansionPanel-rounded",
          "expanded": "Mui-expanded",
          "disabled": "Mui-disabled"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanel/ExpansionPanel.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "ExpansionPanelActions": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the actions do not have additional margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ExpansionPanelActions",
      "styles": {
        "classes": [
          "root",
          "spacing"
        ],
        "name": "MuiExpansionPanelActions",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "spacing": "Styles applied to the root element if `disableSpacing={false}`."
        },
        "globalClasses": {
          "root": "MuiExpansionPanelActions-root",
          "spacing": "MuiExpansionPanelActions-spacing"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanelActions/ExpansionPanelActions.js",
      "inheritance": null,
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "ExpansionPanelDetails": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the expansion panel details.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ExpansionPanelDetails",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiExpansionPanelDetails",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiExpansionPanelDetails-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanelDetails/ExpansionPanelDetails.js",
      "inheritance": null,
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "ExpansionPanelSummary": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the expansion panel summary.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "expandIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display as the expand indicator.",
          "tags": []
        },
        "IconButtonProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `IconButton` element wrapping the expand icon.",
          "tags": []
        }
      },
      "name": "ExpansionPanelSummary",
      "styles": {
        "classes": [
          "root",
          "expanded",
          "focused",
          "disabled",
          "content",
          "expandIcon"
        ],
        "name": "MuiExpansionPanelSummary",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "expanded": "Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "content": "Styles applied to the children wrapper element.",
          "expandIcon": "Styles applied to the `IconButton` component when `expandIcon` is supplied."
        },
        "globalClasses": {
          "root": "MuiExpansionPanelSummary-root",
          "expanded": "Mui-expanded",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "content": "MuiExpansionPanelSummary-content",
          "expandIcon": "MuiExpansionPanelSummary-expandIcon"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanelSummary/ExpansionPanelSummary.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "Fab": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "href": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'large'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'round'",
                "computed": false
              },
              {
                "value": "'extended'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'round'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Fab",
      "styles": {
        "classes": [
          "root",
          "label",
          "primary",
          "secondary",
          "extended",
          "focusVisible",
          "disabled",
          "colorInherit",
          "sizeSmall",
          "sizeMedium"
        ],
        "name": "MuiFab",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "label": "Styles applied to the span element that wraps the children.",
          "primary": "Styles applied to the root element if `color=\"primary\"`.",
          "secondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "extended": "Styles applied to the root element if `variant=\"extended\"`.",
          "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"``.",
          "sizeMedium": "Styles applied to the root element if `size=\"medium\"``."
        },
        "globalClasses": {
          "root": "MuiFab-root",
          "label": "MuiFab-label",
          "primary": "MuiFab-primary",
          "secondary": "MuiFab-secondary",
          "extended": "MuiFab-extended",
          "focusVisible": "Mui-focusVisible",
          "disabled": "Mui-disabled",
          "colorInherit": "MuiFab-colorInherit",
          "sizeSmall": "MuiFab-sizeSmall",
          "sizeMedium": "MuiFab-sizeMedium"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/Fab/Fab.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/floating-action-button"
      ]
    },
    "Fade": {
      "description": "The Fade transition is used by the [Modal](/components/modal/) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will transition in.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Fade",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Fade/Fade.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/transitions"
      ]
    },
    "FilledInput": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "disableUnderline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will not have an underline.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "FilledInput",
      "styles": {
        "classes": [
          "root",
          "colorSecondary",
          "underline",
          "focused",
          "disabled",
          "adornedStart",
          "adornedEnd",
          "error",
          "marginDense",
          "multiline",
          "input",
          "inputMarginDense",
          "inputHiddenLabel",
          "inputMultiline",
          "inputAdornedStart",
          "inputAdornedEnd"
        ],
        "name": "MuiFilledInput",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorSecondary": "Styles applied to the root element if color secondary.",
          "underline": "Styles applied to the root element if `disableUnderline={false}`.",
          "focused": "Pseudo-class applied to the root element if the component is focused.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
          "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputHiddenLabel": "Styles applied to the `input` if in `<FormControl hiddenLabel />`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
          "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
        },
        "globalClasses": {
          "root": "MuiFilledInput-root",
          "colorSecondary": "MuiFilledInput-colorSecondary",
          "underline": "MuiFilledInput-underline",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "adornedStart": "MuiFilledInput-adornedStart",
          "adornedEnd": "MuiFilledInput-adornedEnd",
          "error": "Mui-error",
          "marginDense": "MuiFilledInput-marginDense",
          "multiline": "MuiFilledInput-multiline",
          "input": "MuiFilledInput-input",
          "inputMarginDense": "MuiFilledInput-inputMarginDense",
          "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
          "inputMultiline": "MuiFilledInput-inputMultiline",
          "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
          "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/FilledInput/FilledInput.js",
      "inheritance": {
        "component": "InputBase",
        "pathname": "/api/input-base"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "FormControl": {
      "description": "Provides context such as filled/focused/error/required for form inputs.\nRelying on the context provides high flexibility and ensures that the state always stays\nconsistent across the children of the `FormControl`.\nThis context is used by the following components:\n\n - FormLabel\n - FormHelperText\n - Input\n - InputLabel\n\nYou can find one composition example below and more going to [the demos](/components/text-fields/#components).\n\n```jsx\n<FormControl>\n  <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n  <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n  <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n</FormControl>\n```\n\n⚠️Only one input can be used within a FormControl.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The contents of the form control.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label, input and helper text should be displayed in a disabled state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should be displayed in an error state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "hiddenLabel": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will be hidden.\nThis is used to increase density for a `FilledInput`.\nBe sure to add `aria-label` to the `input` element.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'none'",
                "computed": false
              },
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'normal'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
          "defaultValue": {
            "value": "'none'",
            "computed": false
          },
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will indicate that the input is required.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the text field.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "FormControl",
      "styles": {
        "classes": [
          "root",
          "marginNormal",
          "marginDense",
          "fullWidth"
        ],
        "name": "MuiFormControl",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "marginNormal": "Styles applied to the root element if `margin=\"normal\"`.",
          "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`."
        },
        "globalClasses": {
          "root": "MuiFormControl-root",
          "marginNormal": "MuiFormControl-marginNormal",
          "marginDense": "MuiFormControl-marginDense",
          "fullWidth": "MuiFormControl-fullWidth"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/FormControl/FormControl.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/radio-buttons",
        "/components/switches",
        "/components/text-fields"
      ]
    },
    "FormControlLabel": {
      "description": "Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\nUse this component if you want to display an extra label.",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component appears selected.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "control": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the control will be disabled.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The text to be used in an enclosing label element.",
          "tags": []
        },
        "labelPlacement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'end'",
                "computed": false
              },
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The position of the label.",
          "defaultValue": {
            "value": "'end'",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component.",
          "tags": []
        }
      },
      "name": "FormControlLabel",
      "styles": {
        "classes": [
          "root",
          "labelPlacementStart",
          "labelPlacementTop",
          "labelPlacementBottom",
          "disabled",
          "label"
        ],
        "name": "MuiFormControlLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "labelPlacementStart": "Styles applied to the root element if `labelPlacement=\"start\"`.",
          "labelPlacementTop": "Styles applied to the root element if `labelPlacement=\"top\"`.",
          "labelPlacementBottom": "Styles applied to the root element if `labelPlacement=\"bottom\"`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "label": "Styles applied to the label's Typography component."
        },
        "globalClasses": {
          "root": "MuiFormControlLabel-root",
          "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
          "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
          "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
          "disabled": "Mui-disabled",
          "label": "MuiFormControlLabel-label"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLabelElement",
      "filename": "/packages/material-ui/src/FormControlLabel/FormControlLabel.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/radio-buttons",
        "/components/switches"
      ]
    },
    "FormGroup": {
      "description": "`FormGroup` wraps controls such as `Checkbox` and `Switch`.\nIt provides compact row layout.\nFor the `Radio`, you should be using the `RadioGroup` component instead of this one.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "row": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Display group of elements in a compact row.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "FormGroup",
      "styles": {
        "classes": [
          "root",
          "row"
        ],
        "name": "MuiFormGroup",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "row": "Styles applied to the root element if `row={true}`."
        },
        "globalClasses": {
          "root": "MuiFormGroup-root",
          "row": "MuiFormGroup-row"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/FormGroup/FormGroup.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/switches"
      ]
    },
    "FormHelperText": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.\n\nIf `' '` is provided, the component reserves one line height for displaying a future message.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'p'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should be displayed in a disabled state.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, helper text should be displayed in an error state.",
          "tags": []
        },
        "filled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should use filled classes key.",
          "tags": []
        },
        "focused": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should use focused classes key.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should use required classes key.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "tags": []
        }
      },
      "name": "FormHelperText",
      "styles": {
        "classes": [
          "root",
          "error",
          "disabled",
          "marginDense",
          "contained",
          "focused",
          "filled",
          "required"
        ],
        "name": "MuiFormHelperText",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
          "contained": "Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "filled": "Pseudo-class applied to the root element if `filled={true}`.",
          "required": "Pseudo-class applied to the root element if `required={true}`."
        },
        "globalClasses": {
          "root": "MuiFormHelperText-root",
          "error": "Mui-error",
          "disabled": "Mui-disabled",
          "marginDense": "MuiFormHelperText-marginDense",
          "contained": "MuiFormHelperText-contained",
          "focused": "Mui-focused",
          "filled": "MuiFormHelperText-filled",
          "required": "Mui-required"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLParagraphElement",
      "filename": "/packages/material-ui/src/FormHelperText/FormHelperText.js",
      "inheritance": null,
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "FormLabel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'label'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should be displayed in a disabled state.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should be displayed in an error state.",
          "tags": []
        },
        "filled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should use filled classes key.",
          "tags": []
        },
        "focused": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input of this label is focused (used by `FormGroup` components).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will indicate that the input is required.",
          "tags": []
        }
      },
      "name": "FormLabel",
      "styles": {
        "classes": [
          "root",
          "colorSecondary",
          "focused",
          "disabled",
          "error",
          "filled",
          "required",
          "asterisk"
        ],
        "name": "MuiFormLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorSecondary": "Styles applied to the root element if the color is secondary.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "filled": "Pseudo-class applied to the root element if `filled={true}`.",
          "required": "Pseudo-class applied to the root element if `required={true}`.",
          "asterisk": "Styles applied to the asterisk element."
        },
        "globalClasses": {
          "root": "MuiFormLabel-root",
          "colorSecondary": "MuiFormLabel-colorSecondary",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "filled": "MuiFormLabel-filled",
          "required": "Mui-required",
          "asterisk": "MuiFormLabel-asterisk"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLabelElement",
      "filename": "/packages/material-ui/src/FormLabel/FormLabel.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/radio-buttons",
        "/components/switches"
      ]
    },
    "Grid": {
      "description": "",
      "methods": [],
      "props": {
        "alignContent": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'stretch'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'flex-end'",
                "computed": false
              },
              {
                "value": "'space-between'",
                "computed": false
              },
              {
                "value": "'space-around'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `align-content` style property.\nIt's applied for all screen sizes.",
          "defaultValue": {
            "value": "'stretch'",
            "computed": false
          },
          "tags": []
        },
        "alignItems": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'flex-end'",
                "computed": false
              },
              {
                "value": "'stretch'",
                "computed": false
              },
              {
                "value": "'baseline'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `align-items` style property.\nIt's applied for all screen sizes.",
          "defaultValue": {
            "value": "'stretch'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "container": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will have the flex *container* behavior.\nYou should be wrapping *items* with a *container*.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'row'",
                "computed": false
              },
              {
                "value": "'row-reverse'",
                "computed": false
              },
              {
                "value": "'column'",
                "computed": false
              },
              {
                "value": "'column-reverse'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `flex-direction` style property.\nIt is applied for all screen sizes.",
          "defaultValue": {
            "value": "'row'",
            "computed": false
          },
          "tags": []
        },
        "item": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will have the flex *item* behavior.\nYou should be wrapping *items* with a *container*.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "justify": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'flex-end'",
                "computed": false
              },
              {
                "value": "'space-between'",
                "computed": false
              },
              {
                "value": "'space-around'",
                "computed": false
              },
              {
                "value": "'space-evenly'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `justify-content` style property.\nIt is applied for all screen sizes.",
          "defaultValue": {
            "value": "'flex-start'",
            "computed": false
          },
          "tags": []
        },
        "lg": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `lg` breakpoint and wider screens if not overridden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "md": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `md` breakpoint and wider screens if not overridden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "sm": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `sm` breakpoint and wider screens if not overridden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "spacing": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the space between the type `item` component.\nIt can only be used on a type `container` component.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "wrap": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'nowrap'",
                "computed": false
              },
              {
                "value": "'wrap'",
                "computed": false
              },
              {
                "value": "'wrap-reverse'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `flex-wrap` style property.\nIt's applied for all screen sizes.",
          "defaultValue": {
            "value": "'wrap'",
            "computed": false
          },
          "tags": []
        },
        "xl": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `xl` breakpoint and wider screens.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xs": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for all the screen sizes with the lowest priority.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "zeroMinWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, it sets `min-width: 0` on the item.\nRefer to the limitations section of the documentation to better understand the use case.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Grid",
      "styles": {
        "classes": [
          "root",
          "container",
          "item",
          "zeroMinWidth",
          "direction-xs-column",
          "direction-xs-column-reverse",
          "direction-xs-row-reverse",
          "wrap-xs-nowrap",
          "wrap-xs-wrap-reverse",
          "align-items-xs-center",
          "align-items-xs-flex-start",
          "align-items-xs-flex-end",
          "align-items-xs-baseline",
          "align-content-xs-center",
          "align-content-xs-flex-start",
          "align-content-xs-flex-end",
          "align-content-xs-space-between",
          "align-content-xs-space-around",
          "justify-xs-center",
          "justify-xs-flex-end",
          "justify-xs-space-between",
          "justify-xs-space-around",
          "justify-xs-space-evenly",
          "spacing-xs-1",
          "spacing-xs-2",
          "spacing-xs-3",
          "spacing-xs-4",
          "spacing-xs-5",
          "spacing-xs-6",
          "spacing-xs-7",
          "spacing-xs-8",
          "spacing-xs-9",
          "spacing-xs-10",
          "grid-xs-auto",
          "grid-xs-true",
          "grid-xs-1",
          "grid-xs-2",
          "grid-xs-3",
          "grid-xs-4",
          "grid-xs-5",
          "grid-xs-6",
          "grid-xs-7",
          "grid-xs-8",
          "grid-xs-9",
          "grid-xs-10",
          "grid-xs-11",
          "grid-xs-12"
        ],
        "name": "MuiGrid",
        "descriptions": {
          "root": "Styles applied to the root element",
          "container": "Styles applied to the root element if `container={true}`.",
          "item": "Styles applied to the root element if `item={true}`.",
          "zeroMinWidth": "Styles applied to the root element if `zeroMinWidth={true}`.",
          "": "Styles applied to the root element if `justify=\"space-evenly\"`."
        },
        "globalClasses": {
          "root": "MuiGrid-root",
          "container": "MuiGrid-container",
          "item": "MuiGrid-item",
          "zeroMinWidth": "MuiGrid-zeroMinWidth",
          "direction-xs-column": "MuiGrid-direction-xs-column",
          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
          "align-items-xs-center": "MuiGrid-align-items-xs-center",
          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
          "align-content-xs-center": "MuiGrid-align-content-xs-center",
          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
          "justify-xs-center": "MuiGrid-justify-xs-center",
          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
          "spacing-xs-1": "MuiGrid-spacing-xs-1",
          "spacing-xs-2": "MuiGrid-spacing-xs-2",
          "spacing-xs-3": "MuiGrid-spacing-xs-3",
          "spacing-xs-4": "MuiGrid-spacing-xs-4",
          "spacing-xs-5": "MuiGrid-spacing-xs-5",
          "spacing-xs-6": "MuiGrid-spacing-xs-6",
          "spacing-xs-7": "MuiGrid-spacing-xs-7",
          "spacing-xs-8": "MuiGrid-spacing-xs-8",
          "spacing-xs-9": "MuiGrid-spacing-xs-9",
          "spacing-xs-10": "MuiGrid-spacing-xs-10",
          "grid-xs-auto": "MuiGrid-grid-xs-auto",
          "grid-xs-true": "MuiGrid-grid-xs-true",
          "grid-xs-1": "MuiGrid-grid-xs-1",
          "grid-xs-2": "MuiGrid-grid-xs-2",
          "grid-xs-3": "MuiGrid-grid-xs-3",
          "grid-xs-4": "MuiGrid-grid-xs-4",
          "grid-xs-5": "MuiGrid-grid-xs-5",
          "grid-xs-6": "MuiGrid-grid-xs-6",
          "grid-xs-7": "MuiGrid-grid-xs-7",
          "grid-xs-8": "MuiGrid-grid-xs-8",
          "grid-xs-9": "MuiGrid-grid-xs-9",
          "grid-xs-10": "MuiGrid-grid-xs-10",
          "grid-xs-11": "MuiGrid-grid-xs-11",
          "grid-xs-12": "MuiGrid-grid-xs-12"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Grid/Grid.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid"
      ]
    },
    "GridList": {
      "description": "",
      "methods": [],
      "props": {
        "cellHeight": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "Number of px for one cell height.\nYou can set `'auto'` if you want to let the children determine the height.",
          "defaultValue": {
            "value": "180",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Grid Tiles that will be in Grid List.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "cols": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Number of columns.",
          "defaultValue": {
            "value": "2",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'ul'",
            "computed": false
          },
          "tags": []
        },
        "spacing": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Number of px for the spacing between tiles.",
          "defaultValue": {
            "value": "4",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "GridList",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiGridList",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiGridList-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui/src/GridList/GridList.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list"
      ]
    },
    "GridListTile": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Theoretically you can pass any node as children, but the main use case is to pass an img,\nin which case GridListTile takes care of making the image \"cover\" available space\n(similar to `background-size: cover` or to `object-fit: cover`).",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "cols": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Width of the tile in number of grid cells.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "rows": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Height of the tile in number of grid cells.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "GridListTile",
      "styles": {
        "classes": [
          "root",
          "tile",
          "imgFullHeight",
          "imgFullWidth"
        ],
        "name": "MuiGridListTile",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "tile": "Styles applied to the `div` element that wraps the children.",
          "imgFullHeight": "Styles applied to an `img` element child, if needed to ensure it covers the tile.",
          "imgFullWidth": "Styles applied to an `img` element child, if needed to ensure it covers the tile."
        },
        "globalClasses": {
          "root": "MuiGridListTile-root",
          "tile": "MuiGridListTile-tile",
          "imgFullHeight": "MuiGridListTile-imgFullHeight",
          "imgFullWidth": "MuiGridListTile-imgFullWidth"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/GridListTile/GridListTile.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list"
      ]
    },
    "GridListTileBar": {
      "description": "",
      "methods": [],
      "props": {
        "actionIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "An IconButton element to be used as secondary action target\n(primary action target is the tile itself).",
          "tags": []
        },
        "actionPosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Position of secondary action IconButton.",
          "defaultValue": {
            "value": "'right'",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "subtitle": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "String or element serving as subtitle (support text).",
          "tags": []
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Title to be displayed on tile.",
          "tags": []
        },
        "titlePosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Position of the title bar.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "GridListTileBar",
      "styles": {
        "classes": [
          "root",
          "titlePositionBottom",
          "titlePositionTop",
          "rootSubtitle",
          "titleWrap",
          "titleWrapActionPosLeft",
          "titleWrapActionPosRight",
          "title",
          "subtitle",
          "actionIcon",
          "actionIconActionPosLeft"
        ],
        "name": "MuiGridListTileBar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "titlePositionBottom": "Styles applied to the root element if `titlePosition=\"bottom\"`.",
          "titlePositionTop": "Styles applied to the root element if `titlePosition=\"top\"`.",
          "rootSubtitle": "Styles applied to the root element if a `subtitle` is provided.",
          "titleWrap": "Styles applied to the title and subtitle container element.",
          "titleWrapActionPosLeft": "Styles applied to the container element if `actionPosition=\"left\"`.",
          "titleWrapActionPosRight": "Styles applied to the container element if `actionPosition=\"right\"`.",
          "title": "Styles applied to the title container element.",
          "subtitle": "Styles applied to the subtitle container element.",
          "actionIcon": "Styles applied to the actionIcon if supplied.",
          "actionIconActionPosLeft": "Styles applied to the actionIcon if `actionPosition=\"left\"`."
        },
        "globalClasses": {
          "root": "MuiGridListTileBar-root",
          "titlePositionBottom": "MuiGridListTileBar-titlePositionBottom",
          "titlePositionTop": "MuiGridListTileBar-titlePositionTop",
          "rootSubtitle": "MuiGridListTileBar-rootSubtitle",
          "titleWrap": "MuiGridListTileBar-titleWrap",
          "titleWrapActionPosLeft": "MuiGridListTileBar-titleWrapActionPosLeft",
          "titleWrapActionPosRight": "MuiGridListTileBar-titleWrapActionPosRight",
          "title": "MuiGridListTileBar-title",
          "subtitle": "MuiGridListTileBar-subtitle",
          "actionIcon": "MuiGridListTileBar-actionIcon",
          "actionIconActionPosLeft": "MuiGridListTileBar-actionIconActionPosLeft"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/GridListTileBar/GridListTileBar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list"
      ]
    },
    "Grow": {
      "description": "The Grow transition is used by the [Tooltip](/components/tooltips/) and\n[Popover](/components/popover/) components.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, show the component; triggers the enter or exit animation.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Grow",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Grow/Grow.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/popover",
        "/components/transitions"
      ]
    },
    "Hidden": {
      "description": "Responsively hides children based on the selected implementation.",
      "displayName": "Hidden",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "implementation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'js'",
                "computed": false
              },
              {
                "value": "'css'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Specify which implementation to use.  'js' is the default, 'css' works better for\nserver-side rendering.",
          "defaultValue": {
            "value": "'js'",
            "computed": false
          },
          "tags": []
        },
        "initialWidth": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'xs'",
                "computed": false
              },
              {
                "value": "'sm'",
                "computed": false
              },
              {
                "value": "'md'",
                "computed": false
              },
              {
                "value": "'lg'",
                "computed": false
              },
              {
                "value": "'xl'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "You can use this prop when choosing the `js` implementation with server-side rendering.\n\nAs `window.innerWidth` is unavailable on the server,\nwe default to rendering an empty component during the first mount.\nYou might want to use an heuristic to approximate\nthe screen width of the client browser screen width.\n\nFor instance, you could be using the user-agent or the client-hints.\nhttps://caniuse.com/#search=client%20hint",
          "tags": []
        },
        "lgDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "lgUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "mdDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "mdUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "only": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'xs'",
                    "computed": false
                  },
                  {
                    "value": "'sm'",
                    "computed": false
                  },
                  {
                    "value": "'md'",
                    "computed": false
                  },
                  {
                    "value": "'lg'",
                    "computed": false
                  },
                  {
                    "value": "'xl'",
                    "computed": false
                  }
                ]
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'xs'",
                      "computed": false
                    },
                    {
                      "value": "'sm'",
                      "computed": false
                    },
                    {
                      "value": "'md'",
                      "computed": false
                    },
                    {
                      "value": "'lg'",
                      "computed": false
                    },
                    {
                      "value": "'xl'",
                      "computed": false
                    }
                  ]
                }
              }
            ]
          },
          "required": false,
          "description": "Hide the given breakpoint(s).",
          "tags": []
        },
        "smDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "smUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xlDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xlUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xsDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xsUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Hidden",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "filename": "/packages/material-ui/src/Hidden/Hidden.js",
      "inheritance": null,
      "usedInPages": [
        "/components/hidden"
      ]
    },
    "Icon": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The name of the icon font ligature.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'action'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'disabled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "fontSize": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Icon",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "colorAction",
          "colorError",
          "colorDisabled",
          "fontSizeInherit",
          "fontSizeSmall",
          "fontSizeLarge"
        ],
        "name": "MuiIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorAction": "Styles applied to the root element if `color=\"action\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
          "fontSizeInherit": "Styles applied to the root element if `fontSize=\"inherit\"`.",
          "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
          "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiIcon-root",
          "colorPrimary": "MuiIcon-colorPrimary",
          "colorSecondary": "MuiIcon-colorSecondary",
          "colorAction": "MuiIcon-colorAction",
          "colorError": "MuiIcon-colorError",
          "colorDisabled": "MuiIcon-colorDisabled",
          "fontSizeInherit": "MuiIcon-fontSizeInherit",
          "fontSizeSmall": "MuiIcon-fontSizeSmall",
          "fontSizeLarge": "MuiIcon-fontSizeLarge"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Icon/Icon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/icons",
        "/components/material-icons"
      ]
    },
    "IconButton": {
      "description": "Refer to the [Icons](/components/icons/) section of the documentation\nregarding the available icon options.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.node, props => {\n  const found = React.Children.toArray(props.children).some(\n    child => React.isValidElement(child) && child.props.onClick,\n  );\n\n  if (found) {\n    return new Error(\n      [\n        'Material-UI: you are providing an onClick event listener ' +\n          'to a child of a button element.',\n        'Firefox will never trigger the event.',\n        'You should move the onClick listener to the parent button element.',\n        'https://github.com/mui-org/material-ui/issues/13957',\n      ].join('\\n'),\n    );\n  }\n\n  return null;\n})",
            "chained": {
              "name": "node"
            }
          },
          "required": false,
          "description": "The icon element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "edge": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'end'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "IconButton",
      "styles": {
        "classes": [
          "root",
          "edgeStart",
          "edgeEnd",
          "colorInherit",
          "colorPrimary",
          "colorSecondary",
          "disabled",
          "sizeSmall",
          "label"
        ],
        "name": "MuiIconButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
          "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "label": "Styles applied to the children container element."
        },
        "globalClasses": {
          "root": "MuiIconButton-root",
          "edgeStart": "MuiIconButton-edgeStart",
          "edgeEnd": "MuiIconButton-edgeEnd",
          "colorInherit": "MuiIconButton-colorInherit",
          "colorPrimary": "MuiIconButton-colorPrimary",
          "colorSecondary": "MuiIconButton-colorSecondary",
          "disabled": "Mui-disabled",
          "sizeSmall": "MuiIconButton-sizeSmall",
          "label": "MuiIconButton-label"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/IconButton/IconButton.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/buttons",
        "/components/grid-list"
      ]
    },
    "Input": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "disableUnderline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will not have an underline.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "Input",
      "styles": {
        "classes": [
          "root",
          "formControl",
          "focused",
          "disabled",
          "colorSecondary",
          "underline",
          "error",
          "marginDense",
          "multiline",
          "fullWidth",
          "input",
          "inputMarginDense",
          "inputMultiline",
          "inputTypeSearch"
        ],
        "name": "MuiInput",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
          "focused": "Styles applied to the root element if the component is focused.",
          "disabled": "Styles applied to the root element if `disabled={true}`.",
          "colorSecondary": "Styles applied to the root element if color secondary.",
          "underline": "Styles applied to the root element if `disableUnderline={false}`.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`."
        },
        "globalClasses": {
          "root": "MuiInput-root",
          "formControl": "MuiInput-formControl",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "colorSecondary": "MuiInput-colorSecondary",
          "underline": "MuiInput-underline",
          "error": "Mui-error",
          "marginDense": "MuiInput-marginDense",
          "multiline": "MuiInput-multiline",
          "fullWidth": "MuiInput-fullWidth",
          "input": "MuiInput-input",
          "inputMarginDense": "MuiInput-inputMarginDense",
          "inputMultiline": "MuiInput-inputMultiline",
          "inputTypeSearch": "MuiInput-inputTypeSearch"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Input/Input.js",
      "inheritance": {
        "component": "InputBase",
        "pathname": "/api/input-base"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "InputAdornment": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the component, normally an `IconButton` or string.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disablePointerEvents": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable pointer events on the root.\nThis allows for the content of the adornment to focus the input on click.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If children is a string then disable wrapping in a Typography component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "position": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'end'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The position this adornment should appear relative to the `Input`.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.\nNote: If you are using the `TextField` component or the `FormControl` component\nyou do not have to set this manually.",
          "tags": []
        }
      },
      "name": "InputAdornment",
      "styles": {
        "classes": [
          "root",
          "filled",
          "positionStart",
          "positionEnd",
          "disablePointerEvents",
          "hiddenLabel",
          "marginDense"
        ],
        "name": "MuiInputAdornment",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "filled": "Styles applied to the root element if `variant=\"filled\"`.",
          "positionStart": "Styles applied to the root element if `position=\"start\"`.",
          "positionEnd": "Styles applied to the root element if `position=\"end\"`.",
          "disablePointerEvents": "Styles applied to the root element if `disablePointerEvents=true`.",
          "hiddenLabel": "Styles applied if the adornment is used inside <FormControl hiddenLabel />.",
          "marginDense": "Styles applied if the adornment is used inside <FormControl margin=\"dense\" />."
        },
        "globalClasses": {
          "root": "MuiInputAdornment-root",
          "filled": "MuiInputAdornment-filled",
          "positionStart": "MuiInputAdornment-positionStart",
          "positionEnd": "MuiInputAdornment-positionEnd",
          "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
          "hiddenLabel": "MuiInputAdornment-hiddenLabel",
          "marginDense": "MuiInputAdornment-marginDense"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/InputAdornment/InputAdornment.js",
      "inheritance": null,
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "InputBase": {
      "description": "`InputBase` contains as few styles as possible.\nIt aims to be a simple building block for creating an input.\nIt contains a load of style reset and some state logic.",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the `input` element.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the input is blurred.\n\nNotice that the first argument (event) might be undefined.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMin": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Minimum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "InputBase",
      "styles": {
        "classes": [
          "@global",
          "root",
          "formControl",
          "focused",
          "disabled",
          "adornedStart",
          "adornedEnd",
          "error",
          "marginDense",
          "multiline",
          "colorSecondary",
          "fullWidth",
          "input",
          "inputMarginDense",
          "inputMultiline",
          "inputTypeSearch",
          "inputAdornedStart",
          "inputAdornedEnd",
          "inputHiddenLabel"
        ],
        "name": "MuiInputBase",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
          "focused": "Styles applied to the root element if the component is focused.",
          "disabled": "Styles applied to the root element if `disabled={true}`.",
          "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
          "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "colorSecondary": "Styles applied to the root element if the color is secondary.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`.",
          "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
          "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided.",
          "inputHiddenLabel": "Styles applied to the `input` element if `hiddenLabel={true}`."
        },
        "globalClasses": {
          "@global": "MuiInputBase-@global",
          "root": "MuiInputBase-root",
          "formControl": "MuiInputBase-formControl",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "adornedStart": "MuiInputBase-adornedStart",
          "adornedEnd": "MuiInputBase-adornedEnd",
          "error": "Mui-error",
          "marginDense": "MuiInputBase-marginDense",
          "multiline": "MuiInputBase-multiline",
          "colorSecondary": "MuiInputBase-colorSecondary",
          "fullWidth": "MuiInputBase-fullWidth",
          "input": "MuiInputBase-input",
          "inputMarginDense": "MuiInputBase-inputMarginDense",
          "inputMultiline": "MuiInputBase-inputMultiline",
          "inputTypeSearch": "MuiInputBase-inputTypeSearch",
          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/InputBase/InputBase.js",
      "inheritance": null,
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "InputLabel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The contents of the `InputLabel`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "disableAnimation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the transition animation is disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, apply disabled class.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will be displayed in an error state.",
          "tags": []
        },
        "focused": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input of this label is focused.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "if `true`, the label will indicate that the input is required.",
          "tags": []
        },
        "shrink": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label is shrunk.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "tags": []
        }
      },
      "name": "InputLabel",
      "styles": {
        "classes": [
          "root",
          "focused",
          "disabled",
          "error",
          "required",
          "asterisk",
          "formControl",
          "marginDense",
          "shrink",
          "animated",
          "filled",
          "outlined"
        ],
        "name": "MuiInputLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "required": "Pseudo-class applied to the root element if `required={true}`.",
          "asterisk": "Pseudo-class applied to the asterisk element.",
          "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
          "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
          "shrink": "Styles applied to the `input` element if `shrink={true}`.",
          "animated": "Styles applied to the `input` element if `disableAnimation={false}`.",
          "filled": "Styles applied to the root element if `variant=\"filled\"`.",
          "outlined": "Styles applied to the root element if `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiInputLabel-root",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "required": "Mui-required",
          "asterisk": "MuiInputLabel-asterisk",
          "formControl": "MuiInputLabel-formControl",
          "marginDense": "MuiInputLabel-marginDense",
          "shrink": "MuiInputLabel-shrink",
          "animated": "MuiInputLabel-animated",
          "filled": "MuiInputLabel-filled",
          "outlined": "MuiInputLabel-outlined"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLabelElement",
      "filename": "/packages/material-ui/src/InputLabel/InputLabel.js",
      "inheritance": {
        "component": "FormLabel",
        "pathname": "/api/form-label"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "LinearProgress": {
      "description": "## ARIA\n\nIf the progress bar is describing the loading progress of a particular region of a page,\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\nattribute to `true` on that region until it has finished loading.",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The value of the progress indicator for the determinate and buffer variants.\nValue between 0 and 100.",
          "tags": []
        },
        "valueBuffer": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The value for the buffer variant.\nValue between 0 and 100.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'determinate'",
                "computed": false
              },
              {
                "value": "'indeterminate'",
                "computed": false
              },
              {
                "value": "'buffer'",
                "computed": false
              },
              {
                "value": "'query'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.\nUse indeterminate or query when there is no progress value.",
          "defaultValue": {
            "value": "'indeterminate'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "LinearProgress",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "determinate",
          "indeterminate",
          "buffer",
          "query",
          "dashed",
          "dashedColorPrimary",
          "dashedColorSecondary",
          "bar",
          "barColorPrimary",
          "barColorSecondary",
          "bar1Indeterminate",
          "bar1Determinate",
          "bar1Buffer",
          "bar2Indeterminate",
          "bar2Buffer"
        ],
        "name": "MuiLinearProgress",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root and bar2 element if `color=\"primary\"`; bar2 if `variant=\"buffer\"`.",
          "colorSecondary": "Styles applied to the root and bar2 elements if `color=\"secondary\"`; bar2 if `variant=\"buffer\"`.",
          "determinate": "Styles applied to the root element if `variant=\"determinate\"`.",
          "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
          "buffer": "Styles applied to the root element if `variant=\"buffer\"`.",
          "query": "Styles applied to the root element if `variant=\"query\"`.",
          "dashed": "Styles applied to the additional bar element if `variant=\"buffer\"`.",
          "dashedColorPrimary": "Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"primary\"`.",
          "dashedColorSecondary": "Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"secondary\"`.",
          "bar": "Styles applied to the layered bar1 and bar2 elements.",
          "barColorPrimary": "Styles applied to the bar elements if `color=\"primary\"`; bar2 if `variant` not \"buffer\".",
          "barColorSecondary": "Styles applied to the bar elements if `color=\"secondary\"`; bar2 if `variant` not \"buffer\".",
          "bar1Indeterminate": "Styles applied to the bar1 element if `variant=\"indeterminate or query\"`.",
          "bar1Determinate": "Styles applied to the bar1 element if `variant=\"determinate\"`.",
          "bar1Buffer": "Styles applied to the bar1 element if `variant=\"buffer\"`.",
          "bar2Indeterminate": "Styles applied to the bar2 element if `variant=\"indeterminate or query\"`.",
          "bar2Buffer": "Styles applied to the bar2 element if `variant=\"buffer\"`."
        },
        "globalClasses": {
          "root": "MuiLinearProgress-root",
          "colorPrimary": "MuiLinearProgress-colorPrimary",
          "colorSecondary": "MuiLinearProgress-colorSecondary",
          "determinate": "MuiLinearProgress-determinate",
          "indeterminate": "MuiLinearProgress-indeterminate",
          "buffer": "MuiLinearProgress-buffer",
          "query": "MuiLinearProgress-query",
          "dashed": "MuiLinearProgress-dashed",
          "dashedColorPrimary": "MuiLinearProgress-dashedColorPrimary",
          "dashedColorSecondary": "MuiLinearProgress-dashedColorSecondary",
          "bar": "MuiLinearProgress-bar",
          "barColorPrimary": "MuiLinearProgress-barColorPrimary",
          "barColorSecondary": "MuiLinearProgress-barColorSecondary",
          "bar1Indeterminate": "MuiLinearProgress-bar1Indeterminate",
          "bar1Determinate": "MuiLinearProgress-bar1Determinate",
          "bar1Buffer": "MuiLinearProgress-bar1Buffer",
          "bar2Indeterminate": "MuiLinearProgress-bar2Indeterminate",
          "bar2Buffer": "MuiLinearProgress-bar2Buffer"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/LinearProgress/LinearProgress.js",
      "inheritance": null,
      "usedInPages": [
        "/components/progress"
      ]
    },
    "Link": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the link.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'textPrimary'",
                "computed": false
              },
              {
                "value": "'textSecondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the link.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "custom",
            "raw": "elementTypeAcceptingRef"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'a'",
            "computed": false
          },
          "tags": []
        },
        "TypographyClasses": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "`classes` prop applied to the [`Typography`](/api/typography/) element.",
          "tags": []
        },
        "underline": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'none'",
                "computed": false
              },
              {
                "value": "'hover'",
                "computed": false
              },
              {
                "value": "'always'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Controls when the link should have an underline.",
          "defaultValue": {
            "value": "'hover'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Applies the theme typography styles.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Link",
      "styles": {
        "classes": [
          "root",
          "underlineNone",
          "underlineHover",
          "underlineAlways",
          "button",
          "focusVisible"
        ],
        "name": "MuiLink",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "underlineNone": "Styles applied to the root element if `underline=\"none\"`.",
          "underlineHover": "Styles applied to the root element if `underline=\"hover\"`.",
          "underlineAlways": "Styles applied to the root element if `underline=\"always\"`.",
          "button": "Styles applied to the root element if `component=\"button\"`.",
          "focusVisible": "Pseudo-class applied to the root element if the link is keyboard focused."
        },
        "globalClasses": {
          "root": "MuiLink-root",
          "underlineNone": "MuiLink-underlineNone",
          "underlineHover": "MuiLink-underlineHover",
          "underlineAlways": "MuiLink-underlineAlways",
          "button": "MuiLink-button",
          "focusVisible": "Mui-focusVisible"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLAnchorElement",
      "filename": "/packages/material-ui/src/Link/Link.js",
      "inheritance": {
        "component": "Typography",
        "pathname": "/api/typography"
      },
      "usedInPages": [
        "/components/breadcrumbs",
        "/components/links"
      ]
    },
    "List": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'ul'",
            "computed": false
          },
          "tags": []
        },
        "dense": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used for\nthe list and list items.\nThe prop is available to descendant components as the `dense` context.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disablePadding": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, vertical padding will be removed from the list.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "subheader": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the subheader, normally `ListSubheader`.",
          "tags": []
        }
      },
      "name": "List",
      "styles": {
        "classes": [
          "root",
          "padding",
          "dense",
          "subheader"
        ],
        "name": "MuiList",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "padding": "Styles applied to the root element if `disablePadding={false}`.",
          "dense": "Styles applied to the root element if dense.",
          "subheader": "Styles applied to the root element if a `subheader` is provided."
        },
        "globalClasses": {
          "root": "MuiList-root",
          "padding": "MuiList-padding",
          "dense": "MuiList-dense",
          "subheader": "MuiList-subheader"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui/src/List/List.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists",
        "/components/transfer-list"
      ]
    },
    "ListItem": {
      "description": "Uses an additional container component if `ListItemSecondaryAction` is the last child.",
      "methods": [],
      "props": {
        "alignItems": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `align-items` style property.",
          "defaultValue": {
            "value": "'center'",
            "computed": false
          },
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list item will be focused during the first mount.\nFocus will also be triggered if the value changes from false to true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "button": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list item will be a button (using `ButtonBase`). Props intended\nfor `ButtonBase` can then be applied to `ListItem`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.node, props => {\n  const children = React.Children.toArray(props.children);\n\n  // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n  let secondaryActionIndex = -1;\n  for (let i = children.length - 1; i >= 0; i -= 1) {\n    const child = children[i];\n    if (isMuiElement(child, ['ListItemSecondaryAction'])) {\n      secondaryActionIndex = i;\n      break;\n    }\n  }\n\n  //  is ListItemSecondaryAction the last child of ListItem\n  if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n    return new Error(\n      'Material-UI: you used an element after ListItemSecondaryAction. ' +\n        'For ListItem to detect that it has a secondary action ' +\n        'you must pass it as the last child to ListItem.',\n    );\n  }\n\n  return null;\n})",
            "chained": {
              "name": "node"
            }
          },
          "required": false,
          "description": "The content of the component. If a `ListItemSecondaryAction` is used it must\nbe the last child.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.",
          "tags": []
        },
        "ContainerComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The container component used when a `ListItemSecondaryAction` is the last child.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "ContainerProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the container component if used.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "dense": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list item will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the left and right padding is removed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "divider": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a 1px light border is added to the bottom of the list item.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use to apply selected styling.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ListItem",
      "styles": {
        "classes": [
          "root",
          "container",
          "focusVisible",
          "dense",
          "alignItemsFlexStart",
          "disabled",
          "divider",
          "gutters",
          "button",
          "secondaryAction",
          "selected"
        ],
        "name": "MuiListItem",
        "descriptions": {
          "root": "Styles applied to the (normally root) `component` element. May be wrapped by a `container`.",
          "container": "Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`.",
          "focusVisible": "Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`.",
          "dense": "Styles applied to the `component` element if dense.",
          "alignItemsFlexStart": "Styles applied to the `component` element if `alignItems=\"flex-start\"`.",
          "disabled": "Pseudo-class applied to the inner `component` element if `disabled={true}`.",
          "divider": "Styles applied to the inner `component` element if `divider={true}`.",
          "gutters": "Styles applied to the inner `component` element if `disableGutters={false}`.",
          "button": "Styles applied to the inner `component` element if `button={true}`.",
          "secondaryAction": "Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`.",
          "selected": "Pseudo-class applied to the root element if `selected={true}`."
        },
        "globalClasses": {
          "root": "MuiListItem-root",
          "container": "MuiListItem-container",
          "focusVisible": "Mui-focusVisible",
          "dense": "MuiListItem-dense",
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "gutters": "MuiListItem-gutters",
          "button": "MuiListItem-button",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/ListItem/ListItem.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists",
        "/components/transfer-list"
      ]
    },
    "ListItemAvatar": {
      "description": "A simple wrapper to apply `List` styles to an `Avatar`.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": true,
          "description": "The content of the component – normally `Avatar`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ListItemAvatar",
      "styles": {
        "classes": [
          "root",
          "alignItemsFlexStart"
        ],
        "name": "MuiListItemAvatar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
        },
        "globalClasses": {
          "root": "MuiListItemAvatar-root",
          "alignItemsFlexStart": "MuiListItemAvatar-alignItemsFlexStart"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemAvatar/ListItemAvatar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListItemIcon": {
      "description": "A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": true,
          "description": "The content of the component, normally `Icon`, `SvgIcon`,\nor a `@material-ui/icons` SVG icon element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ListItemIcon",
      "styles": {
        "classes": [
          "root",
          "alignItemsFlexStart"
        ],
        "name": "MuiListItemIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
        },
        "globalClasses": {
          "root": "MuiListItemIcon-root",
          "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemIcon/ListItemIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListItemSecondaryAction": {
      "description": "Must be used as the last child of ListItem to function properly.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally an `IconButton` or selection control.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ListItemSecondaryAction",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiListItemSecondaryAction",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiListItemSecondaryAction-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemSecondaryAction/ListItemSecondaryAction.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListItemText": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Alias for the `primary` property.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "inset": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the children will be indented.\nThis should be used if there is no left avatar or left icon.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "primary": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The main content element.",
          "tags": []
        },
        "primaryTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`).",
          "tags": []
        },
        "secondary": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The secondary content element.",
          "tags": []
        },
        "secondaryTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`).",
          "tags": []
        }
      },
      "name": "ListItemText",
      "styles": {
        "classes": [
          "root",
          "multiline",
          "dense",
          "inset",
          "primary",
          "secondary"
        ],
        "name": "MuiListItemText",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "multiline": "Styles applied to the `Typography` components if primary and secondary are set.",
          "dense": "Styles applied to the `Typography` components if dense.",
          "inset": "Styles applied to the root element if `inset={true}`.",
          "primary": "Styles applied to the primary `Typography` component.",
          "secondary": "Styles applied to the secondary `Typography` component."
        },
        "globalClasses": {
          "root": "MuiListItemText-root",
          "multiline": "MuiListItemText-multiline",
          "dense": "MuiListItemText-dense",
          "inset": "MuiListItemText-inset",
          "primary": "MuiListItemText-primary",
          "secondary": "MuiListItemText-secondary"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemText/ListItemText.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListSubheader": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the List Subheader will not have gutters.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableSticky": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the List Subheader will not stick to the top during scroll.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "inset": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the List Subheader will be indented.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ListSubheader",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorInherit",
          "gutters",
          "inset",
          "sticky"
        ],
        "name": "MuiListSubheader",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "gutters": "Styles applied to the inner `component` element if `disableGutters={false}`.",
          "inset": "Styles applied to the root element if `inset={true}`.",
          "sticky": "Styles applied to the root element if `disableSticky={false}`."
        },
        "globalClasses": {
          "root": "MuiListSubheader-root",
          "colorPrimary": "MuiListSubheader-colorPrimary",
          "colorInherit": "MuiListSubheader-colorInherit",
          "gutters": "MuiListSubheader-gutters",
          "inset": "MuiListSubheader-inset",
          "sticky": "MuiListSubheader-sticky"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/ListSubheader/ListSubheader.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list",
        "/components/lists"
      ]
    },
    "Menu": {
      "description": "",
      "methods": [],
      "props": {
        "anchorEl": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "The DOM element used to set the position of the menu.",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\nchildren are not focusable. If you set this prop to `false` focus will be placed\non the parent modal container. This has severe accessibility implications\nand should only be considered if you manage focus otherwise.",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Menu contents, normally `MenuItem`s.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableAutoFocusItem": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "When opening the menu will not focus the active item but the `[role=\"menu\"]`\nunless `autoFocus` is also set to `false`. Not using the default means not\nfollowing WAI-ARIA authoring practices. Please be considerate about possible\naccessibility implications.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "MenuListProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`MenuList`](/api/menu-list/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the Menu enters.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu is entering.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the Menu exits.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the menu is visible.",
          "tags": []
        },
        "PopoverClasses": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "`classes` prop applied to the [`Popover`](/api/popover/) element.",
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "The length of the transition in `ms`, or 'auto'",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'menu'",
                "computed": false
              },
              {
                "value": "'selectedMenu'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\nand the vertical alignment relative to the anchor element.",
          "defaultValue": {
            "value": "'selectedMenu'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Menu",
      "styles": {
        "classes": [
          "paper",
          "list"
        ],
        "name": "MuiMenu",
        "descriptions": {
          "paper": "Styles applied to the `Paper` component.",
          "list": "Styles applied to the `List` component via `MenuList`."
        },
        "globalClasses": {
          "paper": "MuiMenu-paper",
          "list": "MuiMenu-list"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Menu/Menu.js",
      "inheritance": {
        "component": "Popover",
        "pathname": "/api/popover"
      },
      "usedInPages": [
        "/components/app-bar",
        "/components/menus"
      ]
    },
    "MenuItem": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Menu item contents.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "dense": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used.",
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the left and right padding is removed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "MenuItem",
      "styles": {
        "classes": [
          "root",
          "gutters",
          "selected",
          "dense"
        ],
        "name": "MuiMenuItem",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "gutters": "Styles applied to the root element if `disableGutters={false}`.",
          "selected": "Styles applied to the root element if `selected={true}`.",
          "dense": "Styles applied to the root element if dense."
        },
        "globalClasses": {
          "root": "MuiMenuItem-root",
          "gutters": "MuiMenuItem-gutters",
          "selected": "Mui-selected",
          "dense": "MuiMenuItem-dense"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/MenuItem/MenuItem.js",
      "inheritance": {
        "component": "ListItem",
        "pathname": "/api/list-item"
      },
      "usedInPages": [
        "/components/menus"
      ]
    },
    "MenuList": {
      "description": "A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton\nIt's exposed to help customization of the [`Menu`](/api/menu/) component. If you\nuse it separately you need to move focus into the component manually. Once\nthe focus is placed inside the component it is fully keyboard accessible.",
      "methods": [],
      "props": {
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, will focus the `[role=\"menu\"]` container and move into tab order",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "autoFocusItem": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\nif `variant=\"selectedMenu\"`",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "MenuList contents, normally `MenuItem`s.",
          "tags": []
        },
        "disableListWrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the menu items will not wrap focus.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'menu'",
                "computed": false
              },
              {
                "value": "'selectedMenu'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\nand the vertical alignment relative to the anchor element.",
          "defaultValue": {
            "value": "'selectedMenu'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "MenuList",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui/src/MenuList/MenuList.js",
      "inheritance": {
        "component": "List",
        "pathname": "/api/list"
      },
      "usedInPages": [
        "/components/menus"
      ]
    },
    "MobileStepper": {
      "description": "",
      "methods": [],
      "props": {
        "activeStep": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Set the active step (zero based index).\nDefines which dot is highlighted when the variant is 'dots'.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "backButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "A back button element. For instance, it can be a `Button` or an `IconButton`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "LinearProgressProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `LinearProgress` element.",
          "tags": []
        },
        "nextButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "A next button element. For instance, it can be a `Button` or an `IconButton`.",
          "tags": []
        },
        "position": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'static'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set the positioning type.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        },
        "steps": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The total steps.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'dots'",
                "computed": false
              },
              {
                "value": "'progress'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'dots'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "MobileStepper",
      "styles": {
        "classes": [
          "root",
          "positionBottom",
          "positionTop",
          "positionStatic",
          "dots",
          "dot",
          "dotActive",
          "progress"
        ],
        "name": "MuiMobileStepper",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "positionBottom": "Styles applied to the root element if `position=\"bottom\"`.",
          "positionTop": "Styles applied to the root element if `position=\"top\"`.",
          "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
          "dots": "Styles applied to the dots container if `variant=\"dots\"`.",
          "dot": "Styles applied to each dot if `variant=\"dots\"`.",
          "dotActive": "Styles applied to a dot if `variant=\"dots\"` and this is the active step.",
          "progress": "Styles applied to the Linear Progress component if `variant=\"progress\"`."
        },
        "globalClasses": {
          "root": "MuiMobileStepper-root",
          "positionBottom": "MuiMobileStepper-positionBottom",
          "positionTop": "MuiMobileStepper-positionTop",
          "positionStatic": "MuiMobileStepper-positionStatic",
          "dots": "MuiMobileStepper-dots",
          "dot": "MuiMobileStepper-dot",
          "dotActive": "MuiMobileStepper-dotActive",
          "progress": "MuiMobileStepper-progress"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/MobileStepper/MobileStepper.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "Modal": {
      "description": "Modal is a lower-level construct that is leveraged by the following components:\n\n- [Dialog](/api/dialog/)\n- [Drawer](/api/drawer/)\n- [Menu](/api/menu/)\n- [Popover](/api/popover/)\n\nIf you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\nrather than directly using Modal.\n\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).",
      "methods": [],
      "props": {
        "BackdropComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "A backdrop component. This prop enables custom backdrop rendering.",
          "defaultValue": {
            "value": "SimpleBackdrop",
            "computed": true
          },
          "tags": []
        },
        "BackdropProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Backdrop`](/api/backdrop/) element.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef.isRequired"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "closeAfterTransition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "When set to true the Modal waits until a nested Transition is completed before closing.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will have the portal children appended to it.",
          "tags": []
        },
        "disableAutoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableBackdropClick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, clicking the backdrop will not fire any callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableEnforceFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the modal will not prevent focus from leaving the modal while open.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableEscapeKeyDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hitting escape will not fire any callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disablePortal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRestoreFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the modal will not restore focus to previously focused element once\nmodal is hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableScrollLock": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the scroll lock behavior.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "hideBackdrop": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the backdrop is not rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "keepMounted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Modal.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onBackdropClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the backdrop is clicked.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEscapeKeyDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the escape key is pressed,\n`disableEscapeKeyDown` is false and the modal is in focus.",
          "tags": []
        },
        "onRendered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired once the children has been mounted into the `container`.\nIt signals that the `open={true}` prop took effect.\n\nThis prop will be deprecated and removed in v5, the ref can be used instead.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the modal is open.",
          "tags": []
        }
      },
      "name": "Modal",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Modal/Modal.js",
      "inheritance": null,
      "usedInPages": [
        "/components/modal"
      ]
    },
    "NativeSelect": {
      "description": "An alternative to `<Select native />` with a much smaller bundle size footprint.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The option elements to populate the select with.\nCan be some `<option>` elements.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "IconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The icon that displays the arrow.",
          "defaultValue": {
            "value": "ArrowDropDownIcon",
            "computed": true
          },
          "tags": []
        },
        "input": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
          "defaultValue": {
            "value": "<Input />",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Attributes applied to the `select` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function fired when a menu item is selected.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The input value. The DOM API casts this to a string.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "tags": []
        }
      },
      "name": "NativeSelect",
      "styles": {
        "classes": [
          "root",
          "select",
          "filled",
          "outlined",
          "selectMenu",
          "disabled",
          "icon",
          "iconOpen",
          "iconFilled",
          "iconOutlined"
        ],
        "name": "MuiNativeSelect",
        "descriptions": {
          "root": "Styles applied to the select component `root` class.",
          "select": "Styles applied to the select component `select` class.",
          "filled": "Styles applied to the select component if `variant=\"filled\"`.",
          "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
          "selectMenu": "Styles applied to the select component `selectMenu` class.",
          "disabled": "Pseudo-class applied to the select component `disabled` class.",
          "icon": "Styles applied to the icon component.",
          "iconOpen": "Styles applied to the icon component if the popup is open.",
          "iconFilled": "Styles applied to the icon component if `variant=\"filled\"`.",
          "iconOutlined": "Styles applied to the icon component if `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiNativeSelect-root",
          "select": "MuiNativeSelect-select",
          "filled": "MuiNativeSelect-filled",
          "outlined": "MuiNativeSelect-outlined",
          "selectMenu": "MuiNativeSelect-selectMenu",
          "disabled": "Mui-disabled",
          "icon": "MuiNativeSelect-icon",
          "iconOpen": "MuiNativeSelect-iconOpen",
          "iconFilled": "MuiNativeSelect-iconFilled",
          "iconOutlined": "MuiNativeSelect-iconOutlined"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/NativeSelect/NativeSelect.js",
      "inheritance": {
        "component": "Input",
        "pathname": "/api/input"
      },
      "usedInPages": [
        "/components/selects"
      ]
    },
    "NoSsr": {
      "description": "NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n\nThis component can be useful in a variety of situations:\n- Escape hatch for broken dependencies not supporting SSR.\n- Improve the time-to-first paint on the client by only rendering above the fold.\n- Reduce the rendering time on the server.\n- Under too heavy server load, you can turn on service degradation.",
      "displayName": "NoSsr",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "You can wrap a node.",
          "tags": []
        },
        "defer": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will not only prevent server-side rendering.\nIt will also defer the rendering of the children into a different screen frame.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fallback": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The fallback content to display.",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "NoSsr",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": false,
      "filename": "/packages/material-ui/src/NoSsr/NoSsr.js",
      "inheritance": null,
      "usedInPages": [
        "/components/no-ssr"
      ]
    },
    "OutlinedInput": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label of the input. It is only used for layout. The actual labelling\nis handled by `InputLabel`. If specified `labelWidth` is ignored.",
          "tags": []
        },
        "labelWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The width of the label. Is ignored if `label` is provided. Prefer `label`\nif the input label appears with a strike through.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "notched": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the outline is notched to accommodate the label.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "OutlinedInput",
      "styles": {
        "classes": [
          "root",
          "colorSecondary",
          "focused",
          "disabled",
          "adornedStart",
          "adornedEnd",
          "error",
          "marginDense",
          "multiline",
          "notchedOutline",
          "input",
          "inputMarginDense",
          "inputMultiline",
          "inputAdornedStart",
          "inputAdornedEnd"
        ],
        "name": "MuiOutlinedInput",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorSecondary": "Styles applied to the root element if the color is secondary.",
          "focused": "Styles applied to the root element if the component is focused.",
          "disabled": "Styles applied to the root element if `disabled={true}`.",
          "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
          "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "notchedOutline": "Styles applied to the `NotchedOutline` element.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
          "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
        },
        "globalClasses": {
          "root": "MuiOutlinedInput-root",
          "colorSecondary": "MuiOutlinedInput-colorSecondary",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "adornedStart": "MuiOutlinedInput-adornedStart",
          "adornedEnd": "MuiOutlinedInput-adornedEnd",
          "error": "Mui-error",
          "marginDense": "MuiOutlinedInput-marginDense",
          "multiline": "MuiOutlinedInput-multiline",
          "notchedOutline": "MuiOutlinedInput-notchedOutline",
          "input": "MuiOutlinedInput-input",
          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
          "inputMultiline": "MuiOutlinedInput-inputMultiline",
          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/OutlinedInput/OutlinedInput.js",
      "inheritance": {
        "component": "InputBase",
        "pathname": "/api/input-base"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "Pagination": {
      "description": "",
      "methods": [],
      "props": {
        "boundaryCount": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Number of always visible pages at the beginning and end.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Pagination items.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The active color.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        },
        "count": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The total number of pages.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "defaultPage": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The page selected by default when the component is uncontrolled.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, all the pagination component will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "getItemAriaLabel": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a function which returns a string value that provides a user-friendly name for the current page.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "function defaultGetAriaLabel(type, page, selected) {\n  if (type === 'page') {\n    return `${selected ? '' : 'Go to '}page ${page}`;\n  }\n  return `Go to ${type} page`;\n}",
            "computed": false
          },
          "tags": [
            {
              "title": "param",
              "description": "The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous').",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "type",
              "default": "page"
            },
            {
              "title": "param",
              "description": "The page number to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "page"
            },
            {
              "title": "param",
              "description": "If true, the current page is selected.",
              "type": {
                "type": "NameExpression",
                "name": "bool"
              },
              "name": "selected"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "hideNextButton": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hide the next-page button.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "hidePrevButton": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hide the previous-page button.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the page is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The page selected.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "page"
            }
          ]
        },
        "page": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The current page.",
          "tags": []
        },
        "renderItem": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the item.",
          "defaultValue": {
            "value": "item => <PaginationItem {...item} />",
            "computed": false
          },
          "tags": [
            {
              "title": "param",
              "description": "The props to spread on a PaginationItem.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "params"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'round'",
                "computed": false
              },
              {
                "value": "'rounded'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The shape of the pagination items.",
          "defaultValue": {
            "value": "'round'",
            "computed": false
          },
          "tags": []
        },
        "showFirstButton": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, show the first-page button.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "showLastButton": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, show the last-page button.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "siblingCount": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Number of always visible pages before and after the current page.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the pagination component.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Pagination",
      "styles": {
        "classes": [
          "root",
          "ul"
        ],
        "name": "MuiPagination",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "ul": "Styles applied to the ul element.",
          "const": "eslint-enable no-unused-vars"
        },
        "globalClasses": {
          "root": "MuiPagination-root",
          "ul": "MuiPagination-ul"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLElement",
      "filename": "/packages/material-ui-lab/src/Pagination/Pagination.js",
      "inheritance": null,
      "usedInPages": [
        "/components/pagination"
      ]
    },
    "PaginationItem": {
      "description": "",
      "methods": [],
      "props": {
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The active color.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the item will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "page": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The current page number.",
          "tags": []
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true` the pagination item is selected.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'round'",
                "computed": false
              },
              {
                "value": "'rounded'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The shape of the pagination item.",
          "defaultValue": {
            "value": "'round'",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the pagination item.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'page'",
                "computed": false
              },
              {
                "value": "'first'",
                "computed": false
              },
              {
                "value": "'last'",
                "computed": false
              },
              {
                "value": "'next'",
                "computed": false
              },
              {
                "value": "'previous'",
                "computed": false
              },
              {
                "value": "'start-ellipsis'",
                "computed": false
              },
              {
                "value": "'end-ellipsis'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The type of pagination item.",
          "defaultValue": {
            "value": "'page'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The pagination item variant.",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "PaginationItem",
      "styles": {
        "classes": [
          "root",
          "page",
          "sizeSmall",
          "sizeLarge",
          "textPrimary",
          "textSecondary",
          "outlined",
          "outlinedPrimary",
          "outlinedSecondary",
          "rounded",
          "ellipsis",
          "focusVisible",
          "disabled",
          "selected",
          "icon"
        ],
        "name": "MuiPaginationItem",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "page": "Styles applied to the root element if `type=\"page\"`.",
          "sizeSmall": "Styles applied applied to the root element if `size=\"small\"`.",
          "sizeLarge": "Styles applied applied to the root element if `size=\"large\"`.",
          "textPrimary": "Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.",
          "textSecondary": "Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.",
          "outlined": "Styles applied to the root element if `outlined=\"true\"`.",
          "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
          "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
          "rounded": "Styles applied to the root element if `rounded=\"true\"`.",
          "ellipsis": "Styles applied to the root element if `type=\"start-ellipsis\"` or `type=\"end-ellipsis\"`.",
          "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "selected": "Pseudo-class applied to the root element if `selected={true}`.",
          "icon": "Styles applied to the icon element."
        },
        "globalClasses": {
          "root": "MuiPaginationItem-root",
          "page": "MuiPaginationItem-page",
          "sizeSmall": "MuiPaginationItem-sizeSmall",
          "sizeLarge": "MuiPaginationItem-sizeLarge",
          "textPrimary": "MuiPaginationItem-textPrimary",
          "textSecondary": "MuiPaginationItem-textSecondary",
          "outlined": "MuiPaginationItem-outlined",
          "outlinedPrimary": "MuiPaginationItem-outlinedPrimary",
          "outlinedSecondary": "MuiPaginationItem-outlinedSecondary",
          "rounded": "MuiPaginationItem-rounded",
          "ellipsis": "MuiPaginationItem-ellipsis",
          "focusVisible": "Mui-focusVisible",
          "disabled": "Mui-disabled",
          "selected": "Mui-selected",
          "icon": "MuiPaginationItem-icon"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui-lab/src/PaginationItem/PaginationItem.js",
      "inheritance": null,
      "usedInPages": [
        "/components/pagination"
      ]
    },
    "Paper": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "elevation": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Shadow depth, corresponds to `dp` in the spec.\nIt accepts values between 0 and 24 inclusive.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "square": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, rounded corners are disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'elevation'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'elevation'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Paper",
      "styles": {
        "classes": [
          "root",
          "rounded",
          "outlined",
          "elevation0",
          "elevation1",
          "elevation2",
          "elevation3",
          "elevation4",
          "elevation5",
          "elevation6",
          "elevation7",
          "elevation8",
          "elevation9",
          "elevation10",
          "elevation11",
          "elevation12",
          "elevation13",
          "elevation14",
          "elevation15",
          "elevation16",
          "elevation17",
          "elevation18",
          "elevation19",
          "elevation20",
          "elevation21",
          "elevation22",
          "elevation23",
          "elevation24"
        ],
        "name": "MuiPaper",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "rounded": "Styles applied to the root element if `square={false}`.",
          "outlined": "Styles applied to the root element if `variant=\"outlined\"`"
        },
        "globalClasses": {
          "root": "MuiPaper-root",
          "rounded": "MuiPaper-rounded",
          "outlined": "MuiPaper-outlined",
          "elevation0": "MuiPaper-elevation0",
          "elevation1": "MuiPaper-elevation1",
          "elevation2": "MuiPaper-elevation2",
          "elevation3": "MuiPaper-elevation3",
          "elevation4": "MuiPaper-elevation4",
          "elevation5": "MuiPaper-elevation5",
          "elevation6": "MuiPaper-elevation6",
          "elevation7": "MuiPaper-elevation7",
          "elevation8": "MuiPaper-elevation8",
          "elevation9": "MuiPaper-elevation9",
          "elevation10": "MuiPaper-elevation10",
          "elevation11": "MuiPaper-elevation11",
          "elevation12": "MuiPaper-elevation12",
          "elevation13": "MuiPaper-elevation13",
          "elevation14": "MuiPaper-elevation14",
          "elevation15": "MuiPaper-elevation15",
          "elevation16": "MuiPaper-elevation16",
          "elevation17": "MuiPaper-elevation17",
          "elevation18": "MuiPaper-elevation18",
          "elevation19": "MuiPaper-elevation19",
          "elevation20": "MuiPaper-elevation20",
          "elevation21": "MuiPaper-elevation21",
          "elevation22": "MuiPaper-elevation22",
          "elevation23": "MuiPaper-elevation23",
          "elevation24": "MuiPaper-elevation24"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Paper/Paper.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards",
        "/components/paper"
      ]
    },
    "Popover": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "A ref for imperative actions.\nIt currently only supports updatePosition() action.",
          "tags": []
        },
        "anchorEl": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n  if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {\n    const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n    const containerWindow = ownerWindow(resolvedAnchorEl);\n\n    if (resolvedAnchorEl instanceof containerWindow.Element) {\n      const box = resolvedAnchorEl.getBoundingClientRect();\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        box.top === 0 &&\n        box.left === 0 &&\n        box.right === 0 &&\n        box.bottom === 0\n      ) {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            'The anchor element should be part of the document layout.',\n            \"Make sure the element is present in the document or that it's not display none.\",\n          ].join('\\n'),\n        );\n      }\n    } else {\n      return new Error(\n        [\n          'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n          `It should be an Element instance but it's \\`${resolvedAnchorEl}\\` instead.`,\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return null;\n})",
            "chained": {
              "name": "union",
              "value": [
                {
                  "name": "object"
                },
                {
                  "name": "func"
                }
              ]
            }
          },
          "required": false,
          "description": "This is the DOM element, or a function that returns the DOM element,\nthat may be used to set the position of the popover.",
          "tags": []
        },
        "anchorOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'left'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'right'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'top'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'bottom'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "This is the point on the anchor where the popover's\n`anchorEl` will attach to. This is not used when the\nanchorReference is 'anchorPosition'.\n\nOptions:\nvertical: [top, center, bottom];\nhorizontal: [left, center, right].",
          "defaultValue": {
            "value": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
            "computed": false
          },
          "tags": []
        },
        "anchorPosition": {
          "type": {
            "name": "shape",
            "value": {
              "left": {
                "name": "number",
                "required": true
              },
              "top": {
                "name": "number",
                "required": true
              }
            }
          },
          "required": false,
          "description": "This is the position that may be used\nto set the position of the popover.\nThe coordinates are relative to\nthe application's client area.",
          "tags": []
        },
        "anchorReference": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'anchorEl'",
                "computed": false
              },
              {
                "value": "'anchorPosition'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'anchorEl'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time.",
          "tags": []
        },
        "elevation": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The elevation of the popover.",
          "defaultValue": {
            "value": "8",
            "computed": false
          },
          "tags": []
        },
        "getContentAnchorEl": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "This function is called in order to retrieve the content anchor element.\nIt's the opposite of the `anchorEl` prop.\nThe content anchor element should be an element inside the popover.\nIt's used to correctly scroll and set the position of the popover.\nThe positioning strategy tries to make the content anchor element just above the\nanchor element.",
          "tags": []
        },
        "marginThreshold": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Specifies how close to the edge of the window the popover can appear.",
          "defaultValue": {
            "value": "16",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the component is entering.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component is entering.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the component is exiting.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the popover is visible.",
          "tags": []
        },
        "PaperProps": {
          "type": {
            "name": "shape",
            "value": {
              "component": {
                "name": "custom",
                "raw": "elementTypeAcceptingRef",
                "required": false
              }
            }
          },
          "required": false,
          "description": "Props applied to the [`Paper`](/api/paper/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "transformOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'left'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'right'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'top'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'bottom'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "This is the point on the popover which\nwill attach to the anchor's origin.\n\nOptions:\nvertical: [top, center, bottom, x(px)];\nhorizontal: [left, center, right, x(px)].",
          "defaultValue": {
            "value": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
            "computed": false
          },
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Grow",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "Set to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Popover",
      "styles": {
        "classes": [
          "root",
          "paper"
        ],
        "name": "MuiPopover",
        "descriptions": {
          "root": "Styles applied to the root element",
          "paper": "Styles applied to the `Paper` component."
        },
        "globalClasses": {
          "root": "MuiPopover-root",
          "paper": "MuiPopover-paper"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Popover/Popover.js",
      "inheritance": {
        "component": "Modal",
        "pathname": "/api/modal"
      },
      "usedInPages": [
        "/components/menus",
        "/components/popover"
      ]
    },
    "Popper": {
      "description": "Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.",
      "methods": [],
      "props": {
        "anchorEl": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n  if (props.open) {\n    const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n    const containerWindow = ownerWindow(resolvedAnchorEl);\n\n    if (resolvedAnchorEl instanceof containerWindow.Element) {\n      const box = resolvedAnchorEl.getBoundingClientRect();\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        box.top === 0 &&\n        box.left === 0 &&\n        box.right === 0 &&\n        box.bottom === 0\n      ) {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            'The anchor element should be part of the document layout.',\n            \"Make sure the element is present in the document or that it's not display none.\",\n          ].join('\\n'),\n        );\n      }\n    } else if (\n      !resolvedAnchorEl ||\n      typeof resolvedAnchorEl.clientWidth !== 'number' ||\n      typeof resolvedAnchorEl.clientHeight !== 'number' ||\n      typeof resolvedAnchorEl.getBoundingClientRect !== 'function'\n    ) {\n      return new Error(\n        [\n          'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n          'It should be an HTML Element instance or a referenceObject:',\n          'https://popper.js.org/popper-documentation.html#referenceObject.',\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return null;\n})",
            "chained": {
              "name": "union",
              "value": [
                {
                  "name": "object"
                },
                {
                  "name": "func"
                }
              ]
            }
          },
          "required": false,
          "description": "This is the reference element, or a function that returns the reference element,\nthat may be used to set the position of the popover.\nThe return value will passed as the reference object of the Popper\ninstance.\n\nThe reference element should be an HTML Element instance or a referenceObject:\nhttps://popper.js.org/popper-documentation.html#referenceObject.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "node"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": true,
          "description": "Popper render function or node.",
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time.",
          "tags": []
        },
        "disablePortal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "keepMounted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Popper.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "modifiers": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Popper.js is based on a \"plugin-like\" architecture,\nmost of its features are fully encapsulated \"modifiers\".\n\nA modifier is a function that is called each time Popper.js needs to\ncompute the position of the popper.\nFor this reason, modifiers should be very performant to avoid bottlenecks.\nTo learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object).",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the popper is visible.",
          "tags": []
        },
        "placement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom-end'",
                "computed": false
              },
              {
                "value": "'bottom-start'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left-end'",
                "computed": false
              },
              {
                "value": "'left-start'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right-end'",
                "computed": false
              },
              {
                "value": "'right-start'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top-end'",
                "computed": false
              },
              {
                "value": "'top-start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Popper placement.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        },
        "popperOptions": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "popperRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "A ref that points to the used popper instance.",
          "tags": []
        },
        "transition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Help supporting a react-transition-group/Transition component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Popper",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Popper/Popper.js",
      "inheritance": null,
      "usedInPages": [
        "/components/autocomplete",
        "/components/menus",
        "/components/popper"
      ]
    },
    "Portal": {
      "description": "Portals provide a first-class way to render children into a DOM node\nthat exists outside the DOM hierarchy of the parent component.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The children to render into the `container`.",
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "func"
              },
              {
                "name": "instanceOf",
                "value": "React.Component"
              },
              {
                "name": "instanceOf",
                "value": "typeof Element === 'undefined' ? Object : Element"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will have the portal children appended to it.\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
          "tags": []
        },
        "disablePortal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onRendered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired once the children has been mounted into the `container`.\n\nThis prop will be deprecated and removed in v5, the ref can be used instead.",
          "tags": []
        }
      },
      "name": "Portal",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": false,
      "filename": "/packages/material-ui/src/Portal/Portal.js",
      "inheritance": null,
      "usedInPages": [
        "/components/portal"
      ]
    },
    "Radio": {
      "description": "",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is checked.",
          "tags": []
        },
        "checkedIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is checked.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the radio will be disabled.",
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is unchecked.",
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the radio.\n`small` is equivalent to the dense radio styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The input component prop `type`.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "Radio",
      "styles": {
        "classes": [
          "root",
          "checked",
          "disabled",
          "colorPrimary",
          "colorSecondary"
        ],
        "name": "MuiRadio",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "checked": "Pseudo-class applied to the root element if `checked={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
        },
        "globalClasses": {
          "root": "MuiRadio-root",
          "checked": "Mui-checked",
          "disabled": "Mui-disabled",
          "colorPrimary": "MuiRadio-colorPrimary",
          "colorSecondary": "MuiRadio-colorSecondary"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Radio/Radio.js",
      "inheritance": {
        "component": "IconButton",
        "pathname": "/api/icon-button"
      },
      "usedInPages": [
        "/components/radio-buttons"
      ]
    },
    "RadioGroup": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The name used to reference the value of the control.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when a radio button is selected.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "Value of the selected radio button. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "RadioGroup",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/RadioGroup/RadioGroup.js",
      "inheritance": {
        "component": "FormGroup",
        "pathname": "/api/form-group"
      },
      "usedInPages": [
        "/components/radio-buttons"
      ]
    },
    "Rating": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The default value. Use when the component is not controlled.",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the rating will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "emptyIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when empty.",
          "tags": []
        },
        "emptyLabelText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label read when the rating input is empty.",
          "defaultValue": {
            "value": "'Empty'",
            "computed": false
          },
          "tags": []
        },
        "getLabelText": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "function defaultLabelText(value) {\n  return `${value} Star${value !== 1 ? 's' : ''}`;\n}",
            "computed": false
          },
          "tags": [
            {
              "title": "param",
              "description": "The rating label's value to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display.",
          "defaultValue": {
            "value": "<Star fontSize=\"inherit\" />",
            "computed": false
          },
          "tags": []
        },
        "IconContainerComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component containing the icon.",
          "defaultValue": {
            "value": "function IconContainer(props) {\n  const { value, ...other } = props;\n  return <span {...other} />;\n}",
            "computed": false
          },
          "tags": []
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Maximum rating.",
          "defaultValue": {
            "value": "5",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.string, props => {\n  if (!props.readOnly && !props.name) {\n    return new Error(\n      [\n        'Material-UI: the prop `name` is required (when `readOnly` is false).',\n        'Additionally, the input name should be unique within the parent form.',\n      ].join('\\n'),\n    );\n  }\n  return null;\n})",
            "chained": {
              "name": "string"
            }
          },
          "required": false,
          "description": "The name attribute of the radio `input` elements.\nIf `readOnly` is false, the prop is required,\nthis input name`should be unique within the parent form.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            }
          ]
        },
        "onChangeActive": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function that is fired when the hover state changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            }
          ]
        },
        "precision": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The minimum increment value change allowed.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Removes all hover effects and pointer events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the rating.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The rating value.",
          "tags": []
        }
      },
      "name": "Rating",
      "styles": {
        "classes": [
          "root",
          "sizeSmall",
          "sizeLarge",
          "readOnly",
          "disabled",
          "focusVisible",
          "visuallyhidden",
          "pristine",
          "label",
          "icon",
          "iconEmpty",
          "iconFilled",
          "iconHover",
          "iconFocus",
          "iconActive",
          "decimal"
        ],
        "name": "MuiRating",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
          "readOnly": "Styles applied to the root element if `readOnly={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
          "visuallyhidden": "Visually hide an element.",
          "pristine": "Styles applied to the pristine label.",
          "label": "Styles applied to the label elements.",
          "icon": "Styles applied to the icon wrapping elements.",
          "iconEmpty": "Styles applied to the icon wrapping elements when empty.",
          "iconFilled": "Styles applied to the icon wrapping elements when filled.",
          "iconHover": "Styles applied to the icon wrapping elements when hover.",
          "iconFocus": "Styles applied to the icon wrapping elements when focus.",
          "iconActive": "Styles applied to the icon wrapping elements when active.",
          "decimal": "Styles applied to the icon wrapping elements when decimals are necessary."
        },
        "globalClasses": {
          "root": "MuiRating-root",
          "sizeSmall": "MuiRating-sizeSmall",
          "sizeLarge": "MuiRating-sizeLarge",
          "readOnly": "MuiRating-readOnly",
          "disabled": "Mui-disabled",
          "focusVisible": "Mui-focusVisible",
          "visuallyhidden": "MuiRating-visuallyhidden",
          "pristine": "MuiRating-pristine",
          "label": "MuiRating-label",
          "icon": "MuiRating-icon",
          "iconEmpty": "MuiRating-iconEmpty",
          "iconFilled": "MuiRating-iconFilled",
          "iconHover": "MuiRating-iconHover",
          "iconFocus": "MuiRating-iconFocus",
          "iconActive": "MuiRating-iconActive",
          "decimal": "MuiRating-decimal"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui-lab/src/Rating/Rating.js",
      "inheritance": null,
      "usedInPages": [
        "/components/rating"
      ]
    },
    "RootRef": {
      "description": "⚠️⚠️⚠️\nIf you want the DOM element of a Material-UI component check out\n[FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)\nfirst.\n\nThis component uses `findDOMNode` which is deprecated in React.StrictMode.\n\nHelper component to allow attaching a ref to a\nwrapped element to access the underlying DOM element.\n\nIt's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\nFor example:\n```jsx\nimport React from 'react';\nimport RootRef from '@material-ui/core/RootRef';\n\nfunction MyComponent() {\n  const domRef = React.useRef();\n\n  React.useEffect(() => {\n    console.log(domRef.current); // DOM node\n  }, []);\n\n  return (\n    <RootRef rootRef={domRef}>\n      <SomeChildComponent />\n    </RootRef>\n  );\n}\n```",
      "displayName": "RootRef",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": true,
          "description": "The wrapped element.",
          "tags": []
        },
        "rootRef": {
          "type": {
            "name": "custom",
            "raw": "refType.isRequired"
          },
          "required": false,
          "description": "A ref that points to the first DOM node of the wrapped element.",
          "tags": []
        }
      },
      "name": "RootRef",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": false,
      "filename": "/packages/material-ui/src/RootRef/RootRef.js",
      "inheritance": null,
      "usedInPages": []
    },
    "ScopedCssBaseline": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ScopedCssBaseline",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiScopedCssBaseline",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiScopedCssBaseline-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ScopedCssBaseline/ScopedCssBaseline.js",
      "inheritance": null,
      "usedInPages": [
        "/components/css-baseline"
      ]
    },
    "Select": {
      "description": "",
      "methods": [],
      "props": {
        "autoWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the width of the popover will automatically be set according to the items inside the\nmenu, otherwise it will be at least the width of the select input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The option elements to populate the select with.\nCan be some `MenuItem` when `native` is false and `option` when `native` is true.\n\n⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default element value. Use when the component is not controlled.",
          "tags": []
        },
        "displayEmpty": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a value is displayed even if no items are selected.\n\nIn order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\nYou can only use it when the `native` prop is `false` (default).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "IconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The icon that displays the arrow.",
          "defaultValue": {
            "value": "ArrowDropDownIcon",
            "computed": true
          },
          "tags": []
        },
        "input": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\nWhen `native` is `true`, the attributes are applied on the `select` element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "See [OutlinedLabel#label](/api/outlined-input/#props)",
          "tags": []
        },
        "labelId": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The ID of an element that acts as an additional label. The Select will\nbe labelled by the additional label and the selected value.",
          "tags": []
        },
        "labelWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "See OutlinedLabel#label",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "MenuProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Menu`](/api/menu/) element.",
          "tags": []
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, `value` must be an array and the menu will support multiple selections.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "native": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will be using a native `select` element.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function fired when a menu item is selected.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (any).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The react element that was selected when `native` is `false` (default).",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "child"
            }
          ]
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be opened.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Control `select` open state.\nYou can only use it when the `native` prop is `false` (default).",
          "tags": []
        },
        "renderValue": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the selected value.\nYou can only use it when the `native` prop is `false` (default).",
          "tags": [
            {
              "title": "param",
              "description": "The `value` provided to the component.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "SelectDisplayProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the clickable div element.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The input value. Providing an empty string will select no options.\nThis prop is required when the `native` prop is `false` (default).\nSet to an empty string `''` if you don't want any of the available options to be selected.\n\nIf the value is an object it must have reference equality with the option in order to be selected.\nIf the value is not an object, the string representation must match with the string representation of the option in order to be selected.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Select",
      "styles": {
        "classes": [
          "root",
          "select",
          "filled",
          "outlined",
          "selectMenu",
          "disabled",
          "icon",
          "iconOpen",
          "iconFilled",
          "iconOutlined"
        ],
        "name": "MuiSelect",
        "descriptions": {
          "root": "Styles applied to the select component `root` class.",
          "select": "Styles applied to the select component `select` class.",
          "filled": "Styles applied to the select component if `variant=\"filled\"`.",
          "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
          "selectMenu": "Styles applied to the select component `selectMenu` class.",
          "disabled": "Pseudo-class applied to the select component `disabled` class.",
          "icon": "Styles applied to the icon component.",
          "iconOpen": "Styles applied to the icon component if the popup is open.",
          "iconFilled": "Styles applied to the icon component if `variant=\"filled\"`.",
          "iconOutlined": "Styles applied to the icon component if `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiSelect-root",
          "select": "MuiSelect-select",
          "filled": "MuiSelect-filled",
          "outlined": "MuiSelect-outlined",
          "selectMenu": "MuiSelect-selectMenu",
          "disabled": "Mui-disabled",
          "icon": "MuiSelect-icon",
          "iconOpen": "MuiSelect-iconOpen",
          "iconFilled": "MuiSelect-iconFilled",
          "iconOutlined": "MuiSelect-iconOutlined"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Select/Select.js",
      "inheritance": {
        "component": "Input",
        "pathname": "/api/input"
      },
      "usedInPages": [
        "/components/selects"
      ]
    },
    "Skeleton": {
      "description": "",
      "methods": [],
      "props": {
        "animation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'pulse'",
                "computed": false
              },
              {
                "value": "'wave'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The animation.\nIf `false` the animation effect is disabled.",
          "defaultValue": {
            "value": "'pulse'",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "height": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Height of the skeleton.\nUseful when you don't want to adapt the skeleton to a text element but for instance a card.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'rect'",
                "computed": false
              },
              {
                "value": "'circle'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The type of content that will be rendered.",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "width": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Width of the skeleton.\nUseful when the skeleton is inside an inline element with no width of its own.",
          "tags": []
        }
      },
      "name": "Skeleton",
      "styles": {
        "classes": [
          "root",
          "text",
          "rect",
          "circle",
          "pulse",
          "wave"
        ],
        "name": "MuiSkeleton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "text": "Styles applied to the root element if `variant=\"text\"`.",
          "rect": "Styles applied to the root element if `variant=\"rect\"`.",
          "circle": "Styles applied to the root element if `variant=\"circle\"`.",
          "pulse": "Styles applied to the root element if `animation=\"pulse\"`.",
          "wave": "Styles applied to the root element if `animation=\"wave\"`."
        },
        "globalClasses": {
          "root": "MuiSkeleton-root",
          "text": "MuiSkeleton-text",
          "rect": "MuiSkeleton-rect",
          "circle": "MuiSkeleton-circle",
          "pulse": "MuiSkeleton-pulse",
          "wave": "MuiSkeleton-wave"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui-lab/src/Skeleton/Skeleton.js",
      "inheritance": null,
      "usedInPages": [
        "/components/skeleton"
      ]
    },
    "Slide": {
      "description": "The Slide transition is used by the [Drawer](/components/drawers/) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'up'",
                "computed": false
              },
              {
                "value": "'down'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Direction the child node will enter from.",
          "defaultValue": {
            "value": "'down'",
            "computed": false
          },
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, show the component; triggers the enter or exit animation.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Slide",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Slide/Slide.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/dialogs",
        "/components/transitions"
      ]
    },
    "Slider": {
      "description": "",
      "methods": [],
      "props": {
        "aria-label": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.string, props => {\n  const range = Array.isArray(props.value || props.defaultValue);\n\n  if (range && props['aria-label'] != null) {\n    return new Error(\n      'Material-UI: you need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.',\n    );\n  }\n\n  return null;\n})",
            "chained": {
              "name": "string"
            }
          },
          "required": false,
          "description": "The label of the slider.",
          "tags": []
        },
        "aria-labelledby": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the element containing a label for the slider.",
          "tags": []
        },
        "aria-valuetext": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.string, props => {\n  const range = Array.isArray(props.value || props.defaultValue);\n\n  if (range && props['aria-valuetext'] != null) {\n    return new Error(\n      'Material-UI: you need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.',\n    );\n  }\n\n  return null;\n})",
            "chained": {
              "name": "string"
            }
          },
          "required": false,
          "description": "A string value that provides a user-friendly name for the current value of the slider.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "number"
                }
              }
            ]
          },
          "required": false,
          "description": "The default element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the slider will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "getAriaLabel": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.",
          "tags": [
            {
              "title": "param",
              "description": "The thumb label's index to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "getAriaValueText": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.",
          "tags": [
            {
              "title": "param",
              "description": "The thumb label's value to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "The thumb label's index to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "marks": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "array"
              }
            ]
          },
          "required": false,
          "description": "Marks indicate predetermined values to which the user can move the slider.\nIf `true` the marks will be spaced according the value of the `step` prop.\nIf an array, it should contain objects with `value` and an optional `label` keys.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The maximum allowed value of the slider.\nShould not be equal to min.",
          "defaultValue": {
            "value": "100",
            "computed": false
          },
          "tags": []
        },
        "min": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The minimum allowed value of the slider.\nShould not be equal to max.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the hidden `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function that is fired when the slider's value changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    ]
                  }
                ]
              },
              "name": "value"
            }
          ]
        },
        "onChangeCommitted": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function that is fired when the `mouseup` is triggered.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    ]
                  }
                ]
              },
              "name": "value"
            }
          ]
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The slider orientation.",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        },
        "scale": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A transformation function, to change the scale of the slider.",
          "defaultValue": {
            "value": "x => x",
            "computed": false
          },
          "tags": []
        },
        "step": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The granularity with which the slider can step through values. (A \"discrete\" slider.)\nThe `min` prop serves as the origin for the valid values.\nWe recommend (max - min) to be evenly divisible by the step.\n\nWhen step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "ThumbComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to display the value label.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "track": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'inverted'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The track presentation:\n\n- `normal` the track will render a bar representing the slider value.\n- `inverted` the track will render a bar representing the remaining slider value.\n- `false` the track will render without a bar.",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "number"
                }
              }
            ]
          },
          "required": false,
          "description": "The value of the slider.\nFor ranged sliders, provide an array with two values.",
          "tags": []
        },
        "ValueLabelComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The value label component.",
          "defaultValue": {
            "value": "ValueLabel",
            "computed": true
          },
          "tags": []
        },
        "valueLabelDisplay": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'on'",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "'off'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Controls when the value label is displayed:\n\n- `auto` the value label will display when the thumb is hovered or focused.\n- `on` will display persistently.\n- `off` will never display.",
          "defaultValue": {
            "value": "'off'",
            "computed": false
          },
          "tags": []
        },
        "valueLabelFormat": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "The format function the value label's value.\n\nWhen a function is provided, it should have the following signature:\n\n- {number} value The value label's value to format\n- {number} index The value label's index to format",
          "defaultValue": {
            "value": "x => x",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Slider",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "marked",
          "vertical",
          "disabled",
          "rail",
          "track",
          "trackFalse",
          "trackInverted",
          "thumb",
          "thumbColorPrimary",
          "thumbColorSecondary",
          "active",
          "focusVisible",
          "valueLabel",
          "mark",
          "markActive",
          "markLabel",
          "markLabelActive"
        ],
        "name": "MuiSlider",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "marked": "Styles applied to the root element if `marks` is provided with at least one label.",
          "vertical": "Pseudo-class applied to the root element if `orientation=\"vertical\"`.",
          "disabled": "Pseudo-class applied to the root and thumb element if `disabled={true}`.",
          "rail": "Styles applied to the rail element.",
          "track": "Styles applied to the track element.",
          "trackFalse": "Styles applied to the track element if `track={false}`.",
          "trackInverted": "Styles applied to the track element if `track=\"inverted\"`.",
          "thumb": "Styles applied to the thumb element.",
          "thumbColorPrimary": "Styles applied to the thumb element if `color=\"primary\"`.",
          "thumbColorSecondary": "Styles applied to the thumb element if `color=\"secondary\"`.",
          "active": "Pseudo-class applied to the thumb element if it's active.",
          "focusVisible": "Pseudo-class applied to the thumb element if keyboard focused.",
          "valueLabel": "Styles applied to the thumb label element.",
          "mark": "Styles applied to the mark element.",
          "markActive": "Styles applied to the mark element if active (depending on the value).",
          "markLabel": "Styles applied to the mark label element.",
          "markLabelActive": "Styles applied to the mark label element if active (depending on the value)."
        },
        "globalClasses": {
          "root": "MuiSlider-root",
          "colorPrimary": "MuiSlider-colorPrimary",
          "colorSecondary": "MuiSlider-colorSecondary",
          "marked": "MuiSlider-marked",
          "vertical": "MuiSlider-vertical",
          "disabled": "Mui-disabled",
          "rail": "MuiSlider-rail",
          "track": "MuiSlider-track",
          "trackFalse": "MuiSlider-trackFalse",
          "trackInverted": "MuiSlider-trackInverted",
          "thumb": "MuiSlider-thumb",
          "thumbColorPrimary": "MuiSlider-thumbColorPrimary",
          "thumbColorSecondary": "MuiSlider-thumbColorSecondary",
          "active": "MuiSlider-active",
          "focusVisible": "Mui-focusVisible",
          "valueLabel": "MuiSlider-valueLabel",
          "mark": "MuiSlider-mark",
          "markActive": "MuiSlider-markActive",
          "markLabel": "MuiSlider-markLabel",
          "markLabelActive": "MuiSlider-markLabelActive"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Slider/Slider.js",
      "inheritance": null,
      "usedInPages": [
        "/components/slider"
      ]
    },
    "Snackbar": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The action to display. It renders after the message, at the end of the snackbar.",
          "tags": []
        },
        "anchorOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "enum",
                "value": [
                  {
                    "value": "'left'",
                    "computed": false
                  },
                  {
                    "value": "'center'",
                    "computed": false
                  },
                  {
                    "value": "'right'",
                    "computed": false
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "enum",
                "value": [
                  {
                    "value": "'top'",
                    "computed": false
                  },
                  {
                    "value": "'bottom'",
                    "computed": false
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "The anchor of the `Snackbar`.",
          "defaultValue": {
            "value": "{ vertical: 'bottom', horizontal: 'center' }",
            "computed": false
          },
          "tags": []
        },
        "autoHideDuration": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before automatically calling the\n`onClose` function. `onClose` should then set the state of the `open`\nprop to hide the Snackbar. This behavior is disabled by default with\nthe `null` value.",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Replace the `SnackbarContent` component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "ClickAwayListenerProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `ClickAwayListener` element.",
          "tags": []
        },
        "ContentProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.",
          "tags": []
        },
        "disableWindowBlurListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "key": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "When displaying multiple consecutive Snackbars from a parent rendering a single\n<Snackbar/>, add the key prop to ensure independent treatment of each message.\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\nfeatures such as autoHideDuration may be canceled.",
          "tags": []
        },
        "message": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The message to display.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.\nTypically `onClose` is used to set state in the parent component,\nwhich is used to control the `Snackbar` `open` prop.\nThe `reason` parameter can optionally be used to control the response to `onClose`,\nfor example ignoring `clickaway`.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the transition is entering.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition is entering.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the transition is exiting.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, `Snackbar` is open.",
          "tags": []
        },
        "resumeHideDuration": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before dismissing after user interaction.\nIf `autoHideDuration` prop isn't specified, it does nothing.\nIf `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\nwe default to `autoHideDuration / 2` ms.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Grow",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "tags": []
        }
      },
      "name": "Snackbar",
      "styles": {
        "classes": [
          "root",
          "anchorOriginTopCenter",
          "anchorOriginBottomCenter",
          "anchorOriginTopRight",
          "anchorOriginBottomRight",
          "anchorOriginTopLeft",
          "anchorOriginBottomLeft"
        ],
        "name": "MuiSnackbar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "anchorOriginTopCenter": "Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`.",
          "anchorOriginBottomCenter": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`.",
          "anchorOriginTopRight": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`.",
          "anchorOriginBottomRight": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`.",
          "anchorOriginTopLeft": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`.",
          "anchorOriginBottomLeft": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`."
        },
        "globalClasses": {
          "root": "MuiSnackbar-root",
          "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
          "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
          "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
          "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
          "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
          "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Snackbar/Snackbar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/snackbars"
      ]
    },
    "SnackbarContent": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The action to display. It renders after the message, at the end of the snackbar.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "message": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The message to display.",
          "tags": []
        },
        "role": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The ARIA role attribute of the element.",
          "defaultValue": {
            "value": "'alert'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "SnackbarContent",
      "styles": {
        "classes": [
          "root",
          "message",
          "action"
        ],
        "name": "MuiSnackbarContent",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "message": "Styles applied to the message wrapper element.",
          "action": "Styles applied to the action wrapper element if `action` is provided."
        },
        "globalClasses": {
          "root": "MuiSnackbarContent-root",
          "message": "MuiSnackbarContent-message",
          "action": "MuiSnackbarContent-action"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/SnackbarContent/SnackbarContent.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/snackbars"
      ]
    },
    "SpeedDial": {
      "description": "",
      "methods": [],
      "props": {
        "ariaLabel": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The aria-label of the button element.\nAlso used to provide the `id` for the `SpeedDial` element and its children.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "SpeedDialActions to display when the SpeedDial is `open`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'down'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'up'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The direction the actions open relative to the floating action button.",
          "defaultValue": {
            "value": "'up'",
            "computed": false
          },
          "tags": []
        },
        "FabProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Fab`](/api/fab/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the SpeedDial will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component\nprovides a default Icon with animation.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be: `\"toggle\"`, `\"blur\"`, `\"mouseLeave\"`, `\"escapeKeyDown\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be open.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be: `\"toggle\"`, `\"focus\"`, `\"mouseEnter\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the SpeedDial is open.",
          "tags": []
        },
        "openIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Fab when the SpeedDial is open.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Zoom",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "appear": {
                    "name": "number",
                    "required": false
                  },
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "tags": []
        }
      },
      "name": "SpeedDial",
      "styles": {
        "classes": [
          "root",
          "fab",
          "directionUp",
          "directionDown",
          "directionLeft",
          "directionRight",
          "actions",
          "actionsClosed"
        ],
        "name": "MuiSpeedDial",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "fab": "Styles applied to the Fab component.",
          "directionUp": "Styles applied to the root if direction=\"up\"",
          "directionDown": "Styles applied to the root if direction=\"down\"",
          "directionLeft": "Styles applied to the root if direction=\"left\"",
          "directionRight": "Styles applied to the root if direction=\"right\"",
          "actions": "Styles applied to the actions (`children` wrapper) element.",
          "actionsClosed": "Styles applied to the actions (`children` wrapper) element if `open={false}`."
        },
        "globalClasses": {
          "root": "MuiSpeedDial-root",
          "fab": "MuiSpeedDial-fab",
          "directionUp": "MuiSpeedDial-directionUp",
          "directionDown": "MuiSpeedDial-directionDown",
          "directionLeft": "MuiSpeedDial-directionLeft",
          "directionRight": "MuiSpeedDial-directionRight",
          "actions": "MuiSpeedDial-actions",
          "actionsClosed": "MuiSpeedDial-actionsClosed"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/SpeedDial/SpeedDial.js",
      "inheritance": null,
      "usedInPages": [
        "/components/speed-dial"
      ]
    },
    "SpeedDialAction": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "delay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Adds a transition delay, to allow a series of SpeedDialActions to be animated.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "FabProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Fab`](/api/fab/) component.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The Icon to display in the SpeedDial Fab.",
          "tags": []
        },
        "TooltipClasses": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Classes applied to the [`Tooltip`](/api/tooltip/) element.",
          "tags": []
        },
        "tooltipOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Make the tooltip always visible when the SpeedDial is open.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "tooltipPlacement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom-end'",
                "computed": false
              },
              {
                "value": "'bottom-start'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left-end'",
                "computed": false
              },
              {
                "value": "'left-start'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right-end'",
                "computed": false
              },
              {
                "value": "'right-start'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top-end'",
                "computed": false
              },
              {
                "value": "'top-start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Placement of the tooltip.",
          "defaultValue": {
            "value": "'left'",
            "computed": false
          },
          "tags": []
        },
        "tooltipTitle": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Label to display in the tooltip.",
          "tags": []
        }
      },
      "name": "SpeedDialAction",
      "styles": {
        "classes": [
          "fab",
          "fabClosed",
          "staticTooltip",
          "staticTooltipClosed",
          "staticTooltipLabel",
          "tooltipPlacementLeft",
          "tooltipPlacementRight"
        ],
        "name": "MuiSpeedDialAction",
        "descriptions": {
          "fab": "Styles applied to the Fab component.",
          "fabClosed": "Styles applied to the Fab component if `open={false}`.",
          "staticTooltip": "Styles applied to the root element if `tooltipOpen={true}`.",
          "staticTooltipClosed": "Styles applied to the root element if `tooltipOpen={true}` and `open={false}`.",
          "staticTooltipLabel": "Styles applied to the static tooltip label if `tooltipOpen={true}`.",
          "tooltipPlacementLeft": "Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"left\"``",
          "tooltipPlacementRight": "Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"right\"``"
        },
        "globalClasses": {
          "fab": "MuiSpeedDialAction-fab",
          "fabClosed": "MuiSpeedDialAction-fabClosed",
          "staticTooltip": "MuiSpeedDialAction-staticTooltip",
          "staticTooltipClosed": "MuiSpeedDialAction-staticTooltipClosed",
          "staticTooltipLabel": "MuiSpeedDialAction-staticTooltipLabel",
          "tooltipPlacementLeft": "MuiSpeedDialAction-tooltipPlacementLeft",
          "tooltipPlacementRight": "MuiSpeedDialAction-tooltipPlacementRight"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui-lab/src/SpeedDialAction/SpeedDialAction.js",
      "inheritance": {
        "component": "Tooltip",
        "pathname": "/api/tooltip"
      },
      "usedInPages": [
        "/components/speed-dial"
      ]
    },
    "SpeedDialIcon": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Floating Action Button.",
          "tags": []
        },
        "openIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.",
          "tags": []
        }
      },
      "name": "SpeedDialIcon",
      "styles": {
        "classes": [
          "root",
          "icon",
          "iconOpen",
          "iconWithOpenIconOpen",
          "openIcon",
          "openIconOpen"
        ],
        "name": "MuiSpeedDialIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "icon": "Styles applied to the icon component.",
          "iconOpen": "Styles applied to the icon component if `open={true}`.",
          "iconWithOpenIconOpen": "Styles applied to the icon when and `openIcon` is provided and if `open={true}`.",
          "openIcon": "Styles applied to the `openIcon` if provided.",
          "openIconOpen": "Styles applied to the `openIcon` if provided and if `open={true}`."
        },
        "globalClasses": {
          "root": "MuiSpeedDialIcon-root",
          "icon": "MuiSpeedDialIcon-icon",
          "iconOpen": "MuiSpeedDialIcon-iconOpen",
          "iconWithOpenIconOpen": "MuiSpeedDialIcon-iconWithOpenIconOpen",
          "openIcon": "MuiSpeedDialIcon-openIcon",
          "openIconOpen": "MuiSpeedDialIcon-openIconOpen"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui-lab/src/SpeedDialIcon/SpeedDialIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/speed-dial"
      ]
    },
    "Step": {
      "description": "",
      "methods": [],
      "props": {
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Sets the step as active. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Should be `Step` sub-components such as `StepLabel`, `StepContent`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "completed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as completed. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as disabled, will also disable the button if\n`StepButton` is a child of `Step`. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "expanded": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Expand the step.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Step",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "alternativeLabel",
          "completed"
        ],
        "name": "MuiStep",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
          "completed": "Pseudo-class applied to the root element if `completed={true}`."
        },
        "globalClasses": {
          "root": "MuiStep-root",
          "horizontal": "MuiStep-horizontal",
          "vertical": "MuiStep-vertical",
          "alternativeLabel": "MuiStep-alternativeLabel",
          "completed": "MuiStep-completed"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Step/Step.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepButton": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Can be a `StepLabel` or a node to place inside `StepLabel` as children.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon displayed by the step label.",
          "tags": []
        },
        "optional": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The optional node to display.",
          "tags": []
        }
      },
      "name": "StepButton",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "touchRipple"
        ],
        "name": "MuiStepButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "touchRipple": "Styles applied to the `ButtonBase` touch-ripple."
        },
        "globalClasses": {
          "root": "MuiStepButton-root",
          "horizontal": "MuiStepButton-horizontal",
          "vertical": "MuiStepButton-vertical",
          "touchRipple": "MuiStepButton-touchRipple"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/StepButton/StepButton.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepConnector": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "StepConnector",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "alternativeLabel",
          "active",
          "completed",
          "disabled",
          "line",
          "lineHorizontal",
          "lineVertical"
        ],
        "name": "MuiStepConnector",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
          "active": "Pseudo-class applied to the root element if `active={true}`.",
          "completed": "Pseudo-class applied to the root element if `completed={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "line": "Styles applied to the line element.",
          "lineHorizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "lineVertical": "Styles applied to the root element if `orientation=\"vertical\"`."
        },
        "globalClasses": {
          "root": "MuiStepConnector-root",
          "horizontal": "MuiStepConnector-horizontal",
          "vertical": "MuiStepConnector-vertical",
          "alternativeLabel": "MuiStepConnector-alternativeLabel",
          "active": "MuiStepConnector-active",
          "completed": "MuiStepConnector-completed",
          "disabled": "Mui-disabled",
          "line": "MuiStepConnector-line",
          "lineHorizontal": "MuiStepConnector-lineHorizontal",
          "lineVertical": "MuiStepConnector-lineVertical"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/StepConnector/StepConnector.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepContent": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Step content.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Collapse",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "Adjust the duration of the content expand transition.\nPassed as a prop to the transition component.\n\nSet to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "tags": []
        }
      },
      "name": "StepContent",
      "styles": {
        "classes": [
          "root",
          "last",
          "transition"
        ],
        "name": "MuiStepContent",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "last": "Styles applied to the root element if `last={true}` (controlled by `Step`).",
          "transition": "Styles applied to the Transition component."
        },
        "globalClasses": {
          "root": "MuiStepContent-root",
          "last": "MuiStepContent-last",
          "transition": "MuiStepContent-transition"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/StepContent/StepContent.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepIcon": {
      "description": "",
      "methods": [],
      "props": {
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Whether this step is active.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "completed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as completed. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as failed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The label displayed in the step icon.",
          "tags": []
        }
      },
      "name": "StepIcon",
      "styles": {
        "classes": [
          "root",
          "text",
          "active",
          "completed",
          "error"
        ],
        "name": "MuiStepIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "text": "Styles applied to the SVG text element.",
          "active": "Pseudo-class applied to the root element if `active={true}`.",
          "completed": "Pseudo-class applied to the root element if `completed={true}`.",
          "error": "Pseudo-class applied to the root element if `error={true}`."
        },
        "globalClasses": {
          "root": "MuiStepIcon-root",
          "text": "MuiStepIcon-text",
          "active": "MuiStepIcon-active",
          "completed": "MuiStepIcon-completed",
          "error": "Mui-error"
        }
      },
      "spread": true,
      "forwardsRefTo": "SVGSVGElement",
      "filename": "/packages/material-ui/src/StepIcon/StepIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepLabel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "In most cases will simply be a string containing a title for the label.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as disabled, will also disable the button if\n`StepLabelButton` is a child of `StepLabel`. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as failed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Override the default label of the step icon.",
          "tags": []
        },
        "optional": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The optional node to display.",
          "tags": []
        },
        "StepIconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component to render in place of the [`StepIcon`](/api/step-icon/).",
          "tags": []
        },
        "StepIconProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`StepIcon`](/api/step-icon/) element.",
          "tags": []
        }
      },
      "name": "StepLabel",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "label",
          "active",
          "completed",
          "error",
          "disabled",
          "iconContainer",
          "alternativeLabel",
          "labelContainer"
        ],
        "name": "MuiStepLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\".",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\".",
          "label": "Styles applied to the `Typography` component which wraps `children`.",
          "active": "Pseudo-class applied to the `Typography` component if `active={true}`.",
          "completed": "Pseudo-class applied to the `Typography` component if `completed={true}`.",
          "error": "Pseudo-class applied to the root element and `Typography` component if `error={true}`.",
          "disabled": "Pseudo-class applied to the root element and `Typography` component if `disabled={true}`.",
          "iconContainer": "Styles applied to the `icon` container element.",
          "alternativeLabel": "Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`.",
          "labelContainer": "Styles applied to the container element which wraps `Typography` and `optional`."
        },
        "globalClasses": {
          "root": "MuiStepLabel-root",
          "horizontal": "MuiStepLabel-horizontal",
          "vertical": "MuiStepLabel-vertical",
          "label": "MuiStepLabel-label",
          "active": "MuiStepLabel-active",
          "completed": "MuiStepLabel-completed",
          "error": "Mui-error",
          "disabled": "Mui-disabled",
          "iconContainer": "MuiStepLabel-iconContainer",
          "alternativeLabel": "MuiStepLabel-alternativeLabel",
          "labelContainer": "MuiStepLabel-labelContainer"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/StepLabel/StepLabel.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "Stepper": {
      "description": "",
      "methods": [],
      "props": {
        "activeStep": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Set the active step (zero based index).\nSet to -1 to disable all the steps.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "alternativeLabel": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If set to 'true' and orientation is horizontal,\nthen the step label will be positioned under the icon.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Two or more `<Step />` components.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "connector": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "An element to be placed between each step.",
          "defaultValue": {
            "value": "<StepConnector />",
            "computed": false
          },
          "tags": []
        },
        "nonLinear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If set the `Stepper` will not assist in controlling steps for linear flow.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The stepper orientation (layout flow direction).",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Stepper",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "alternativeLabel"
        ],
        "name": "MuiStepper",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`."
        },
        "globalClasses": {
          "root": "MuiStepper-root",
          "horizontal": "MuiStepper-horizontal",
          "vertical": "MuiStepper-vertical",
          "alternativeLabel": "MuiStepper-alternativeLabel"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Stepper/Stepper.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "SvgIcon": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Node passed into the SVG element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'action'",
                "computed": false
              },
              {
                "value": "'disabled'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'svg'",
            "computed": false
          },
          "tags": []
        },
        "fontSize": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "htmlColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Applies a color attribute to the SVG element.",
          "tags": []
        },
        "shapeRendering": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The shape-rendering attribute. The behavior of the different options is described on the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\nIf you are having issues with blurry icons you should investigate this property.",
          "tags": []
        },
        "titleAccess": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent",
          "tags": []
        },
        "viewBox": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Allows you to redefine what the coordinates without units mean inside an SVG element.\nFor example, if the SVG element is 500 (width) by 200 (height),\nand you pass viewBox=\"0 0 50 20\",\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\nto bottom right (50,20) and each unit will be worth 10px.",
          "defaultValue": {
            "value": "'0 0 24 24'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "SvgIcon",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "colorAction",
          "colorError",
          "colorDisabled",
          "fontSizeInherit",
          "fontSizeSmall",
          "fontSizeLarge"
        ],
        "name": "MuiSvgIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorAction": "Styles applied to the root element if `color=\"action\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
          "fontSizeInherit": "Styles applied to the root element if `fontSize=\"inherit\"`.",
          "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
          "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiSvgIcon-root",
          "colorPrimary": "MuiSvgIcon-colorPrimary",
          "colorSecondary": "MuiSvgIcon-colorSecondary",
          "colorAction": "MuiSvgIcon-colorAction",
          "colorError": "MuiSvgIcon-colorError",
          "colorDisabled": "MuiSvgIcon-colorDisabled",
          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge"
        }
      },
      "spread": true,
      "forwardsRefTo": "SVGSVGElement",
      "filename": "/packages/material-ui/src/SvgIcon/SvgIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/icons",
        "/components/material-icons"
      ]
    },
    "SwipeableDrawer": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "disableBackdropTransition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the backdrop transition.\nThis can improve the FPS on low-end devices.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableDiscovery": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\nto promote accidental discovery of the swipe gesture.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableSwipeToOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\nnavigation actions. Swipe to open is disabled on iOS browsers by default.",
          "defaultValue": {
            "value": "typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)",
            "computed": false
          },
          "tags": []
        },
        "hysteresis": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Affects how far the drawer must be opened/closed to change his state.\nSpecified as percent (0-1) of the width of the drawer",
          "defaultValue": {
            "value": "0.52",
            "computed": false
          },
          "tags": []
        },
        "minFlingVelocity": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Defines, from which (average) velocity on, the swipe is\ndefined as complete although hysteresis isn't reached.\nGood threshold is between 250 - 1000 px/s",
          "defaultValue": {
            "value": "450",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when the component requests to be opened.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the drawer is open.",
          "tags": []
        },
        "SwipeAreaProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "The element is used to intercept the touch events on the edge.",
          "tags": []
        },
        "swipeAreaWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The width of the left most (or right most) area in pixels where the\ndrawer can be swiped open from.",
          "defaultValue": {
            "value": "20",
            "computed": false
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "SwipeableDrawer",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/SwipeableDrawer/SwipeableDrawer.js",
      "inheritance": {
        "component": "Drawer",
        "pathname": "/api/drawer"
      },
      "usedInPages": [
        "/components/drawers"
      ]
    },
    "Switch": {
      "description": "",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is checked.",
          "tags": []
        },
        "checkedIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is checked.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the switch will be disabled.",
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "edge": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'end'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is unchecked.",
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the switch.\n`small` is equivalent to the dense switch styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The input component prop `type`.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "Switch",
      "styles": {
        "classes": [
          "root",
          "edgeStart",
          "edgeEnd",
          "switchBase",
          "colorPrimary",
          "colorSecondary",
          "sizeSmall",
          "checked",
          "disabled",
          "input",
          "thumb",
          "track"
        ],
        "name": "MuiSwitch",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
          "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
          "switchBase": "Styles applied to the internal `SwitchBase` component's `root` class.",
          "colorPrimary": "Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "checked": "Pseudo-class applied to the internal `SwitchBase` component's `checked` class.",
          "disabled": "Pseudo-class applied to the internal SwitchBase component's disabled class.",
          "input": "Styles applied to the internal SwitchBase component's input element.",
          "thumb": "Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop.",
          "track": "Styles applied to the track element."
        },
        "globalClasses": {
          "root": "MuiSwitch-root",
          "edgeStart": "MuiSwitch-edgeStart",
          "edgeEnd": "MuiSwitch-edgeEnd",
          "switchBase": "MuiSwitch-switchBase",
          "colorPrimary": "MuiSwitch-colorPrimary",
          "colorSecondary": "MuiSwitch-colorSecondary",
          "sizeSmall": "MuiSwitch-sizeSmall",
          "checked": "Mui-checked",
          "disabled": "Mui-disabled",
          "input": "MuiSwitch-input",
          "thumb": "MuiSwitch-thumb",
          "track": "MuiSwitch-track"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Switch/Switch.js",
      "inheritance": {
        "component": "IconButton",
        "pathname": "/api/icon-button"
      },
      "usedInPages": [
        "/components/switches",
        "/components/transfer-list"
      ]
    },
    "Tab": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "unsupportedProp"
          },
          "required": false,
          "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the tab will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label element.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "You can provide your own value. Otherwise, we fallback to the child position index.",
          "tags": []
        },
        "wrapped": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Tab labels appear in a single row.\nThey can use a second line if needed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Tab",
      "styles": {
        "classes": [
          "root",
          "labelIcon",
          "textColorInherit",
          "textColorPrimary",
          "textColorSecondary",
          "selected",
          "disabled",
          "fullWidth",
          "wrapped",
          "wrapper"
        ],
        "name": "MuiTab",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "labelIcon": "Styles applied to the root element if both `icon` and `label` are provided.",
          "textColorInherit": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"inherit\"`.",
          "textColorPrimary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"primary\"`.",
          "textColorSecondary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"secondary\"`.",
          "selected": "Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component).",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component).",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component).",
          "wrapped": "Styles applied to the root element if `wrapped={true}`.",
          "wrapper": "Styles applied to the `icon` and `label`'s wrapper element."
        },
        "globalClasses": {
          "root": "MuiTab-root",
          "labelIcon": "MuiTab-labelIcon",
          "textColorInherit": "MuiTab-textColorInherit",
          "textColorPrimary": "MuiTab-textColorPrimary",
          "textColorSecondary": "MuiTab-textColorSecondary",
          "selected": "Mui-selected",
          "disabled": "Mui-disabled",
          "fullWidth": "MuiTab-fullWidth",
          "wrapped": "MuiTab-wrapped",
          "wrapper": "MuiTab-wrapper"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/Tab/Tab.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/tabs"
      ]
    },
    "Table": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the table, normally `TableHead` and `TableBody`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'table'",
            "computed": false
          },
          "tags": []
        },
        "padding": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'checkbox'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Allows TableCells to inherit padding of the Table.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Allows TableCells to inherit size of the Table.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "stickyHeader": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set the header sticky.\n\n⚠️ It doesn't work with IE 11.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Table",
      "styles": {
        "classes": [
          "root",
          "stickyHeader"
        ],
        "name": "MuiTable",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "stickyHeader": "Styles applied to the root element if `stickyHeader={true}`."
        },
        "globalClasses": {
          "root": "MuiTable-root",
          "stickyHeader": "MuiTable-stickyHeader"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLTableElement",
      "filename": "/packages/material-ui/src/Table/Table.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableBody": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally `TableRow`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'tbody'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableBody",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTableBody",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTableBody-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLTableSectionElement",
      "filename": "/packages/material-ui/src/TableBody/TableBody.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableCell": {
      "description": "The component renders a `<th>` element when the parent context is a header\nor otherwise a `<td>` element.",
      "methods": [],
      "props": {
        "align": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'justify'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set the text-align on the table cell content.\n\nMonetary or generally number fields **should be right aligned** as that allows\nyou to add them up quickly in your head without having to worry about decimals.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The table cell contents.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "tags": []
        },
        "padding": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'checkbox'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Sets the padding applied to the cell.\nBy default, the Table parent component set the value (`default`).",
          "tags": []
        },
        "scope": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Set scope attribute.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Specify the size of the cell.\nBy default, the Table parent component set the value (`medium`).",
          "tags": []
        },
        "sortDirection": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'asc'",
                "computed": false
              },
              {
                "value": "'desc'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set aria-sort direction.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'head'",
                "computed": false
              },
              {
                "value": "'body'",
                "computed": false
              },
              {
                "value": "'footer'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Specify the cell type.\nBy default, the TableHead, TableBody or TableFooter parent component set the value.",
          "tags": []
        }
      },
      "name": "TableCell",
      "styles": {
        "classes": [
          "root",
          "head",
          "body",
          "footer",
          "sizeSmall",
          "paddingCheckbox",
          "paddingNone",
          "alignLeft",
          "alignCenter",
          "alignRight",
          "alignJustify",
          "stickyHeader"
        ],
        "name": "MuiTableCell",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "head": "Styles applied to the root element if `variant=\"head\"` or `context.table.head`.",
          "body": "Styles applied to the root element if `variant=\"body\"` or `context.table.body`.",
          "footer": "Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "paddingCheckbox": "Styles applied to the root element if `padding=\"checkbox\"`.",
          "paddingNone": "Styles applied to the root element if `padding=\"none\"`.",
          "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
          "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
          "alignRight": "Styles applied to the root element if `align=\"right\"`.",
          "alignJustify": "Styles applied to the root element if `align=\"justify\"`.",
          "stickyHeader": "Styles applied to the root element if `context.table.stickyHeader={true}`."
        },
        "globalClasses": {
          "root": "MuiTableCell-root",
          "head": "MuiTableCell-head",
          "body": "MuiTableCell-body",
          "footer": "MuiTableCell-footer",
          "sizeSmall": "MuiTableCell-sizeSmall",
          "paddingCheckbox": "MuiTableCell-paddingCheckbox",
          "paddingNone": "MuiTableCell-paddingNone",
          "alignLeft": "MuiTableCell-alignLeft",
          "alignCenter": "MuiTableCell-alignCenter",
          "alignRight": "MuiTableCell-alignRight",
          "alignJustify": "MuiTableCell-alignJustify",
          "stickyHeader": "MuiTableCell-stickyHeader"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLTableCellElement",
      "filename": "/packages/material-ui/src/TableCell/TableCell.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableContainer": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The table itself, normally `<Table />`",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableContainer",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTableContainer",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTableContainer-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/TableContainer/TableContainer.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableFooter": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally `TableRow`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'tfoot'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableFooter",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTableFooter",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTableFooter-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLTableSectionElement",
      "filename": "/packages/material-ui/src/TableFooter/TableFooter.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableHead": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally `TableRow`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'thead'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableHead",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTableHead",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTableHead-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLTableSectionElement",
      "filename": "/packages/material-ui/src/TableHead/TableHead.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TablePagination": {
      "description": "A `TableCell` based component for placing inside `TableFooter` for pagination.",
      "methods": [],
      "props": {
        "ActionsComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for displaying the actions.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "TablePaginationActions",
            "computed": true
          },
          "tags": []
        },
        "backIconButtonProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the back arrow [`IconButton`](/api/icon-button/) component.",
          "tags": []
        },
        "backIconButtonText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Text label for the back arrow icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Previous page'",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "TableCell",
            "computed": true
          },
          "tags": []
        },
        "count": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The total number of rows.\n\nTo enable server side pagination for an unknown number of items, provide -1.",
          "tags": []
        },
        "labelDisplayedRows": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Customize the displayed rows label.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "({ from, to, count }) =>\n`${from}-${to === -1 ? count : to} of ${count !== -1 ? count : `more than ${to}`}`",
            "computed": false
          },
          "tags": []
        },
        "labelRowsPerPage": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Customize the rows per page label. Invoked with a `{ from, to, count, page }`\nobject.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Rows per page:'",
            "computed": false
          },
          "tags": []
        },
        "nextIconButtonProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the next arrow [`IconButton`](/api/icon-button/) element.",
          "tags": []
        },
        "nextIconButtonText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Text label for the next arrow icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
          "defaultValue": {
            "value": "'Next page'",
            "computed": false
          },
          "tags": []
        },
        "onChangePage": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when the page is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The page selected.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "page"
            }
          ]
        },
        "onChangeRowsPerPage": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the number of rows per page is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "page": {
          "type": {
            "name": "chained",
            "raw": "chainPropTypes(PropTypes.number.isRequired, props => {\n  const { count, page, rowsPerPage } = props;\n  const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n  if (page < 0 || page > newLastPage) {\n    return new Error(\n      'Material-UI: the page prop of a TablePagination is out of range ' +\n        `(0 to ${newLastPage}, but page is ${page}).`,\n    );\n  }\n  return null;\n})",
            "chained": {
              "name": "number"
            }
          },
          "required": false,
          "description": "The zero-based index of the current page.",
          "tags": []
        },
        "rowsPerPage": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The number of rows per page.",
          "tags": []
        },
        "rowsPerPageOptions": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "Customizes the options of the rows per page select field. If less than two options are\navailable, no select field will be displayed.",
          "defaultValue": {
            "value": "[10, 25, 50, 100]",
            "computed": false
          },
          "tags": []
        },
        "SelectProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the rows per page [`Select`](/api/select/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TablePagination",
      "styles": {
        "classes": [
          "root",
          "toolbar",
          "spacer",
          "caption",
          "selectRoot",
          "select",
          "selectIcon",
          "input",
          "menuItem",
          "actions"
        ],
        "name": "MuiTablePagination",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "toolbar": "Styles applied to the Toolbar component.",
          "spacer": "Styles applied to the spacer element.",
          "caption": "Styles applied to the caption Typography components if `variant=\"caption\"`.",
          "selectRoot": "Styles applied to the Select component root element.",
          "select": "Styles applied to the Select component `select` class.",
          "selectIcon": "Styles applied to the Select component `icon` class.",
          "input": "Styles applied to the `InputBase` component.",
          "menuItem": "Styles applied to the MenuItem component.",
          "actions": "Styles applied to the internal `TablePaginationActions` component."
        },
        "globalClasses": {
          "root": "MuiTablePagination-root",
          "toolbar": "MuiTablePagination-toolbar",
          "spacer": "MuiTablePagination-spacer",
          "caption": "MuiTablePagination-caption",
          "selectRoot": "MuiTablePagination-selectRoot",
          "select": "MuiTablePagination-select",
          "selectIcon": "MuiTablePagination-selectIcon",
          "input": "MuiTablePagination-input",
          "menuItem": "MuiTablePagination-menuItem",
          "actions": "MuiTablePagination-actions"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLTableCellElement",
      "filename": "/packages/material-ui/src/TablePagination/TablePagination.js",
      "inheritance": {
        "component": "TableCell",
        "pathname": "/api/table-cell"
      },
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableRow": {
      "description": "Will automatically set dynamic row height\nbased on the material table element parent (head, body, etc).",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Should be valid <tr> children such as `TableCell`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'tr'",
            "computed": false
          },
          "tags": []
        },
        "hover": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the table row will shade on hover.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the table row will have the selected shading.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableRow",
      "styles": {
        "classes": [
          "root",
          "selected",
          "hover",
          "head",
          "footer"
        ],
        "name": "MuiTableRow",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "selected": "Pseudo-class applied to the root element if `selected={true}`.",
          "hover": "Pseudo-class applied to the root element if `hover={true}`.",
          "head": "Styles applied to the root element if table variant=\"head\".",
          "footer": "Styles applied to the root element if table variant=\"footer\"."
        },
        "globalClasses": {
          "root": "MuiTableRow-root",
          "selected": "Mui-selected",
          "hover": "MuiTableRow-hover",
          "head": "MuiTableRow-head",
          "footer": "MuiTableRow-footer"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLTableRowElement",
      "filename": "/packages/material-ui/src/TableRow/TableRow.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableSortLabel": {
      "description": "A button based label for placing inside `TableCell` for column sorting.",
      "methods": [],
      "props": {
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will have the active styling (should be true for the sorted column).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Label contents, the arrow will be appended automatically.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'asc'",
                "computed": false
              },
              {
                "value": "'desc'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The current sort direction.",
          "defaultValue": {
            "value": "'asc'",
            "computed": false
          },
          "tags": []
        },
        "hideSortIcon": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Hide sort icon when active is false.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "IconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "Sort icon to use.",
          "defaultValue": {
            "value": "ArrowDownwardIcon",
            "computed": true
          },
          "tags": []
        }
      },
      "name": "TableSortLabel",
      "styles": {
        "classes": [
          "root",
          "active",
          "icon",
          "iconDirectionDesc",
          "iconDirectionAsc"
        ],
        "name": "MuiTableSortLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "active": "Pseudo-class applied to the root element if `active={true}`.",
          "icon": "Styles applied to the icon component.",
          "iconDirectionDesc": "Styles applied to the icon component if `direction=\"desc\"`.",
          "iconDirectionAsc": "Styles applied to the icon component if `direction=\"asc\"`."
        },
        "globalClasses": {
          "root": "MuiTableSortLabel-root",
          "active": "MuiTableSortLabel-active",
          "icon": "MuiTableSortLabel-icon",
          "iconDirectionDesc": "MuiTableSortLabel-iconDirectionDesc",
          "iconDirectionAsc": "MuiTableSortLabel-iconDirectionAsc"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/TableSortLabel/TableSortLabel.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/tables"
      ]
    },
    "Tabs": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Callback fired when the component mounts.\nThis is useful when you want to trigger an action programmatically.\nIt supports two actions: `updateIndicator()` and `updateScrollButtons()`",
          "tags": [
            {
              "title": "param",
              "description": "This object contains all possible actions\nthat can be triggered programmatically.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "actions"
            }
          ]
        },
        "centered": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the tabs will be centered.\nThis property is intended for large views.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "indicatorColor": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determines the color of the indicator.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "We default to the index of the child (number)",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The tabs orientation (layout flow direction).",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        },
        "ScrollButtonComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the scroll buttons.",
          "defaultValue": {
            "value": "TabScrollButton",
            "computed": true
          },
          "tags": []
        },
        "scrollButtons": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "'desktop'",
                "computed": false
              },
              {
                "value": "'on'",
                "computed": false
              },
              {
                "value": "'off'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine behavior of scroll buttons when tabs are set to scroll:\n\n- `auto` will only present them when not all the items are visible.\n- `desktop` will only present them on medium and larger viewports.\n- `on` will always present them.\n- `off` will never present them.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "TabIndicatorProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the tab indicator element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "textColor": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determines the color of the `Tab`.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the currently selected `Tab`.\nIf you don't want any selected `Tab`, you can set this property to `false`.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'scrollable'",
                "computed": false
              },
              {
                "value": "'fullWidth'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determines additional display behavior of the tabs:\n\n - `scrollable` will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the tab bar.\n -`fullWidth` will make the tabs grow to use all the available space,\n which should be used for small views, like on mobile.\n - `standard` will render the default state.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Tabs",
      "styles": {
        "classes": [
          "root",
          "vertical",
          "flexContainer",
          "flexContainerVertical",
          "centered",
          "scroller",
          "fixed",
          "scrollable",
          "scrollButtons",
          "scrollButtonsDesktop",
          "indicator"
        ],
        "name": "MuiTabs",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "flexContainer": "Styles applied to the flex container element.",
          "flexContainerVertical": "Styles applied to the flex container element if `orientation=\"vertical\"`.",
          "centered": "Styles applied to the flex container element if `centered={true}` & `!variant=\"scrollable\"`.",
          "scroller": "Styles applied to the tablist element.",
          "fixed": "Styles applied to the tablist element if `!variant=\"scrollable\"`\b\b\b.",
          "scrollable": "Styles applied to the tablist element if `variant=\"scrollable\"`.",
          "scrollButtons": "Styles applied to the `ScrollButtonComponent` component.",
          "scrollButtonsDesktop": "Styles applied to the `ScrollButtonComponent` component if `scrollButtons=\"auto\"` or scrollButtons=\"desktop\"`.",
          "indicator": "Styles applied to the `TabIndicator` component."
        },
        "globalClasses": {
          "root": "MuiTabs-root",
          "vertical": "MuiTabs-vertical",
          "flexContainer": "MuiTabs-flexContainer",
          "flexContainerVertical": "MuiTabs-flexContainerVertical",
          "centered": "MuiTabs-centered",
          "scroller": "MuiTabs-scroller",
          "fixed": "MuiTabs-fixed",
          "scrollable": "MuiTabs-scrollable",
          "scrollButtons": "MuiTabs-scrollButtons",
          "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
          "indicator": "MuiTabs-indicator"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Tabs/Tabs.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tabs"
      ]
    },
    "TextField": {
      "description": "The `TextField` is a convenience wrapper for the most common cases (80%).\nIt cannot be all things to all people, otherwise the API would grow out of control.\n\n## Advanced Configuration\n\nIt's important to understand that the text field is a simple abstraction\non top of the following components:\n\n- [FormControl](/api/form-control/)\n- [InputLabel](/api/input-label/)\n- [FilledInput](/api/filled-input/)\n- [OutlinedInput](/api/outlined-input/)\n- [Input](/api/input/)\n- [FormHelperText](/api/form-helper-text/)\n\nIf you wish to alter the props applied to the `input` element, you can do so as follows:\n\n```jsx\nconst inputProps = {\n  step: 300,\n};\n\nreturn <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n```\n\nFor advanced cases, please look at the source of TextField by clicking on the\n\"Edit this page\" button above. Consider either:\n\n- using the upper case props for passing values directly to the components\n- using the underlying components directly as shown in the demos",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default value of the `input` element.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will be displayed in an error state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "FormHelperTextProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "helperText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The helper text content.",
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
          "tags": []
        },
        "InputLabelProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
          "tags": []
        },
        "InputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the Input element.\nIt will be a [`FilledInput`](/api/filled-input/),\n[`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\ncomponent depending on the `variant` prop value.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label content.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'none'",
                "computed": false
              },
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'normal'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered instead of an input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "select": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "SelectProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Select`](/api/select/) element.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the text field.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TextField",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTextField",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTextField-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/TextField/TextField.js",
      "inheritance": {
        "component": "FormControl",
        "pathname": "/api/form-control"
      },
      "usedInPages": [
        "/components/autocomplete",
        "/components/pickers",
        "/components/text-fields"
      ]
    },
    "TextareaAutosize": {
      "description": "",
      "methods": [],
      "props": {
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Use `rowsMin` instead. The prop will be removed in v5.",
          "tags": [
            {
              "title": "deprecated",
              "description": null
            }
          ]
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display.",
          "tags": []
        },
        "rowsMin": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Minimum number of rows to display.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TextareaAutosize",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLTextAreaElement",
      "filename": "/packages/material-ui/src/TextareaAutosize/TextareaAutosize.js",
      "inheritance": null,
      "usedInPages": [
        "/components/textarea-autosize"
      ]
    },
    "ToggleButton": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be rendered in an active state.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": true,
          "description": "The value to associate with the button when selected in a\nToggleButtonGroup.",
          "tags": []
        }
      },
      "name": "ToggleButton",
      "styles": {
        "classes": [
          "root",
          "disabled",
          "selected",
          "label",
          "sizeSmall",
          "sizeLarge"
        ],
        "name": "MuiToggleButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "selected": "Pseudo-class applied to the root element if `selected={true}`.",
          "label": "Styles applied to the `label` wrapper element.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "sizeLarge": "Styles applied to the root element if `size=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiToggleButton-root",
          "disabled": "Mui-disabled",
          "selected": "Mui-selected",
          "label": "MuiToggleButton-label",
          "sizeSmall": "MuiToggleButton-sizeSmall",
          "sizeLarge": "MuiToggleButton-sizeLarge"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui-lab/src/ToggleButton/ToggleButton.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/toggle-button"
      ]
    },
    "ToggleButtonGroup": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "exclusive": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, only allow one of the child ToggleButton values to be selected.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "of the selected buttons. When `exclusive` is true\nthis is a single value; when false an array of selected values. If no value\nis selected and `exclusive` is true the value is null; when false an empty array.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'large'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the buttons.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The currently selected value within the group or an array of selected\nvalues when `exclusive` is false.",
          "tags": []
        }
      },
      "name": "ToggleButtonGroup",
      "styles": {
        "classes": [
          "root",
          "grouped",
          "groupedSizeSmall",
          "groupedSizeLarge"
        ],
        "name": "MuiToggleButtonGroup",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "grouped": "Styles applied to the children.",
          "groupedSizeSmall": "Styles applied to the children if `size=\"small\"`.",
          "groupedSizeLarge": "Styles applied to the children if `size=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiToggleButtonGroup-root",
          "grouped": "MuiToggleButtonGroup-grouped",
          "groupedSizeSmall": "MuiToggleButtonGroup-groupedSizeSmall",
          "groupedSizeLarge": "MuiToggleButtonGroup-groupedSizeLarge"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/ToggleButtonGroup/ToggleButtonGroup.js",
      "inheritance": null,
      "usedInPages": [
        "/components/toggle-button"
      ]
    },
    "Toolbar": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, disables gutter padding.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'regular'",
                "computed": false
              },
              {
                "value": "'dense'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'regular'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Toolbar",
      "styles": {
        "classes": [
          "root",
          "gutters",
          "regular",
          "dense"
        ],
        "name": "MuiToolbar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "gutters": "Styles applied to the root element if `disableGutters={false}`.",
          "regular": "Styles applied to the root element if `variant=\"regular\"`.",
          "dense": "Styles applied to the root element if `variant=\"dense\"`."
        },
        "globalClasses": {
          "root": "MuiToolbar-root",
          "gutters": "MuiToolbar-gutters",
          "regular": "MuiToolbar-regular",
          "dense": "MuiToolbar-dense"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Toolbar/Toolbar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/app-bar"
      ]
    },
    "Tooltip": {
      "description": "",
      "methods": [],
      "props": {
        "arrow": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, adds an arrow to the tooltip.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef.isRequired"
          },
          "required": false,
          "description": "Tooltip reference element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableFocusListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Do not respond to focus events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableHoverListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Do not respond to hover events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableTouchListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Do not respond to long press touch events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "enterDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before showing the tooltip.\nThis prop won't impact the enter touch delay (`enterTouchDelay`).",
          "defaultValue": {
            "value": "200",
            "computed": false
          },
          "tags": []
        },
        "enterNextDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before showing the tooltip when one was already recently opened.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "enterTouchDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds a user must touch the element before showing the tooltip.",
          "defaultValue": {
            "value": "700",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
          "tags": []
        },
        "interactive": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Makes a tooltip interactive, i.e. will not close when the user\nhovers over the tooltip before the `leaveDelay` is expired.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "leaveDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before hiding the tooltip.\nThis prop won't impact the leave touch delay (`leaveTouchDelay`).",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "leaveTouchDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
          "defaultValue": {
            "value": "1500",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be open.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the tooltip is shown.",
          "tags": []
        },
        "placement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom-end'",
                "computed": false
              },
              {
                "value": "'bottom-start'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left-end'",
                "computed": false
              },
              {
                "value": "'left-start'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right-end'",
                "computed": false
              },
              {
                "value": "'right-start'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top-end'",
                "computed": false
              },
              {
                "value": "'top-start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Tooltip placement.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        },
        "PopperProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Popper`](/api/popper/) element.",
          "tags": []
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Tooltip title. Zero-length titles string are never displayed.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Grow",
            "computed": true
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "tags": []
        }
      },
      "name": "Tooltip",
      "styles": {
        "classes": [
          "popper",
          "popperInteractive",
          "popperArrow",
          "tooltip",
          "tooltipArrow",
          "arrow",
          "touch",
          "tooltipPlacementLeft",
          "tooltipPlacementRight",
          "tooltipPlacementTop",
          "tooltipPlacementBottom"
        ],
        "name": "MuiTooltip",
        "descriptions": {
          "popper": "Styles applied to the Popper component.",
          "popperInteractive": "Styles applied to the Popper component if `interactive={true}`.",
          "popperArrow": "Styles applied to the Popper component if `arrow={true}`.",
          "tooltip": "Styles applied to the tooltip (label wrapper) element.",
          "tooltipArrow": "Styles applied to the tooltip (label wrapper) element if `arrow={true}`.",
          "arrow": "Styles applied to the arrow element.",
          "touch": "Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch.",
          "tooltipPlacementLeft": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"left\".",
          "tooltipPlacementRight": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"right\".",
          "tooltipPlacementTop": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"top\".",
          "tooltipPlacementBottom": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"bottom\"."
        },
        "globalClasses": {
          "popper": "MuiTooltip-popper",
          "popperInteractive": "MuiTooltip-popperInteractive",
          "popperArrow": "MuiTooltip-popperArrow",
          "tooltip": "MuiTooltip-tooltip",
          "tooltipArrow": "MuiTooltip-tooltipArrow",
          "arrow": "MuiTooltip-arrow",
          "touch": "MuiTooltip-touch",
          "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
          "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
          "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
          "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/Tooltip/Tooltip.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tooltips"
      ]
    },
    "TreeItem": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "collapseIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon used to collapse the node.",
          "tags": []
        },
        "endIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon displayed next to a end node.",
          "tags": []
        },
        "expandIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon used to expand the node.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display next to the tree node's label.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The tree node label.",
          "tags": []
        },
        "nodeId": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The id of the node.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
          "defaultValue": {
            "value": "Collapse",
            "computed": true
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.",
          "tags": []
        }
      },
      "name": "TreeItem",
      "styles": {
        "classes": [
          "root",
          "expanded",
          "selected",
          "group",
          "content",
          "iconContainer",
          "label"
        ],
        "name": "MuiTreeItem",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "expanded": "Pseudo-class applied to the root element when expanded.",
          "selected": "Pseudo-class applied to the root element when selected.",
          "group": "Styles applied to the `role=\"group\"` element.",
          "content": "Styles applied to the tree node content.",
          "iconContainer": "Styles applied to the tree node icon and collapse/expand icon.",
          "label": "Styles applied to the label element."
        },
        "globalClasses": {
          "root": "MuiTreeItem-root",
          "expanded": "Mui-expanded",
          "selected": "Mui-selected",
          "group": "MuiTreeItem-group",
          "content": "MuiTreeItem-content",
          "iconContainer": "MuiTreeItem-iconContainer",
          "label": "MuiTreeItem-label"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui-lab/src/TreeItem/TreeItem.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tree-view"
      ]
    },
    "TreeView": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "defaultCollapseIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon used to collapse the node.",
          "tags": []
        },
        "defaultEndIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon displayed next to a end node. This is applied to all\ntree nodes and can be overridden by the TreeItem `icon` prop.",
          "tags": []
        },
        "defaultExpanded": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "Expanded node ids. (Uncontrolled)",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "tags": []
        },
        "defaultExpandIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon used to expand the node.",
          "tags": []
        },
        "defaultParentIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon displayed next to a parent node. This is applied to all\nparent nodes and can be overridden by the TreeItem `icon` prop.",
          "tags": []
        },
        "defaultSelected": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Selected node ids. (Uncontrolled)\nWhen `multiSelect` is true this takes an array of strings; when false (default) a string.",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "tags": []
        },
        "disableSelection": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true` selection is disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "expanded": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "Expanded node ids. (Controlled)",
          "tags": []
        },
        "multiSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true `ctrl` and `shift` will trigger multiselect.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onNodeSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when tree items are selected/unselected.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "of the selected nodes. When `multiSelect` is true\nthis is an array of strings; when false (default) a string.",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "array"
                  },
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              },
              "name": "value"
            }
          ]
        },
        "onNodeToggle": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when tree items are expanded/collapsed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The ids of the expanded nodes.",
              "type": {
                "type": "NameExpression",
                "name": "array"
              },
              "name": "nodeIds"
            }
          ]
        },
        "selected": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Selected node ids. (Controlled)\nWhen `multiSelect` is true this takes an array of strings; when false (default) a string.",
          "tags": []
        }
      },
      "name": "TreeView",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTreeView",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTreeView-root"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui-lab/src/TreeView/TreeView.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tree-view"
      ]
    },
    "Typography": {
      "description": "",
      "methods": [],
      "props": {
        "align": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'justify'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set the text-align on the component.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'initial'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'textPrimary'",
                "computed": false
              },
              {
                "value": "'textSecondary'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'initial'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nOverrides the behavior of the `variantMapping` prop.",
          "tags": []
        },
        "display": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'initial'",
                "computed": false
              },
              {
                "value": "'block'",
                "computed": false
              },
              {
                "value": "'inline'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Controls the display type",
          "defaultValue": {
            "value": "'initial'",
            "computed": false
          },
          "tags": []
        },
        "gutterBottom": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the text will have a bottom margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "noWrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n\nNote that text overflow can only happen with block or inline-block level elements\n(the element needs to have a width in order to overflow).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "paragraph": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the text will have a bottom margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'h1'",
                "computed": false
              },
              {
                "value": "'h2'",
                "computed": false
              },
              {
                "value": "'h3'",
                "computed": false
              },
              {
                "value": "'h4'",
                "computed": false
              },
              {
                "value": "'h5'",
                "computed": false
              },
              {
                "value": "'h6'",
                "computed": false
              },
              {
                "value": "'subtitle1'",
                "computed": false
              },
              {
                "value": "'subtitle2'",
                "computed": false
              },
              {
                "value": "'body1'",
                "computed": false
              },
              {
                "value": "'body2'",
                "computed": false
              },
              {
                "value": "'caption'",
                "computed": false
              },
              {
                "value": "'button'",
                "computed": false
              },
              {
                "value": "'overline'",
                "computed": false
              },
              {
                "value": "'srOnly'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Applies the theme typography styles.",
          "defaultValue": {
            "value": "'body1'",
            "computed": false
          },
          "tags": []
        },
        "variantMapping": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "The component maps the variant prop to a range of different DOM element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` prop.",
          "defaultValue": {
            "value": "{\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Typography",
      "styles": {
        "classes": [
          "root",
          "body2",
          "body1",
          "caption",
          "button",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6",
          "subtitle1",
          "subtitle2",
          "overline",
          "srOnly",
          "alignLeft",
          "alignCenter",
          "alignRight",
          "alignJustify",
          "noWrap",
          "gutterBottom",
          "paragraph",
          "colorInherit",
          "colorPrimary",
          "colorSecondary",
          "colorTextPrimary",
          "colorTextSecondary",
          "colorError",
          "displayInline",
          "displayBlock"
        ],
        "name": "MuiTypography",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "body2": "Styles applied to the root element if `variant=\"body2\"`.",
          "body1": "Styles applied to the root element if `variant=\"body1\"`.",
          "caption": "Styles applied to the root element if `variant=\"caption\"`.",
          "button": "Styles applied to the root element if `variant=\"button\"`.",
          "h1": "Styles applied to the root element if `variant=\"h1\"`.",
          "h2": "Styles applied to the root element if `variant=\"h2\"`.",
          "h3": "Styles applied to the root element if `variant=\"h3\"`.",
          "h4": "Styles applied to the root element if `variant=\"h4\"`.",
          "h5": "Styles applied to the root element if `variant=\"h5\"`.",
          "h6": "Styles applied to the root element if `variant=\"h6\"`.",
          "subtitle1": "Styles applied to the root element if `variant=\"subtitle1\"`.",
          "subtitle2": "Styles applied to the root element if `variant=\"subtitle2\"`.",
          "overline": "Styles applied to the root element if `variant=\"overline\"`.",
          "srOnly": "Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers.",
          "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
          "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
          "alignRight": "Styles applied to the root element if `align=\"right\"`.",
          "alignJustify": "Styles applied to the root element if `align=\"justify\"`.",
          "noWrap": "Styles applied to the root element if `nowrap={true}`.",
          "gutterBottom": "Styles applied to the root element if `gutterBottom={true}`.",
          "paragraph": "Styles applied to the root element if `paragraph={true}`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorTextPrimary": "Styles applied to the root element if `color=\"textPrimary\"`.",
          "colorTextSecondary": "Styles applied to the root element if `color=\"textSecondary\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "displayInline": "Styles applied to the root element if `display=\"inline\"`.",
          "displayBlock": "Styles applied to the root element if `display=\"block\"`."
        },
        "globalClasses": {
          "root": "MuiTypography-root",
          "body2": "MuiTypography-body2",
          "body1": "MuiTypography-body1",
          "caption": "MuiTypography-caption",
          "button": "MuiTypography-button",
          "h1": "MuiTypography-h1",
          "h2": "MuiTypography-h2",
          "h3": "MuiTypography-h3",
          "h4": "MuiTypography-h4",
          "h5": "MuiTypography-h5",
          "h6": "MuiTypography-h6",
          "subtitle1": "MuiTypography-subtitle1",
          "subtitle2": "MuiTypography-subtitle2",
          "overline": "MuiTypography-overline",
          "srOnly": "MuiTypography-srOnly",
          "alignLeft": "MuiTypography-alignLeft",
          "alignCenter": "MuiTypography-alignCenter",
          "alignRight": "MuiTypography-alignRight",
          "alignJustify": "MuiTypography-alignJustify",
          "noWrap": "MuiTypography-noWrap",
          "gutterBottom": "MuiTypography-gutterBottom",
          "paragraph": "MuiTypography-paragraph",
          "colorInherit": "MuiTypography-colorInherit",
          "colorPrimary": "MuiTypography-colorPrimary",
          "colorSecondary": "MuiTypography-colorSecondary",
          "colorTextPrimary": "MuiTypography-colorTextPrimary",
          "colorTextSecondary": "MuiTypography-colorTextSecondary",
          "colorError": "MuiTypography-colorError",
          "displayInline": "MuiTypography-displayInline",
          "displayBlock": "MuiTypography-displayBlock"
        }
      },
      "spread": true,
      "forwardsRefTo": "HTMLParagraphElement",
      "filename": "/packages/material-ui/src/Typography/Typography.js",
      "inheritance": null,
      "usedInPages": [
        "/components/breadcrumbs",
        "/components/typography"
      ]
    },
    "Zoom": {
      "description": "The Zoom transition can be used for the floating variant of the\n[Button](/components/buttons/#floating-action-buttons) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will transition in.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Zoom",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "spread": true,
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Zoom/Zoom.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/transitions"
      ]
    }
  }
}
