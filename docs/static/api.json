{
  "components": {
    "AppBar": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "position": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'absolute'",
                "computed": false
              },
              {
                "value": "'fixed'",
                "computed": false
              },
              {
                "value": "'relative'",
                "computed": false
              },
              {
                "value": "'static'",
                "computed": false
              },
              {
                "value": "'sticky'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The positioning type. The behavior of the different options is described\n[in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\nNote: `sticky` is not universally supported and will fall back to `static` when unavailable.",
          "defaultValue": {
            "value": "'fixed'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "AppBar",
      "styles": {
        "classes": [
          "root",
          "positionFixed",
          "positionAbsolute",
          "positionSticky",
          "positionStatic",
          "positionRelative",
          "colorDefault",
          "colorPrimary",
          "colorSecondary"
        ],
        "name": "MuiAppBar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "positionFixed": "Styles applied to the root element if `position=\"fixed\"`.",
          "positionAbsolute": "Styles applied to the root element if `position=\"absolute\"`.",
          "positionSticky": "Styles applied to the root element if `position=\"sticky\"`.",
          "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
          "positionRelative": "Styles applied to the root element if `position=\"relative\"`.",
          "colorDefault": "Styles applied to the root element if `color=\"default\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
        },
        "globalClasses": {
          "root": "MuiAppBar-root",
          "positionFixed": "MuiAppBar-positionFixed",
          "positionAbsolute": "MuiAppBar-positionAbsolute",
          "positionSticky": "MuiAppBar-positionSticky",
          "positionStatic": "MuiAppBar-positionStatic",
          "positionRelative": "MuiAppBar-positionRelative",
          "colorDefault": "MuiAppBar-colorDefault",
          "colorPrimary": "MuiAppBar-colorPrimary",
          "colorSecondary": "MuiAppBar-colorSecondary"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\n\nexport const styles = theme => {\n  const backgroundColorDefault =\n    theme.palette.type === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      boxSizing: 'border-box', // Prevent padding issue with the Modal and fixed positioned AppBar.\n      zIndex: theme.zIndex.appBar,\n      flexShrink: 0,\n    },\n    /* Styles applied to the root element if `position=\"fixed\"`. */\n    positionFixed: {\n      position: 'fixed',\n      top: 0,\n      left: 'auto',\n      right: 0,\n    },\n    /* Styles applied to the root element if `position=\"absolute\"`. */\n    positionAbsolute: {\n      position: 'absolute',\n      top: 0,\n      left: 'auto',\n      right: 0,\n    },\n    /* Styles applied to the root element if `position=\"sticky\"`. */\n    positionSticky: {\n      // ⚠️ sticky is not supported by IE 11.\n      position: 'sticky',\n      top: 0,\n      left: 'auto',\n      right: 0,\n    },\n    /* Styles applied to the root element if `position=\"static\"`. */\n    positionStatic: {\n      position: 'static',\n      transform: 'translateZ(0)', // Make sure we can see the elevation.\n    },\n    /* Styles applied to the root element if `position=\"relative\"`. */\n    positionRelative: {\n      position: 'relative',\n    },\n    /* Styles applied to the root element if `color=\"default\"`. */\n    colorDefault: {\n      backgroundColor: backgroundColorDefault,\n      color: theme.palette.getContrastText(backgroundColorDefault),\n    },\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText,\n    },\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n  };\n};\n\nconst AppBar = React.forwardRef(function AppBar(props, ref) {\n  const { classes, className, color = 'primary', position = 'fixed', ...other } = props;\n\n  return (\n    <Paper\n      square\n      component=\"header\"\n      elevation={4}\n      className={clsx(\n        classes.root,\n        classes[`position${capitalize(position)}`],\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'inherit',\n          'mui-fixed': position === 'fixed', // Useful for the Dialog\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nAppBar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n  /**\n   * The positioning type. The behavior of the different options is described\n   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\n   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.\n   */\n  position: PropTypes.oneOf(['absolute', 'fixed', 'relative', 'static', 'sticky']),\n};\n\nexport default withStyles(styles, { name: 'MuiAppBar' })(AppBar);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLElement",
      "filename": "/packages/material-ui/src/AppBar/AppBar.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/app-bar"
      ]
    },
    "Avatar": {
      "description": "",
      "methods": [],
      "props": {
        "alt": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Used to render icon or text elements inside the Avatar if `src` is not set.\nThis can be an element, or just a string.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "imgProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Attributes applied to the `img` element if the component\nis used to display an image.",
          "tags": []
        },
        "sizes": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The `sizes` attribute for the `img` element.",
          "tags": []
        },
        "src": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The `src` attribute for the `img` element.",
          "tags": []
        },
        "srcSet": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The `srcSet` attribute for the `img` element.",
          "tags": []
        }
      },
      "name": "Avatar",
      "styles": {
        "classes": [
          "root",
          "colorDefault",
          "img"
        ],
        "name": "MuiAvatar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorDefault": "Styles applied to the root element if there are children and not `src` or `srcSet`.",
          "img": "Styles applied to the img element if either `src` or `srcSet` is defined."
        },
        "globalClasses": {
          "root": "MuiAvatar-root",
          "colorDefault": "MuiAvatar-colorDefault",
          "img": "MuiAvatar-img"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexShrink: 0,\n    width: 40,\n    height: 40,\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(20),\n    lineHeight: 1,\n    borderRadius: '50%',\n    overflow: 'hidden',\n    userSelect: 'none',\n  },\n  /* Styles applied to the root element if there are children and not `src` or `srcSet`. */\n  colorDefault: {\n    color: theme.palette.background.default,\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600],\n  },\n  /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n  img: {\n    width: '100%',\n    height: '100%',\n    textAlign: 'center',\n    // Handle non-square image. The property isn't supported by IE 11.\n    objectFit: 'cover',\n  },\n});\n\nconst Avatar = React.forwardRef(function Avatar(props, ref) {\n  const {\n    alt,\n    children: childrenProp,\n    classes,\n    className,\n    component: Component = 'div',\n    imgProps,\n    sizes,\n    src,\n    srcSet,\n    ...other\n  } = props;\n\n  let children = null;\n  const img = src || srcSet;\n\n  if (img) {\n    children = (\n      <img\n        alt={alt}\n        src={src}\n        srcSet={srcSet}\n        sizes={sizes}\n        className={classes.img}\n        {...imgProps}\n      />\n    );\n  } else {\n    children = childrenProp;\n  }\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        classes.system,\n        {\n          [classes.colorDefault]: !img,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {children}\n    </Component>\n  );\n});\n\nAvatar.propTypes = {\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Attributes applied to the `img` element if the component\n   * is used to display an image.\n   */\n  imgProps: PropTypes.object,\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n  /**\n   * The `srcSet` attribute for the `img` element.\n   */\n  srcSet: PropTypes.string,\n};\n\nexport default withStyles(styles, { name: 'MuiAvatar' })(Avatar);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Avatar/Avatar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/avatars"
      ]
    },
    "Backdrop": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "invisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the backdrop is invisible.\nIt can be used when rendering a popover or a custom select component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the backdrop is open.",
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "appear": {
                    "name": "number",
                    "required": false
                  },
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "tags": []
        }
      },
      "name": "Backdrop",
      "styles": {
        "classes": [
          "root",
          "invisible"
        ],
        "name": "MuiBackdrop",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "invisible": "Styles applied to the root element if `invisible={true}`."
        },
        "globalClasses": {
          "root": "MuiBackdrop-root",
          "invisible": "MuiBackdrop-invisible"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Fade from '../Fade';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    zIndex: -1,\n    position: 'fixed',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    // Disable scroll capabilities.\n    touchAction: 'none',\n  },\n  /* Styles applied to the root element if `invisible={true}`. */\n  invisible: {\n    backgroundColor: 'transparent',\n  },\n};\n\nconst Backdrop = React.forwardRef(function Backdrop(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    invisible = false,\n    open,\n    transitionDuration,\n    ...other\n  } = props;\n\n  return (\n    <Fade in={open} timeout={transitionDuration} {...other}>\n      <div\n        data-mui-test=\"Backdrop\"\n        className={clsx(\n          classes.root,\n          {\n            [classes.invisible]: invisible,\n          },\n          className,\n        )}\n        aria-hidden\n        ref={ref}\n      >\n        {children}\n      </div>\n    </Fade>\n  );\n});\n\nBackdrop.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the backdrop is invisible.\n   * It can be used when rendering a popover or a custom select component.\n   */\n  invisible: PropTypes.bool,\n  /**\n   * If `true`, the backdrop is open.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      appear: PropTypes.number,\n      enter: PropTypes.number,\n      exit: PropTypes.number,\n    }),\n  ]),\n};\n\nexport default withStyles(styles, { name: 'MuiBackdrop' })(Backdrop);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Backdrop/Backdrop.js",
      "inheritance": null,
      "usedInPages": []
    },
    "Badge": {
      "description": "",
      "methods": [],
      "props": {
        "anchorOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "enum",
                "value": [
                  {
                    "value": "'left'",
                    "computed": false
                  },
                  {
                    "value": "'right'",
                    "computed": false
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "enum",
                "value": [
                  {
                    "value": "'bottom'",
                    "computed": false
                  },
                  {
                    "value": "'top'",
                    "computed": false
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "The anchor of the badge.",
          "defaultValue": {
            "value": "{\n  vertical: 'top',\n  horizontal: 'right',\n}",
            "computed": false
          },
          "tags": []
        },
        "badgeContent": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content rendered within the badge.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The badge will be added relative to this node.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "invisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the badge will be invisible.",
          "tags": []
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Max count to show.",
          "defaultValue": {
            "value": "99",
            "computed": false
          },
          "tags": []
        },
        "overlap": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'circle'",
                "computed": false
              },
              {
                "value": "'rectangle'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Wrapped shape the badge should overlap.",
          "defaultValue": {
            "value": "'rectangle'",
            "computed": false
          },
          "tags": []
        },
        "showZero": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Controls whether the badge is hidden when `badgeContent` is zero.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dot'",
                "computed": false
              },
              {
                "value": "'standard'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Badge",
      "styles": {
        "classes": [
          "root",
          "badge",
          "colorPrimary",
          "colorSecondary",
          "colorError",
          "dot",
          "anchorOriginTopRightRectangle",
          "anchorOriginBottomRightRectangle",
          "anchorOriginTopLeftRectangle",
          "anchorOriginBottomLeftRectangle",
          "anchorOriginTopRightCircle",
          "anchorOriginBottomRightCircle",
          "anchorOriginTopLeftCircle",
          "anchorOriginBottomLeftCircle",
          "invisible"
        ],
        "name": "MuiBadge",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "badge": "Styles applied to the badge `span` element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "dot": "Styles applied to the root element if `variant=\"dot\"`.",
          "anchorOriginTopRightRectangle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"rectangle\"`.",
          "anchorOriginBottomRightRectangle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangle\"`.",
          "anchorOriginTopLeftRectangle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"rectangle\"`.",
          "anchorOriginBottomLeftRectangle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangle\"`.",
          "anchorOriginTopRightCircle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"circle\"`.",
          "anchorOriginBottomRightCircle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"circle\"`.",
          "anchorOriginTopLeftCircle": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"circle\"`.",
          "anchorOriginBottomLeftCircle": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"circle\"`.",
          "invisible": "Pseudo-class to the badge `span` element if `invisible={true}`."
        },
        "globalClasses": {
          "root": "MuiBadge-root",
          "badge": "MuiBadge-badge",
          "colorPrimary": "MuiBadge-colorPrimary",
          "colorSecondary": "MuiBadge-colorSecondary",
          "colorError": "MuiBadge-colorError",
          "dot": "MuiBadge-dot",
          "anchorOriginTopRightRectangle": "MuiBadge-anchorOriginTopRightRectangle",
          "anchorOriginBottomRightRectangle": "MuiBadge-anchorOriginBottomRightRectangle",
          "anchorOriginTopLeftRectangle": "MuiBadge-anchorOriginTopLeftRectangle",
          "anchorOriginBottomLeftRectangle": "MuiBadge-anchorOriginBottomLeftRectangle",
          "anchorOriginTopRightCircle": "MuiBadge-anchorOriginTopRightCircle",
          "anchorOriginBottomRightCircle": "MuiBadge-anchorOriginBottomRightCircle",
          "anchorOriginTopLeftCircle": "MuiBadge-anchorOriginTopLeftCircle",
          "anchorOriginBottomLeftCircle": "MuiBadge-anchorOriginBottomLeftCircle",
          "invisible": "MuiBadge-invisible"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nconst RADIUS_STANDARD = 10;\nconst RADIUS_DOT = 3;\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'inline-flex',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    flexShrink: 0,\n  },\n  /* Styles applied to the badge `span` element. */\n  badge: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    boxSizing: 'border-box',\n    fontFamily: theme.typography.fontFamily,\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.pxToRem(12),\n    minWidth: RADIUS_STANDARD * 2,\n    lineHeight: 1,\n    padding: '0 6px',\n    height: RADIUS_STANDARD * 2,\n    borderRadius: RADIUS_STANDARD,\n    backgroundColor: theme.palette.color,\n    color: theme.palette.textColor,\n    zIndex: 1, // Render the badge on top of potential ripples.\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    backgroundColor: theme.palette.secondary.main,\n    color: theme.palette.secondary.contrastText,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n  /* Styles applied to the root element if `variant=\"dot\"`. */\n  dot: {\n    height: RADIUS_DOT * 2,\n    minWidth: RADIUS_DOT * 2,\n    padding: 0,\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"rectangle\"`. */\n  anchorOriginTopRightRectangle: {\n    top: 0,\n    right: 0,\n    transform: 'scale(1) translate(50%, -50%)',\n    transformOrigin: '100% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangle\"`. */\n  anchorOriginBottomRightRectangle: {\n    bottom: 0,\n    right: 0,\n    transform: 'scale(1) translate(50%, 50%)',\n    transformOrigin: '100% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, 50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"rectangle\"`. */\n  anchorOriginTopLeftRectangle: {\n    top: 0,\n    left: 0,\n    transform: 'scale(1) translate(-50%, -50%)',\n    transformOrigin: '0% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangle\"`. */\n  anchorOriginBottomLeftRectangle: {\n    bottom: 0,\n    left: 0,\n    transform: 'scale(1) translate(-50%, 50%)',\n    transformOrigin: '0% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, 50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap=\"circle\"`. */\n  anchorOriginTopRightCircle: {\n    top: '14%',\n    right: '14%',\n    transform: 'scale(1) translate(50%, -50%)',\n    transformOrigin: '100% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"circle\"`. */\n  anchorOriginBottomRightCircle: {\n    bottom: '14%',\n    right: '14%',\n    transform: 'scale(1) translate(50%, 50%)',\n    transformOrigin: '100% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(50%, 50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap=\"circle\"`. */\n  anchorOriginTopLeftCircle: {\n    top: '14%',\n    left: '14%',\n    transform: 'scale(1) translate(-50%, -50%)',\n    transformOrigin: '0% 0%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, -50%)',\n    },\n  },\n  /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"circle\"`. */\n  anchorOriginBottomLeftCircle: {\n    bottom: '14%',\n    left: '14%',\n    transform: 'scale(1) translate(-50%, 50%)',\n    transformOrigin: '0% 100%',\n    '&$invisible': {\n      transform: 'scale(0) translate(-50%, 50%)',\n    },\n  },\n  /* Pseudo-class to the badge `span` element if `invisible={true}`. */\n  invisible: {\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n});\n\nconst Badge = React.forwardRef(function Badge(props, ref) {\n  const {\n    anchorOrigin = {\n      vertical: 'top',\n      horizontal: 'right',\n    },\n    badgeContent,\n    children,\n    classes,\n    className,\n    color = 'default',\n    component: ComponentProp = 'span',\n    invisible: invisibleProp,\n    max = 99,\n    overlap = 'rectangle',\n    showZero = false,\n    variant = 'standard',\n    ...other\n  } = props;\n\n  let invisible = invisibleProp;\n\n  if (\n    invisibleProp == null &&\n    ((badgeContent === 0 && !showZero) || (badgeContent == null && variant !== 'dot'))\n  ) {\n    invisible = true;\n  }\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? `${max}+` : badgeContent;\n  }\n\n  return (\n    <ComponentProp className={clsx(classes.root, className)} ref={ref} {...other}>\n      {children}\n      <span\n        className={clsx(\n          classes.badge,\n          classes[`${anchorOrigin.horizontal}${capitalize(anchorOrigin.vertical)}}`],\n          classes[\n            `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(\n              anchorOrigin.horizontal,\n            )}${capitalize(overlap)}`\n          ],\n          {\n            [classes[`color${capitalize(color)}`]]: color !== 'default',\n            [classes.invisible]: invisible,\n            [classes.dot]: variant === 'dot',\n          },\n        )}\n      >\n        {displayValue}\n      </span>\n    </ComponentProp>\n  );\n});\n\nBadge.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The anchor of the badge.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired,\n  }),\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'error', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the badge will be invisible.\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   */\n  max: PropTypes.number,\n  /**\n   * Wrapped shape the badge should overlap.\n   */\n  overlap: PropTypes.oneOf(['circle', 'rectangle']),\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['dot', 'standard']),\n};\n\nexport default withStyles(styles, { name: 'MuiBadge' })(Badge);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Badge/Badge.js",
      "inheritance": null,
      "usedInPages": [
        "/components/badges"
      ]
    },
    "BottomNavigation": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "We default to the index of the child",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "showLabels": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, all `BottomNavigationAction`s will show their labels.\nBy default, only the selected `BottomNavigationAction` will show its label.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the currently selected `BottomNavigationAction`.",
          "tags": []
        }
      },
      "name": "BottomNavigation",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiBottomNavigation",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiBottomNavigation-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    height: 56,\n    backgroundColor: theme.palette.background.paper,\n  },\n});\n\nconst BottomNavigation = React.forwardRef(function BottomNavigation(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'div',\n    onChange,\n    showLabels = false,\n    value,\n    ...other\n  } = props;\n\n  return (\n    <Component className={clsx(classes.root, className)} ref={ref} {...other}>\n      {React.Children.map(children, (child, childIndex) => {\n        if (!React.isValidElement(child)) {\n          return null;\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (child.type === React.Fragment) {\n            console.error(\n              [\n                \"Material-UI: the BottomNavigation component doesn't accept a Fragment as a child.\",\n                'Consider providing an array instead.',\n              ].join('\\n'),\n            );\n          }\n        }\n\n        const childValue = child.props.value === undefined ? childIndex : child.props.value;\n\n        return React.cloneElement(child, {\n          selected: childValue === value,\n          showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,\n          value: childValue,\n          onChange,\n        });\n      })}\n    </Component>\n  );\n});\n\nBottomNavigation.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {any} value We default to the index of the child\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, all `BottomNavigationAction`s will show their labels.\n   * By default, only the selected `BottomNavigationAction` will show its label.\n   */\n  showLabels: PropTypes.bool,\n  /**\n   * The value of the currently selected `BottomNavigationAction`.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiBottomNavigation' })(BottomNavigation);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/BottomNavigation/BottomNavigation.js",
      "inheritance": null,
      "usedInPages": [
        "/components/bottom-navigation"
      ]
    },
    "BottomNavigationAction": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "unsupportedProp"
          },
          "required": false,
          "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label element.",
          "tags": []
        },
        "showLabel": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `BottomNavigationAction` will show its label.\nBy default, only the selected `BottomNavigationAction`\ninside `BottomNavigation` will show its label.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "You can provide your own value. Otherwise, we fallback to the child position index.",
          "tags": []
        }
      },
      "name": "BottomNavigationAction",
      "styles": {
        "classes": [
          "root",
          "selected",
          "iconOnly",
          "wrapper",
          "label"
        ],
        "name": "MuiBottomNavigationAction",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "selected": "Pseudo-class applied to the root element if selected.",
          "iconOnly": "Pseudo-class applied to the root element if `showLabel={false}` and not selected.",
          "wrapper": "Styles applied to the span element that wraps the icon and label.",
          "label": "Styles applied to the label's span element."
        },
        "globalClasses": {
          "root": "MuiBottomNavigationAction-root",
          "selected": "Mui-selected",
          "iconOnly": "MuiBottomNavigationAction-iconOnly",
          "wrapper": "MuiBottomNavigationAction-wrapper",
          "label": "MuiBottomNavigationAction-label"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport unsupportedProp from '../utils/unsupportedProp';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    transition: theme.transitions.create(['color', 'padding-top'], {\n      duration: theme.transitions.duration.short,\n    }),\n    padding: '6px 12px 8px',\n    minWidth: 80,\n    maxWidth: 168,\n    color: theme.palette.text.secondary,\n    flex: '1',\n    '&$iconOnly': {\n      paddingTop: 16,\n    },\n    '&$selected': {\n      paddingTop: 6,\n      color: theme.palette.primary.main,\n    },\n  },\n  /* Pseudo-class applied to the root element if selected. */\n  selected: {},\n  /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */\n  iconOnly: {},\n  /* Styles applied to the span element that wraps the icon and label. */\n  wrapper: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    flexDirection: 'column',\n  },\n  /* Styles applied to the label's span element. */\n  label: {\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(12),\n    opacity: 1,\n    transition: 'font-size 0.2s, opacity 0.2s',\n    transitionDelay: '0.1s',\n    '&$iconOnly': {\n      opacity: 0,\n      transitionDelay: '0s',\n    },\n    '&$selected': {\n      fontSize: theme.typography.pxToRem(14),\n    },\n  },\n});\n\nconst BottomNavigationAction = React.forwardRef(function BottomNavigationAction(props, ref) {\n  const {\n    classes,\n    className,\n    icon,\n    label,\n    onChange,\n    onClick,\n    selected,\n    showLabel,\n    value,\n    ...other\n  } = props;\n\n  const handleChange = event => {\n    if (onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    <ButtonBase\n      ref={ref}\n      className={clsx(\n        classes.root,\n        {\n          [classes.selected]: selected,\n          [classes.iconOnly]: !showLabel && !selected,\n        },\n        className,\n      )}\n      focusRipple\n      onClick={handleChange}\n      {...other}\n    >\n      <span className={classes.wrapper}>\n        {icon}\n        <span\n          className={clsx(classes.label, {\n            [classes.selected]: selected,\n            [classes.iconOnly]: !showLabel && !selected,\n          })}\n        >\n          {label}\n        </span>\n      </span>\n    </ButtonBase>\n  );\n});\n\nBottomNavigationAction.propTypes = {\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon element.\n   */\n  icon: PropTypes.node,\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n  /**\n   * If `true`, the `BottomNavigationAction` will show its label.\n   * By default, only the selected `BottomNavigationAction`\n   * inside `BottomNavigation` will show its label.\n   */\n  showLabel: PropTypes.bool,\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiBottomNavigationAction' })(BottomNavigationAction);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/BottomNavigationAction/BottomNavigationAction.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/bottom-navigation"
      ]
    },
    "Breadcrumbs": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The breadcrumb children.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it maps the variant to a good default headline component.",
          "defaultValue": {
            "value": "'nav'",
            "computed": false
          },
          "tags": []
        },
        "itemsAfterCollapse": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "If max items is exceeded, the number of items to show after the ellipsis.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "itemsBeforeCollapse": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "If max items is exceeded, the number of items to show before the ellipsis.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "maxItems": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Specifies the maximum number of breadcrumbs to display. When there are more\nthan the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\nwill be shown, with an ellipsis in between.",
          "defaultValue": {
            "value": "8",
            "computed": false
          },
          "tags": []
        },
        "separator": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Custom separator node.",
          "defaultValue": {
            "value": "'/'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Breadcrumbs",
      "styles": {
        "classes": [
          "root",
          "ol",
          "li",
          "separator"
        ],
        "name": "MuiBreadcrumbs",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "ol": "Styles applied to the ol element.",
          "li": "Styles applied to the li element.",
          "separator": "Styles applied to the separator element."
        },
        "globalClasses": {
          "root": "MuiBreadcrumbs-root",
          "ol": "MuiBreadcrumbs-ol",
          "li": "MuiBreadcrumbs-li",
          "separator": "MuiBreadcrumbs-separator"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport BreadcrumbCollapsed from './BreadcrumbCollapsed';\nimport BreadcrumbSeparator from './BreadcrumbSeparator';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the ol element. */\n  ol: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    padding: 0, // Reset\n    margin: 0, // Reset\n  },\n  /* Styles applied to the li element. */\n  li: {\n    listStyle: 'none',\n  },\n  /* Styles applied to the separator element. */\n  separator: {},\n};\n\nfunction insertSeparators(items, className, separator) {\n  return items.reduce((acc, current, index) => {\n    if (index < items.length - 1) {\n      acc = acc.concat(\n        current,\n        <BreadcrumbSeparator key={`separator-${index}`} className={className}>\n          {separator}\n        </BreadcrumbSeparator>,\n      );\n    } else {\n      acc.push(current);\n    }\n\n    return acc;\n  }, []);\n}\n\nconst Breadcrumbs = React.forwardRef(function Breadcrumbs(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'nav',\n    itemsAfterCollapse = 1,\n    itemsBeforeCollapse = 1,\n    maxItems = 8,\n    separator = '/',\n    ...other\n  } = props;\n\n  const [expanded, setExpanded] = React.useState(false);\n\n  const renderItemsBeforeAndAfter = allItems => {\n    const handleClickExpand = () => {\n      setExpanded(true);\n    };\n\n    // This defends against someone passing weird input, to ensure that if all\n    // items would be shown anyway, we just show all items without the EllipsisItem\n    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(\n          [\n            'Material-UI: you have provided an invalid combination of props to the Breadcrumbs.',\n            `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`,\n          ].join('\\n'),\n        );\n      }\n      return allItems;\n    }\n\n    return [\n      ...allItems.slice(0, itemsBeforeCollapse),\n      <BreadcrumbCollapsed key=\"ellipsis\" onClick={handleClickExpand} />,\n      ...allItems.slice(allItems.length - itemsAfterCollapse, allItems.length),\n    ];\n  };\n\n  const allItems = React.Children.toArray(children)\n    .filter(child => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (child.type === React.Fragment) {\n          console.error(\n            [\n              \"Material-UI: the Breadcrumbs component doesn't accept a Fragment as a child.\",\n              'Consider providing an array instead.',\n            ].join('\\n'),\n          );\n        }\n      }\n\n      return React.isValidElement(child);\n    })\n    .map((child, index) => (\n      <li className={classes.li} key={`child-${index}`}>\n        {child}\n      </li>\n    ));\n\n  return (\n    <Typography\n      ref={ref}\n      component={Component}\n      color=\"textSecondary\"\n      className={clsx(classes.root, className)}\n      {...other}\n    >\n      <ol className={classes.ol}>\n        {insertSeparators(\n          expanded || (maxItems && allItems.length <= maxItems)\n            ? allItems\n            : renderItemsBeforeAndAfter(allItems),\n          classes.separator,\n          separator,\n        )}\n      </ol>\n    </Typography>\n  );\n});\n\nBreadcrumbs.propTypes = {\n  /**\n   * The breadcrumb children.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * By default, it maps the variant to a good default headline component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If max items is exceeded, the number of items to show after the ellipsis.\n   */\n  itemsAfterCollapse: PropTypes.number,\n  /**\n   * If max items is exceeded, the number of items to show before the ellipsis.\n   */\n  itemsBeforeCollapse: PropTypes.number,\n  /**\n   * Specifies the maximum number of breadcrumbs to display. When there are more\n   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\n   * will be shown, with an ellipsis in between.\n   */\n  maxItems: PropTypes.number,\n  /**\n   * Custom separator node.\n   */\n  separator: PropTypes.node,\n};\n\nexport default withStyles(styles, { name: 'MuiBreadcrumbs' })(Breadcrumbs);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLElement",
      "filename": "/packages/material-ui/src/Breadcrumbs/Breadcrumbs.js",
      "inheritance": null,
      "usedInPages": [
        "/components/breadcrumbs"
      ]
    },
    "Card": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "raised": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the card will use raised styling.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Card",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiCard",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiCard-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden',\n  },\n};\n\nconst Card = React.forwardRef(function Card(props, ref) {\n  const { classes, className, raised = false, ...other } = props;\n\n  return (\n    <Paper\n      className={clsx(classes.root, className)}\n      elevation={raised ? 8 : 1}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nCard.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiCard' })(Card);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Card/Card.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/cards"
      ]
    },
    "ButtonGroup": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button group.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the buttons will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button ripple effect will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the buttons will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'contained'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'outlined'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ButtonGroup",
      "styles": {
        "classes": [
          "root",
          "contained",
          "fullWidth",
          "grouped",
          "groupedText",
          "groupedTextPrimary",
          "groupedTextSecondary",
          "groupedOutlined",
          "groupedOutlinedPrimary",
          "groupedOutlinedSecondary",
          "groupedContained",
          "groupedContainedPrimary",
          "groupedContainedSecondary",
          "disabled"
        ],
        "name": "MuiButtonGroup",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "contained": "Styles applied to the root element if `variant=\"contained\"`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "grouped": "Styles applied to the children.",
          "groupedText": "Styles applied to the children if `variant=\"text\"`.",
          "groupedTextPrimary": "Styles applied to the children if `variant=\"text\"` and `color=\"primary\"`.",
          "groupedTextSecondary": "Styles applied to the children if `variant=\"text\"` and `color=\"secondary\"`.",
          "groupedOutlined": "Styles applied to the children if `variant=\"outlined\"`.",
          "groupedOutlinedPrimary": "Styles applied to the children if `variant=\"outlined\"` and `color=\"primary\"`.",
          "groupedOutlinedSecondary": "Styles applied to the children if `variant=\"outlined\"` and `color=\"secondary\"`.",
          "groupedContained": "Styles applied to the children if `variant=\"contained\"`.",
          "groupedContainedPrimary": "Styles applied to the children if `variant=\"contained\"` and `color=\"primary\"`.",
          "groupedContainedSecondary": "Styles applied to the children if `variant=\"contained\"` and `color=\"secondary\"`.",
          "disabled": "Pseudo-class applied to child elements if `disabled={true}`."
        },
        "globalClasses": {
          "root": "MuiButtonGroup-root",
          "contained": "MuiButtonGroup-contained",
          "fullWidth": "MuiButtonGroup-fullWidth",
          "grouped": "MuiButtonGroup-grouped",
          "groupedText": "MuiButtonGroup-groupedText",
          "groupedTextPrimary": "MuiButtonGroup-groupedTextPrimary",
          "groupedTextSecondary": "MuiButtonGroup-groupedTextSecondary",
          "groupedOutlined": "MuiButtonGroup-groupedOutlined",
          "groupedOutlinedPrimary": "MuiButtonGroup-groupedOutlinedPrimary",
          "groupedOutlinedSecondary": "MuiButtonGroup-groupedOutlinedSecondary",
          "groupedContained": "MuiButtonGroup-groupedContained",
          "groupedContainedPrimary": "MuiButtonGroup-groupedContainedPrimary",
          "groupedContainedSecondary": "MuiButtonGroup-groupedContainedSecondary",
          "disabled": "Mui-disabled"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport { fade } from '../styles/colorManipulator';\nimport withStyles from '../styles/withStyles';\nimport '../Button'; // So we don't have any override priority issue.\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    borderRadius: theme.shape.borderRadius,\n  },\n  /* Styles applied to the root element if `variant=\"contained\"`. */\n  contained: {\n    boxShadow: theme.shadows[2],\n  },\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%',\n  },\n  /* Styles applied to the children. */\n  grouped: {\n    minWidth: 40,\n    '&:not(:first-child)': {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    },\n    '&:not(:last-child)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n  },\n  /* Styles applied to the children if `variant=\"text\"`. */\n  groupedText: {\n    '&:not(:last-child)': {\n      borderRight: `1px solid ${\n        theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'\n      }`,\n    },\n  },\n  /* Styles applied to the children if `variant=\"text\"` and `color=\"primary\"`. */\n  groupedTextPrimary: {\n    '&:not(:last-child)': {\n      borderColor: fade(theme.palette.primary.main, 0.5),\n    },\n  },\n  /* Styles applied to the children if `variant=\"text\"` and `color=\"secondary\"`. */\n  groupedTextSecondary: {\n    '&:not(:last-child)': {\n      borderColor: fade(theme.palette.secondary.main, 0.5),\n    },\n  },\n  /* Styles applied to the children if `variant=\"outlined\"`. */\n  groupedOutlined: {\n    '&:not(:first-child)': {\n      marginLeft: -1,\n    },\n    '&:not(:last-child)': {\n      borderRightColor: 'transparent',\n    },\n  },\n  /* Styles applied to the children if `variant=\"outlined\"` and `color=\"primary\"`. */\n  groupedOutlinedPrimary: {\n    '&:hover': {\n      borderColor: theme.palette.primary.main,\n    },\n  },\n  /* Styles applied to the children if `variant=\"outlined\"` and `color=\"secondary\"`. */\n  groupedOutlinedSecondary: {\n    '&:hover': {\n      borderColor: theme.palette.secondary.main,\n    },\n  },\n  /* Styles applied to the children if `variant=\"contained\"`. */\n  groupedContained: {\n    boxShadow: 'none',\n    '&:not(:last-child)': {\n      borderRight: `1px solid ${theme.palette.grey[400]}`,\n      '&$disabled': {\n        borderRight: `1px solid ${theme.palette.action.disabled}`,\n      },\n    },\n  },\n  /* Styles applied to the children if `variant=\"contained\"` and `color=\"primary\"`. */\n  groupedContainedPrimary: {\n    '&:not(:last-child)': {\n      borderRight: `1px solid ${theme.palette.primary.dark}`,\n    },\n  },\n  /* Styles applied to the children if `variant=\"contained\"` and `color=\"secondary\"`. */\n  groupedContainedSecondary: {\n    '&:not(:last-child)': {\n      borderRight: `1px solid ${theme.palette.secondary.dark}`,\n    },\n  },\n  /* Pseudo-class applied to child elements if `disabled={true}`. */\n  disabled: {},\n});\n\nconst ButtonGroup = React.forwardRef(function ButtonGroup(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'default',\n    component: Component = 'div',\n    disabled = false,\n    disableFocusRipple = false,\n    disableRipple = false,\n    fullWidth = false,\n    size = 'medium',\n    variant = 'outlined',\n    ...other\n  } = props;\n\n  const buttonClassName = clsx(\n    classes.grouped,\n    classes[`grouped${capitalize(variant)}`],\n    classes[`grouped${capitalize(variant)}${color !== 'default' ? capitalize(color) : ''}`],\n    {\n      [classes.disabled]: disabled,\n    },\n  );\n\n  return (\n    <Component\n      role=\"group\"\n      className={clsx(\n        classes.root,\n        {\n          [classes.contained]: variant === 'contained',\n          [classes.fullWidth]: fullWidth,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {React.Children.map(children, child => {\n        if (!React.isValidElement(child)) {\n          return null;\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (child.type === React.Fragment) {\n            console.error(\n              [\n                \"Material-UI: the ButtonGroup component doesn't accept a Fragment as a child.\",\n                'Consider providing an array instead.',\n              ].join('\\n'),\n            );\n          }\n        }\n\n        return React.cloneElement(child, {\n          className: clsx(buttonClassName, child.props.className),\n          disabled: child.props.disabled || disabled,\n          color: child.props.color || color,\n          disableFocusRipple,\n          disableRipple,\n          fullWidth,\n          size: child.props.size || size,\n          variant: child.props.variant || variant,\n        });\n      })}\n    </Component>\n  );\n});\n\nButtonGroup.propTypes = {\n  /**\n   * The content of the button group.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the buttons will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the button keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the button ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the buttons will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained']),\n};\n\nexport default withStyles(styles, { name: 'MuiButtonGroup' })(ButtonGroup);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ButtonGroup/ButtonGroup.js",
      "inheritance": null,
      "usedInPages": [
        "/components/buttons"
      ]
    },
    "CardActionArea": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "CardActionArea",
      "styles": {
        "classes": [
          "root",
          "focusVisible",
          "focusHighlight"
        ],
        "name": "MuiCardActionArea",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "focusVisible": "Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused.",
          "focusHighlight": "Styles applied to the overlay that covers the action area when it is keyboard focused."
        },
        "globalClasses": {
          "root": "MuiCardActionArea-root",
          "focusVisible": "Mui-focusVisible",
          "focusHighlight": "MuiCardActionArea-focusHighlight"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    textAlign: 'inherit',\n    width: '100%',\n    '&:hover $focusHighlight': {\n      opacity: theme.palette.action.hoverOpacity,\n    },\n    '&$focusVisible $focusHighlight': {\n      opacity: 0.12,\n    },\n  },\n  /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n  focusVisible: {},\n  /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n  focusHighlight: {\n    overflow: 'hidden',\n    pointerEvents: 'none',\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    borderRadius: 'inherit',\n    opacity: 0,\n    backgroundColor: 'currentcolor',\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.short,\n    }),\n  },\n});\n\nconst CardActionArea = React.forwardRef(function CardActionArea(props, ref) {\n  const { children, classes, className, focusVisibleClassName, ...other } = props;\n\n  return (\n    <ButtonBase\n      className={clsx(classes.root, className)}\n      focusVisibleClassName={clsx(focusVisibleClassName, classes.focusVisible)}\n      ref={ref}\n      {...other}\n    >\n      {children}\n      <span className={classes.focusHighlight} />\n    </ButtonBase>\n  );\n});\n\nCardActionArea.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n};\n\nexport default withStyles(styles, { name: 'MuiCardActionArea' })(CardActionArea);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/CardActionArea/CardActionArea.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardContent": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "CardContent",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiCardContent",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiCardContent-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24,\n    },\n  },\n};\n\nconst CardContent = React.forwardRef(function CardContent(props, ref) {\n  const { classes, className, component: Component = 'div', ...other } = props;\n\n  return <Component className={clsx(classes.root, className)} ref={ref} {...other} />;\n});\n\nCardContent.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n};\n\nexport default withStyles(styles, { name: 'MuiCardContent' })(CardContent);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardContent/CardContent.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardHeader": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The action to display in the card header.",
          "tags": []
        },
        "avatar": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The Avatar for the Card Header.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, `subheader` and `title` won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `title` text, and optional `subheader` text\nwith the Typography component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "subheader": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "subheaderTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the subheader\n(as long as disableTypography is not `true`).",
          "tags": []
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the Card Title.",
          "tags": []
        },
        "titleTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the title\n(as long as disableTypography is not `true`).",
          "tags": []
        }
      },
      "name": "CardHeader",
      "styles": {
        "classes": [
          "root",
          "avatar",
          "action",
          "content",
          "title",
          "subheader"
        ],
        "name": "MuiCardHeader",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "avatar": "Styles applied to the avatar element.",
          "action": "Styles applied to the action element.",
          "content": "Styles applied to the content wrapper element.",
          "title": "Styles applied to the title Typography element.",
          "subheader": "Styles applied to the subheader Typography element."
        },
        "globalClasses": {
          "root": "MuiCardHeader-root",
          "avatar": "MuiCardHeader-avatar",
          "action": "MuiCardHeader-action",
          "content": "MuiCardHeader-content",
          "title": "MuiCardHeader-title",
          "subheader": "MuiCardHeader-subheader"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 16,\n  },\n  /* Styles applied to the avatar element. */\n  avatar: {\n    flex: '0 0 auto',\n    marginRight: 16,\n  },\n  /* Styles applied to the action element. */\n  action: {\n    flex: '0 0 auto',\n    alignSelf: 'flex-start',\n    marginTop: -8,\n    marginRight: -8,\n  },\n  /* Styles applied to the content wrapper element. */\n  content: {\n    flex: '1 1 auto',\n  },\n  /* Styles applied to the title Typography element. */\n  title: {},\n  /* Styles applied to the subheader Typography element. */\n  subheader: {},\n};\n\nconst CardHeader = React.forwardRef(function CardHeader(props, ref) {\n  const {\n    action,\n    avatar,\n    classes,\n    className,\n    component: Component = 'div',\n    disableTypography = false,\n    subheader: subheaderProp,\n    subheaderTypographyProps,\n    title: titleProp,\n    titleTypographyProps,\n    ...other\n  } = props;\n\n  let title = titleProp;\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = (\n      <Typography\n        variant={avatar ? 'body2' : 'h5'}\n        className={classes.title}\n        component=\"span\"\n        display=\"block\"\n        {...titleTypographyProps}\n      >\n        {title}\n      </Typography>\n    );\n  }\n\n  let subheader = subheaderProp;\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = (\n      <Typography\n        variant={avatar ? 'body2' : 'body1'}\n        className={classes.subheader}\n        color=\"textSecondary\"\n        component=\"span\"\n        display=\"block\"\n        {...subheaderTypographyProps}\n      >\n        {subheader}\n      </Typography>\n    );\n  }\n\n  return (\n    <Component className={clsx(classes.root, className)} ref={ref} {...other}>\n      {avatar && <div className={classes.avatar}>{avatar}</div>}\n      <div className={classes.content}>\n        {title}\n        {subheader}\n      </div>\n      {action && <div className={classes.action}>{action}</div>}\n    </Component>\n  );\n});\n\nCardHeader.propTypes = {\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n  /**\n   * The Avatar for the Card Header.\n   */\n  avatar: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n  /**\n   * The content of the Card Title.\n   */\n  title: PropTypes.node,\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiCardHeader' })(CardHeader);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardHeader/CardHeader.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardMedia": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "Component for rendering image.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "image": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Image to be displayed as a background image.\nEither `image` or `src` prop must be specified.\nNote that caller must specify height otherwise the image will not be visible.",
          "tags": []
        },
        "src": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "An alias for `image` property.\nAvailable only with media components.\nMedia components: `video`, `audio`, `picture`, `iframe`, `img`.",
          "tags": []
        }
      },
      "name": "CardMedia",
      "styles": {
        "classes": [
          "root",
          "media",
          "img"
        ],
        "name": "MuiCardMedia",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "media": "Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`.",
          "img": "Styles applied to the root element if `component=\"picture or img\"`."
        },
        "globalClasses": {
          "root": "MuiCardMedia-root",
          "media": "MuiCardMedia-media",
          "img": "MuiCardMedia-img"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n  },\n  /* Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`. */\n  media: {\n    width: '100%',\n  },\n  /* Styles applied to the root element if `component=\"picture or img\"`. */\n  img: {\n    // ⚠️ object-fit is not supported by IE 11.\n    objectFit: 'cover',\n  },\n};\n\nconst MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];\n\nconst CardMedia = React.forwardRef(function CardMedia(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'div',\n    image,\n    src,\n    style,\n    ...other\n  } = props;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!children && !image && !src) {\n      console.error('Material-UI: either `children`, `image` or `src` prop must be specified.');\n    }\n  }\n\n  const isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;\n  const composedStyle =\n    !isMediaComponent && image ? { backgroundImage: `url(\"${image}\")`, ...style } : style;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes.media]: isMediaComponent,\n          [classes.img]: ['picture', 'img'].indexOf(Component) !== -1,\n        },\n        className,\n      )}\n      ref={ref}\n      style={composedStyle}\n      src={isMediaComponent ? image || src : undefined}\n      {...other}\n    >\n      {children}\n    </Component>\n  );\n});\n\nCardMedia.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Component for rendering image.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Image to be displayed as a background image.\n   * Either `image` or `src` prop must be specified.\n   * Note that caller must specify height otherwise the image will not be visible.\n   */\n  image: PropTypes.string,\n  /**\n   * An alias for `image` property.\n   * Available only with media components.\n   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n   */\n  src: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiCardMedia' })(CardMedia);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardMedia/CardMedia.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "CardActions": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the actions do not have additional margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "CardActions",
      "styles": {
        "classes": [
          "root",
          "spacing"
        ],
        "name": "MuiCardActions",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "spacing": "Styles applied to the root element if `disableSpacing={false}`."
        },
        "globalClasses": {
          "root": "MuiCardActions-root",
          "spacing": "MuiCardActions-spacing"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport '../Button'; // So we don't have any override priority issue.\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n  },\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > * + *': {\n      marginLeft: 8,\n    },\n  },\n};\n\nconst CardActions = React.forwardRef(function CardActions(props, ref) {\n  const { disableSpacing = false, classes, className, ...other } = props;\n\n  return (\n    <div\n      className={clsx(classes.root, { [classes.spacing]: !disableSpacing }, className)}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nCardActions.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiCardActions' })(CardActions);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CardActions/CardActions.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards"
      ]
    },
    "Checkbox": {
      "description": "",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is checked.",
          "tags": []
        },
        "checkedIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is checked.",
          "defaultValue": {
            "value": "<CheckBoxIcon />",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the switch will be disabled.",
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is unchecked.",
          "defaultValue": {
            "value": "<CheckBoxOutlineBlankIcon />",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "indeterminate": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component appears indeterminate.\nThis does not set the native input element to indeterminate due\nto inconsistent behavior across browsers.\nHowever, we set a `data-indeterminate` attribute on the input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "indeterminateIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is indeterminate.",
          "defaultValue": {
            "value": "<IndeterminateCheckBoxIcon />",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The input component prop `type`.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "Checkbox",
      "styles": {
        "classes": [
          "root",
          "checked",
          "disabled",
          "indeterminate",
          "colorPrimary",
          "colorSecondary"
        ],
        "name": "MuiCheckbox",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "checked": "Pseudo-class applied to the root element if `checked={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "indeterminate": "Pseudo-class applied to the root element if `indeterminate={true}`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
        },
        "globalClasses": {
          "root": "MuiCheckbox-root",
          "checked": "Mui-checked",
          "disabled": "Mui-disabled",
          "indeterminate": "MuiCheckbox-indeterminate",
          "colorPrimary": "MuiCheckbox-colorPrimary",
          "colorSecondary": "MuiCheckbox-colorSecondary"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.secondary,\n  },\n  /* Pseudo-class applied to the root element if `checked={true}`. */\n  checked: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n  indeterminate: {},\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n    },\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    '&$checked': {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n    },\n  },\n});\n\nconst defaultCheckedIcon = <CheckBoxIcon />;\nconst defaultIcon = <CheckBoxOutlineBlankIcon />;\nconst defaultIndeterminateIcon = <IndeterminateCheckBoxIcon />;\n\nconst Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  const {\n    checkedIcon = defaultCheckedIcon,\n    classes,\n    color = 'secondary',\n    icon = defaultIcon,\n    indeterminate = false,\n    indeterminateIcon = defaultIndeterminateIcon,\n    inputProps,\n    ...other\n  } = props;\n\n  return (\n    <SwitchBase\n      type=\"checkbox\"\n      checkedIcon={indeterminate ? indeterminateIcon : checkedIcon}\n      classes={{\n        root: clsx(classes.root, classes[`color${capitalize(color)}`], {\n          [classes.indeterminate]: indeterminate,\n        }),\n        checked: classes.checked,\n        disabled: classes.disabled,\n      }}\n      color={color}\n      inputProps={{\n        'data-indeterminate': indeterminate,\n        ...inputProps,\n      }}\n      icon={indeterminate ? indeterminateIcon : icon}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nCheckbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiCheckbox' })(Checkbox);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Checkbox/Checkbox.js",
      "inheritance": {
        "component": "IconButton",
        "pathname": "/api/icon-button"
      },
      "usedInPages": [
        "/components/checkboxes",
        "/components/transfer-list"
      ]
    },
    "CircularProgress": {
      "description": "## ARIA\n\nIf the progress bar is describing the loading progress of a particular region of a page,\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\nattribute to `true` on that region until it has finished loading.",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "disableShrink": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.bool, props => {\n  if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n    return new Error(\n      'Material-UI: you have provided the `disableShrink` prop ' +\n        'with a variant other than `indeterminate`. This will have no effect.',\n    );\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "If `true`, the shrink animation is disabled.\nThis only works if variant is `indeterminate`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The size of the circle.\nIf using a number, the pixel unit is assumed.\nIf using a string, you need to provide the CSS unit, e.g '3rem'.",
          "defaultValue": {
            "value": "40",
            "computed": false
          },
          "tags": []
        },
        "thickness": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The thickness of the circle.",
          "defaultValue": {
            "value": "3.6",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The value of the progress indicator for the determinate and static variants.\nValue between 0 and 100.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'determinate'",
                "computed": false
              },
              {
                "value": "'indeterminate'",
                "computed": false
              },
              {
                "value": "'static'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.\nUse indeterminate when there is no progress value.",
          "defaultValue": {
            "value": "'indeterminate'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "CircularProgress",
      "styles": {
        "classes": [
          "root",
          "static",
          "indeterminate",
          "colorPrimary",
          "colorSecondary",
          "svg",
          "circle",
          "circleStatic",
          "circleIndeterminate",
          "circleDisableShrink"
        ],
        "name": "MuiCircularProgress",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "static": "Styles applied to the root element if `variant=\"static\"`.",
          "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "svg": "Styles applied to the `svg` element.",
          "circle": "Styles applied to the `circle` svg path.",
          "circleStatic": "Styles applied to the `circle` svg path if `variant=\"static\"`.",
          "circleIndeterminate": "Styles applied to the `circle` svg path if `variant=\"indeterminate\"`.",
          "circleDisableShrink": "Styles applied to the `circle` svg path if `disableShrink={true}`."
        },
        "globalClasses": {
          "root": "MuiCircularProgress-root",
          "static": "MuiCircularProgress-static",
          "indeterminate": "MuiCircularProgress-indeterminate",
          "colorPrimary": "MuiCircularProgress-colorPrimary",
          "colorSecondary": "MuiCircularProgress-colorSecondary",
          "svg": "MuiCircularProgress-svg",
          "circle": "MuiCircularProgress-circle",
          "circleStatic": "MuiCircularProgress-circleStatic",
          "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
          "circleDisableShrink": "MuiCircularProgress-circleDisableShrink"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nconst SIZE = 44;\n\nfunction getRelativeValue(value, min, max) {\n  const clampedValue = Math.min(Math.max(min, value), max);\n  return (clampedValue - min) / (max - min);\n}\n\nfunction easeOut(t) {\n  t = getRelativeValue(t, 0, 1);\n  // https://gist.github.com/gre/1650294\n  t = (t -= 1) * t * t + 1;\n  return t;\n}\n\nfunction easeIn(t) {\n  return t * t;\n}\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-block',\n  },\n  /* Styles applied to the root element if `variant=\"static\"`. */\n  static: {\n    transition: theme.transitions.create('transform'),\n  },\n  /* Styles applied to the root element if `variant=\"indeterminate\"`. */\n  indeterminate: {\n    animation: '$circular-rotate 1.4s linear infinite',\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the `svg` element. */\n  svg: {\n    display: 'block', // Keeps the progress centered\n  },\n  /* Styles applied to the `circle` svg path. */\n  circle: {\n    stroke: 'currentColor',\n    // Use butt to follow the specification, by chance, it's already the default CSS value.\n    // strokeLinecap: 'butt',\n  },\n  /* Styles applied to the `circle` svg path if `variant=\"static\"`. */\n  circleStatic: {\n    transition: theme.transitions.create('stroke-dashoffset'),\n  },\n  /* Styles applied to the `circle` svg path if `variant=\"indeterminate\"`. */\n  circleIndeterminate: {\n    animation: '$circular-dash 1.4s ease-in-out infinite',\n    // Some default value that looks fine waiting for the animation to kicks in.\n    strokeDasharray: '80px, 200px',\n    strokeDashoffset: '0px', // Add the unit to fix a Edge 16 and below bug.\n  },\n  '@keyframes circular-rotate': {\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  },\n  '@keyframes circular-dash': {\n    '0%': {\n      strokeDasharray: '1px, 200px',\n      strokeDashoffset: '0px',\n    },\n    '50%': {\n      strokeDasharray: '100px, 200px',\n      strokeDashoffset: '-15px',\n    },\n    '100%': {\n      strokeDasharray: '100px, 200px',\n      strokeDashoffset: '-125px',\n    },\n  },\n  /* Styles applied to the `circle` svg path if `disableShrink={true}`. */\n  circleDisableShrink: {\n    animation: 'none',\n  },\n});\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\nconst CircularProgress = React.forwardRef(function CircularProgress(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'primary',\n    disableShrink = false,\n    size = 40,\n    style,\n    thickness = 3.6,\n    value = 0,\n    variant = 'indeterminate',\n    ...other\n  } = props;\n\n  const circleStyle = {};\n  const rootStyle = {};\n  const rootProps = {};\n\n  if (variant === 'determinate' || variant === 'static') {\n    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n\n    if (variant === 'static') {\n      circleStyle.strokeDashoffset = `${(((100 - value) / 100) * circumference).toFixed(3)}px`;\n      rootStyle.transform = 'rotate(-90deg)';\n    } else {\n      circleStyle.strokeDashoffset = `${(easeIn((100 - value) / 100) * circumference).toFixed(\n        3,\n      )}px`;\n      rootStyle.transform = `rotate(${(easeOut(value / 70) * 270).toFixed(3)}deg)`;\n    }\n  }\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'inherit',\n          [classes.indeterminate]: variant === 'indeterminate',\n          [classes.static]: variant === 'static',\n        },\n        className,\n      )}\n      style={{ width: size, height: size, ...rootStyle, ...style }}\n      ref={ref}\n      role=\"progressbar\"\n      {...rootProps}\n      {...other}\n    >\n      <svg className={classes.svg} viewBox={`${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`}>\n        <circle\n          className={clsx(classes.circle, {\n            [classes.circleIndeterminate]: variant === 'indeterminate',\n            [classes.circleStatic]: variant === 'static',\n            [classes.circleDisableShrink]: disableShrink,\n          })}\n          style={circleStyle}\n          cx={SIZE}\n          cy={SIZE}\n          r={(SIZE - thickness) / 2}\n          fill=\"none\"\n          strokeWidth={thickness}\n        />\n      </svg>\n    </div>\n  );\n});\n\nCircularProgress.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'inherit']),\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, props => {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error(\n        'Material-UI: you have provided the `disableShrink` prop ' +\n          'with a variant other than `indeterminate`. This will have no effect.',\n      );\n    }\n\n    return null;\n  }),\n  /**\n   * The size of the circle.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, e.g '3rem'.\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The thickness of the circle.\n   */\n  thickness: PropTypes.number,\n  /**\n   * The value of the progress indicator for the determinate and static variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number,\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate', 'static']),\n};\n\nexport default withStyles(styles, { name: 'MuiCircularProgress', flip: false })(CircularProgress);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/CircularProgress/CircularProgress.js",
      "inheritance": null,
      "usedInPages": [
        "/components/progress"
      ]
    },
    "ClickAwayListener": {
      "description": "Listen for click events that occur somewhere in the document, outside of the element itself.\nFor instance, if you need to hide a menu when people click anywhere else on your page.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef.isRequired"
          },
          "required": false,
          "description": "The wrapped element.",
          "tags": []
        },
        "mouseEvent": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'onClick'",
                "computed": false
              },
              {
                "value": "'onMouseDown'",
                "computed": false
              },
              {
                "value": "'onMouseUp'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The mouse event to listen to. You can disable the listener by providing `false`.",
          "defaultValue": {
            "value": "'onClick'",
            "computed": false
          },
          "tags": []
        },
        "onClickAway": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when a \"click away\" event is detected.",
          "tags": []
        },
        "touchEvent": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'onTouchStart'",
                "computed": false
              },
              {
                "value": "'onTouchEnd'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The touch event to listen to. You can disable the listener by providing `false`.",
          "defaultValue": {
            "value": "'onTouchEnd'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ClickAwayListener",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport setRef from '../utils/setRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\nconst ClickAwayListener = React.forwardRef(function ClickAwayListener(props, ref) {\n  const { children, mouseEvent = 'onClick', touchEvent = 'onTouchEnd', onClickAway } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const mountedRef = React.useRef(false);\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  const handleNodeRef = useForkRef(nodeRef, ref);\n  // can be removed once we drop support for non ref forwarding class components\n  const handleOwnRef = React.useCallback(\n    instance => {\n      // #StrictMode ready\n      setRef(handleNodeRef, ReactDOM.findDOMNode(instance));\n    },\n    [handleNodeRef],\n  );\n  const handleRef = useForkRef(children.ref, handleOwnRef);\n\n  const handleClickAway = useEventCallback(event => {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // IE 11 support, which trigger the handleClickAway even after the unbind\n    if (!mountedRef.current) {\n      return;\n    }\n\n    // Do not act if user performed touchmove\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    // The child might render null.\n    if (!nodeRef.current) {\n      return;\n    }\n\n    // Multi window support\n    const doc = ownerDocument(nodeRef.current);\n\n    if (\n      doc.documentElement &&\n      doc.documentElement.contains(event.target) &&\n      !nodeRef.current.contains(event.target)\n    ) {\n      onClickAway(event);\n    }\n  });\n\n  const handleTouchMove = React.useCallback(() => {\n    movedRef.current = true;\n  }, []);\n\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n\n      document.addEventListener(mappedTouchEvent, handleClickAway);\n      document.addEventListener('touchmove', handleTouchMove);\n\n      return () => {\n        document.removeEventListener(mappedTouchEvent, handleClickAway);\n        document.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, handleTouchMove, touchEvent]);\n\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      document.addEventListener(mappedMouseEvent, handleClickAway);\n\n      return () => {\n        document.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n\n  return <React.Fragment>{React.cloneElement(children, { ref: handleRef })}</React.Fragment>;\n});\n\nClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false]),\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;\n",
      "spread": false,
      "EOL": "\n",
      "filename": "/packages/material-ui/src/ClickAwayListener/ClickAwayListener.js",
      "inheritance": null,
      "usedInPages": [
        "/components/click-away-listener",
        "/components/menus"
      ]
    },
    "Container": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "fixed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set the max-width to match the min-width of the current breakpoint.\nThis is useful if you'd prefer to design for a fixed set of sizes\ninstead of trying to accommodate a fully fluid viewport.\nIt's fluid by default.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "maxWidth": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'xs'",
                "computed": false
              },
              {
                "value": "'sm'",
                "computed": false
              },
              {
                "value": "'md'",
                "computed": false
              },
              {
                "value": "'lg'",
                "computed": false
              },
              {
                "value": "'xl'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine the max-width of the container.\nThe container width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
          "defaultValue": {
            "value": "'lg'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Container",
      "styles": {
        "classes": [
          "root",
          "fixed",
          "maxWidthXs",
          "maxWidthSm",
          "maxWidthMd",
          "maxWidthLg",
          "maxWidthXl"
        ],
        "name": "MuiContainer",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "fixed": "Styles applied to the root element if `fixed={true}`.",
          "maxWidthXs": "Styles applied to the root element if `maxWidth=\"xs\"`.",
          "maxWidthSm": "Styles applied to the root element if `maxWidth=\"sm\"`.",
          "maxWidthMd": "Styles applied to the root element if `maxWidth=\"md\"`.",
          "maxWidthLg": "Styles applied to the root element if `maxWidth=\"lg\"`.",
          "maxWidthXl": "Styles applied to the root element if `maxWidth=\"xl\"`."
        },
        "globalClasses": {
          "root": "MuiContainer-root",
          "fixed": "MuiContainer-fixed",
          "maxWidthXs": "MuiContainer-maxWidthXs",
          "maxWidthSm": "MuiContainer-maxWidthSm",
          "maxWidthMd": "MuiContainer-maxWidthMd",
          "maxWidthLg": "MuiContainer-maxWidthLg",
          "maxWidthXl": "MuiContainer-maxWidthXl"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n    },\n    [theme.breakpoints.up('md')]: {\n      paddingLeft: theme.spacing(4),\n      paddingRight: theme.spacing(4),\n    },\n  },\n  /* Styles applied to the root element if `fixed={true}`. */\n  fixed: Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n    const value = theme.breakpoints.values[breakpoint];\n\n    if (value !== 0) {\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: value,\n      };\n    }\n    return acc;\n  }, {}),\n  /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n  maxWidthXs: {\n    [theme.breakpoints.up('xs')]: {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444),\n    },\n  },\n  /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n  maxWidthSm: {\n    [theme.breakpoints.up('sm')]: {\n      maxWidth: theme.breakpoints.values.sm,\n    },\n  },\n  /* Styles applied to the root element if `maxWidth=\"md\"`. */\n  maxWidthMd: {\n    [theme.breakpoints.up('md')]: {\n      maxWidth: theme.breakpoints.values.md,\n    },\n  },\n  /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n  maxWidthLg: {\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: theme.breakpoints.values.lg,\n    },\n  },\n  /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n  maxWidthXl: {\n    [theme.breakpoints.up('xl')]: {\n      maxWidth: theme.breakpoints.values.xl,\n    },\n  },\n});\n\nconst Container = React.forwardRef(function Container(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    fixed = false,\n    maxWidth = 'lg',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes.fixed]: fixed,\n          [classes[`maxWidth${capitalize(String(maxWidth))}`]]: maxWidth !== false,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]),\n};\n\nexport default withStyles(styles, { name: 'MuiContainer' })(Container);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLElement",
      "filename": "/packages/material-ui/src/Container/Container.js",
      "inheritance": null,
      "usedInPages": [
        "/components/container"
      ]
    },
    "CssBaseline": {
      "description": "Kickstart an elegant, consistent, and simple baseline to build upon.",
      "displayName": "CssBaseline",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "You can wrap a node.",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "CssBaseline",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport makeStyles from '../styles/makeStyles';\nimport { exactProp } from '@material-ui/utils';\n\nconst useStyles = makeStyles(\n  theme => ({\n    '@global': {\n      html: {\n        WebkitFontSmoothing: 'antialiased', // Antialiasing.\n        MozOsxFontSmoothing: 'grayscale', // Antialiasing.\n        // Change from `box-sizing: content-box` so that `width`\n        // is not affected by `padding` or `border`.\n        boxSizing: 'border-box',\n      },\n      '*, *::before, *::after': {\n        boxSizing: 'inherit',\n      },\n      'strong, b': {\n        fontWeight: 'bolder',\n      },\n      body: {\n        margin: 0, // Remove the margin in all browsers.\n        color: theme.palette.text.primary,\n        ...theme.typography.body2,\n        backgroundColor: theme.palette.background.default,\n        '@media print': {\n          // Save printer ink.\n          backgroundColor: theme.palette.common.white,\n        },\n        // Add support for document.body.requestFullScreen().\n        // Other elements, if background transparent, are not supported.\n        '&::backdrop': {\n          backgroundColor: theme.palette.background.default,\n        },\n      },\n    },\n  }),\n  { name: 'MuiCssBaseline' },\n);\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\nfunction CssBaseline(props) {\n  const { children = null } = props;\n  useStyles();\n  return <React.Fragment>{children}</React.Fragment>;\n}\n\nCssBaseline.propTypes = {\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  CssBaseline['propTypes' + ''] = exactProp(CssBaseline.propTypes);\n}\n\nexport default CssBaseline;\n",
      "spread": false,
      "EOL": "\n",
      "filename": "/packages/material-ui/src/CssBaseline/CssBaseline.js",
      "inheritance": null,
      "usedInPages": [
        "/components/css-baseline"
      ]
    },
    "Dialog": {
      "description": "Dialogs are overlaid modal paper based components with a backdrop.",
      "methods": [],
      "props": {
        "aria-describedby": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id(s) of the element(s) that describe the dialog.",
          "tags": []
        },
        "aria-labelledby": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id(s) of the element(s) that label the dialog.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Dialog children, usually the included sub-components.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableBackdropClick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, clicking the backdrop will not fire the `onClose` callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableEscapeKeyDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hitting escape will not fire the `onClose` callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullScreen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the dialog will be full-screen",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the dialog stretches to `maxWidth`.\n\nNotice that the dialog width grow is limited by the default margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "maxWidth": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'xs'",
                "computed": false
              },
              {
                "value": "'sm'",
                "computed": false
              },
              {
                "value": "'md'",
                "computed": false
              },
              {
                "value": "'lg'",
                "computed": false
              },
              {
                "value": "'xl'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine the max-width of the dialog.\nThe dialog width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
          "defaultValue": {
            "value": "'sm'",
            "computed": false
          },
          "tags": []
        },
        "onBackdropClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the backdrop is clicked.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the dialog enters.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog is entering.",
          "tags": []
        },
        "onEscapeKeyDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the escape key is pressed,\n`disableKeyboard` is false and the modal is in focus.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the dialog exits.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the dialog is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the Dialog is open.",
          "tags": []
        },
        "PaperComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the body of the dialog.",
          "defaultValue": {
            "value": "Paper",
            "computed": true
          },
          "tags": []
        },
        "PaperProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Paper`](/api/paper/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "scroll": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'body'",
                "computed": false
              },
              {
                "value": "'paper'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine the container for scrolling the dialog.",
          "defaultValue": {
            "value": "'paper'",
            "computed": false
          },
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.",
          "defaultValue": {
            "value": "Fade",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `Transition` element.",
          "tags": []
        }
      },
      "name": "Dialog",
      "styles": {
        "classes": [
          "root",
          "scrollPaper",
          "scrollBody",
          "container",
          "paper",
          "paperScrollPaper",
          "paperScrollBody",
          "paperWidthFalse",
          "paperWidthXs",
          "paperWidthSm",
          "paperWidthMd",
          "paperWidthLg",
          "paperWidthXl",
          "paperFullWidth",
          "paperFullScreen"
        ],
        "name": "MuiDialog",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "scrollPaper": "Styles applied to the container element if `scroll=\"paper\"`.",
          "scrollBody": "Styles applied to the container element if `scroll=\"body\"`.",
          "container": "Styles applied to the container element.",
          "paper": "Styles applied to the `Paper` component.",
          "paperScrollPaper": "Styles applied to the `Paper` component if `scroll=\"paper\"`.",
          "paperScrollBody": "Styles applied to the `Paper` component if `scroll=\"body\"`.",
          "paperWidthFalse": "Styles applied to the `Paper` component if `maxWidth=false`.",
          "paperWidthXs": "Styles applied to the `Paper` component if `maxWidth=\"xs\"`.",
          "paperWidthSm": "Styles applied to the `Paper` component if `maxWidth=\"sm\"`.",
          "paperWidthMd": "Styles applied to the `Paper` component if `maxWidth=\"md\"`.",
          "paperWidthLg": "Styles applied to the `Paper` component if `maxWidth=\"lg\"`.",
          "paperWidthXl": "Styles applied to the `Paper` component if `maxWidth=\"xl\"`.",
          "paperFullWidth": "Styles applied to the `Paper` component if `fullWidth={true}`.",
          "paperFullScreen": "Styles applied to the `Paper` component if `fullScreen={true}`."
        },
        "globalClasses": {
          "root": "MuiDialog-root",
          "scrollPaper": "MuiDialog-scrollPaper",
          "scrollBody": "MuiDialog-scrollBody",
          "container": "MuiDialog-container",
          "paper": "MuiDialog-paper",
          "paperScrollPaper": "MuiDialog-paperScrollPaper",
          "paperScrollBody": "MuiDialog-paperScrollBody",
          "paperWidthFalse": "MuiDialog-paperWidthFalse",
          "paperWidthXs": "MuiDialog-paperWidthXs",
          "paperWidthSm": "MuiDialog-paperWidthSm",
          "paperWidthMd": "MuiDialog-paperWidthMd",
          "paperWidthLg": "MuiDialog-paperWidthLg",
          "paperWidthXl": "MuiDialog-paperWidthXl",
          "paperFullWidth": "MuiDialog-paperFullWidth",
          "paperFullScreen": "MuiDialog-paperFullScreen"
        }
      },
      "src": "/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport Modal from '../Modal';\nimport Backdrop from '../Backdrop';\nimport Fade from '../Fade';\nimport { duration } from '../styles/transitions';\nimport Paper from '../Paper';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '@media print': {\n      // Use !important to override the Modal inline-style.\n      position: 'absolute !important',\n    },\n  },\n  /* Styles applied to the container element if `scroll=\"paper\"`. */\n  scrollPaper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  /* Styles applied to the container element if `scroll=\"body\"`. */\n  scrollBody: {\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    textAlign: 'center',\n    '&:after': {\n      content: '\"\"',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      height: '100%',\n      width: '0',\n    },\n  },\n  /* Styles applied to the container element. */\n  container: {\n    height: '100%',\n    '@media print': {\n      height: 'auto',\n    },\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n  },\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    margin: 32,\n    position: 'relative',\n    overflowY: 'auto', // Fix IE 11 issue, to remove at some point.\n    '@media print': {\n      overflowY: 'visible',\n      boxShadow: 'none',\n    },\n  },\n  /* Styles applied to the `Paper` component if `scroll=\"paper\"`. */\n  paperScrollPaper: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxHeight: 'calc(100% - 64px)',\n  },\n  /* Styles applied to the `Paper` component if `scroll=\"body\"`. */\n  paperScrollBody: {\n    display: 'inline-block',\n    verticalAlign: 'middle',\n    textAlign: 'left', // 'initial' doesn't work on IE 11\n  },\n  /* Styles applied to the `Paper` component if `maxWidth=false`. */\n  paperWidthFalse: {\n    maxWidth: 'calc(100% - 64px)',\n  },\n  /* Styles applied to the `Paper` component if `maxWidth=\"xs\"`. */\n  paperWidthXs: {\n    maxWidth: Math.max(theme.breakpoints.values.xs, 444),\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)',\n      },\n    },\n  },\n  /* Styles applied to the `Paper` component if `maxWidth=\"sm\"`. */\n  paperWidthSm: {\n    maxWidth: theme.breakpoints.values.sm,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.sm + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)',\n      },\n    },\n  },\n  /* Styles applied to the `Paper` component if `maxWidth=\"md\"`. */\n  paperWidthMd: {\n    maxWidth: theme.breakpoints.values.md,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.md + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)',\n      },\n    },\n  },\n  /* Styles applied to the `Paper` component if `maxWidth=\"lg\"`. */\n  paperWidthLg: {\n    maxWidth: theme.breakpoints.values.lg,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.lg + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)',\n      },\n    },\n  },\n  /* Styles applied to the `Paper` component if `maxWidth=\"xl\"`. */\n  paperWidthXl: {\n    maxWidth: theme.breakpoints.values.xl,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.xl + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)',\n      },\n    },\n  },\n  /* Styles applied to the `Paper` component if `fullWidth={true}`. */\n  paperFullWidth: {\n    width: 'calc(100% - 64px)',\n  },\n  /* Styles applied to the `Paper` component if `fullScreen={true}`. */\n  paperFullScreen: {\n    margin: 0,\n    width: '100%',\n    maxWidth: '100%',\n    height: '100%',\n    maxHeight: 'none',\n    borderRadius: 0,\n    '&$paperScrollBody': {\n      margin: 0,\n      maxWidth: '100%',\n    },\n  },\n});\n\nconst defaultTransitionDuration = { enter: duration.enteringScreen, exit: duration.leavingScreen };\n/**\n * Dialogs are overlaid modal paper based components with a backdrop.\n */\nconst Dialog = React.forwardRef(function Dialog(props, ref) {\n  const {\n    BackdropProps,\n    children,\n    classes,\n    className,\n    disableBackdropClick = false,\n    disableEscapeKeyDown = false,\n    fullScreen = false,\n    fullWidth = false,\n    maxWidth = 'sm',\n    onBackdropClick,\n    onClose,\n    onEnter,\n    onEntered,\n    onEntering,\n    onEscapeKeyDown,\n    onExit,\n    onExited,\n    onExiting,\n    open,\n    PaperComponent = Paper,\n    PaperProps = {},\n    scroll = 'paper',\n    TransitionComponent = Fade,\n    transitionDuration = defaultTransitionDuration,\n    TransitionProps,\n    'aria-describedby': ariaDescribedby,\n    'aria-labelledby': ariaLabelledby,\n    ...other\n  } = props;\n\n  const mouseDownTarget = React.useRef();\n  const handleMouseDown = event => {\n    mouseDownTarget.current = event.target;\n  };\n  const handleBackdropClick = event => {\n    // Ignore the events not coming from the \"backdrop\"\n    // We don't want to close the dialog when clicking the dialog content.\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    // Make sure the event starts and ends on the same DOM element.\n    if (event.target !== mouseDownTarget.current) {\n      return;\n    }\n\n    mouseDownTarget.current = null;\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (!disableBackdropClick && onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  return (\n    <Modal\n      className={clsx(classes.root, className)}\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        transitionDuration,\n        ...BackdropProps,\n      }}\n      closeAfterTransition\n      disableBackdropClick={disableBackdropClick}\n      disableEscapeKeyDown={disableEscapeKeyDown}\n      onEscapeKeyDown={onEscapeKeyDown}\n      onClose={onClose}\n      open={open}\n      ref={ref}\n      {...other}\n    >\n      <TransitionComponent\n        appear\n        in={open}\n        timeout={transitionDuration}\n        onEnter={onEnter}\n        onEntering={onEntering}\n        onEntered={onEntered}\n        onExit={onExit}\n        onExiting={onExiting}\n        onExited={onExited}\n        role=\"none presentation\"\n        {...TransitionProps}\n      >\n        {/* roles are applied via cloneElement from TransitionComponent */}\n        {/* roles needs to be applied on the immediate child of Modal or it'll inject one */}\n        {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n        <div\n          className={clsx(classes.container, classes[`scroll${capitalize(scroll)}`])}\n          onClick={handleBackdropClick}\n          onMouseDown={handleMouseDown}\n          data-mui-test=\"FakeBackdrop\"\n        >\n          <PaperComponent\n            elevation={24}\n            role=\"dialog\"\n            aria-describedby={ariaDescribedby}\n            aria-labelledby={ariaLabelledby}\n            {...PaperProps}\n            className={clsx(\n              classes.paper,\n              classes[`paperScroll${capitalize(scroll)}`],\n              classes[`paperWidth${capitalize(String(maxWidth))}`],\n              {\n                [classes.paperFullScreen]: fullScreen,\n                [classes.paperFullWidth]: fullWidth,\n              },\n              PaperProps.className,\n            )}\n          >\n            {children}\n          </PaperComponent>\n        </div>\n      </TransitionComponent>\n    </Modal>\n  );\n});\n\nDialog.propTypes = {\n  /**\n   * The id(s) of the element(s) that describe the dialog.\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * The id(s) of the element(s) that label the dialog.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * @ignore\n   */\n  BackdropProps: PropTypes.object,\n  /**\n   * Dialog children, usually the included sub-components.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, clicking the backdrop will not fire the `onClose` callback.\n   */\n  disableBackdropClick: PropTypes.bool,\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n  /**\n   * If `true`, the dialog will be full-screen\n   */\n  fullScreen: PropTypes.bool,\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.\n   *\n   * Notice that the dialog width grow is limited by the default margin.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Determine the max-width of the dialog.\n   * The dialog width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]),\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired before the dialog enters.\n   */\n  onEnter: PropTypes.func,\n  /**\n   * Callback fired when the dialog has entered.\n   */\n  onEntered: PropTypes.func,\n  /**\n   * Callback fired when the dialog is entering.\n   */\n  onEntering: PropTypes.func,\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableKeyboard` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: PropTypes.func,\n  /**\n   * Callback fired before the dialog exits.\n   */\n  onExit: PropTypes.func,\n  /**\n   * Callback fired when the dialog has exited.\n   */\n  onExited: PropTypes.func,\n  /**\n   * Callback fired when the dialog is exiting.\n   */\n  onExiting: PropTypes.func,\n  /**\n   * If `true`, the Dialog is open.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * The component used to render the body of the dialog.\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * Props applied to the [`Paper`](/api/paper/) element.\n   */\n  PaperProps: PropTypes.object,\n  /**\n   * Determine the container for scrolling the dialog.\n   */\n  scroll: PropTypes.oneOf(['body', 'paper']),\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n  /**\n   * Props applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiDialog' })(Dialog);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Dialog/Dialog.js",
      "inheritance": {
        "component": "Modal",
        "pathname": "/api/modal"
      },
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogActions": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the actions do not have additional margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "DialogActions",
      "styles": {
        "classes": [
          "root",
          "spacing"
        ],
        "name": "MuiDialogActions",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "spacing": "Styles applied to the root element if `disableSpacing={false}`."
        },
        "globalClasses": {
          "root": "MuiDialogActions-root",
          "spacing": "MuiDialogActions-spacing"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport '../Button'; // So we don't have any override priority issue.\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end',\n    flex: '0 0 auto',\n  },\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > * + *': {\n      marginLeft: 8,\n    },\n  },\n};\n\nconst DialogActions = React.forwardRef(function DialogActions(props, ref) {\n  const { disableSpacing = false, classes, className, ...other } = props;\n\n  return (\n    <div\n      className={clsx(classes.root, { [classes.spacing]: !disableSpacing }, className)}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nDialogActions.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiDialogActions' })(DialogActions);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/DialogActions/DialogActions.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogContent": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "dividers": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Display the top and bottom dividers.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "DialogContent",
      "styles": {
        "classes": [
          "root",
          "dividers"
        ],
        "name": "MuiDialogContent",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "dividers": "Styles applied to the root element if `dividers={true}`."
        },
        "globalClasses": {
          "root": "MuiDialogContent-root",
          "dividers": "MuiDialogContent-dividers"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.\n    overflowY: 'auto',\n    padding: '8px 24px',\n    '&:first-child': {\n      // dialog without title\n      paddingTop: 20,\n    },\n  },\n  /* Styles applied to the root element if `dividers={true}`. */\n  dividers: {\n    padding: '16px 24px',\n    borderTop: `1px solid ${theme.palette.divider}`,\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n});\n\nconst DialogContent = React.forwardRef(function DialogContent(props, ref) {\n  const { classes, className, dividers = false, ...other } = props;\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        {\n          [classes.dividers]: dividers,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nDialogContent.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Display the top and bottom dividers.\n   */\n  dividers: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiDialogContent' })(DialogContent);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/DialogContent/DialogContent.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogContentText": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "DialogContentText",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiDialogContentText",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiDialogContentText-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12,\n  },\n};\n\nconst DialogContentText = React.forwardRef(function DialogContentText(props, ref) {\n  return <Typography component=\"p\" variant=\"body1\" color=\"textSecondary\" ref={ref} {...props} />;\n});\n\nDialogContentText.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles, { name: 'MuiDialogContentText' })(DialogContentText);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLParagraphElement",
      "filename": "/packages/material-ui/src/DialogContentText/DialogContentText.js",
      "inheritance": {
        "component": "Typography",
        "pathname": "/api/typography"
      },
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "DialogTitle": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the children won't be wrapped by a typography component.\nFor instance, this can be useful to render an h4 instead of the default h2.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "DialogTitle",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiDialogTitle",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiDialogTitle-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto',\n  },\n};\n\nconst DialogTitle = React.forwardRef(function DialogTitle(props, ref) {\n  const { children, classes, className, disableTypography = false, ...other } = props;\n\n  return (\n    <div className={clsx(classes.root, className)} ref={ref} {...other}>\n      {disableTypography ? (\n        children\n      ) : (\n        <Typography component=\"h2\" variant=\"h6\">\n          {children}\n        </Typography>\n      )}\n    </div>\n  );\n});\n\nDialogTitle.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   */\n  disableTypography: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiDialogTitle' })(DialogTitle);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/DialogTitle/DialogTitle.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dialogs"
      ]
    },
    "Divider": {
      "description": "",
      "methods": [],
      "props": {
        "absolute": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Absolutely position the element.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'hr'",
            "computed": false
          },
          "tags": []
        },
        "light": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the divider will have a lighter color.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The divider orientation.",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'fullWidth'",
                "computed": false
              },
              {
                "value": "'inset'",
                "computed": false
              },
              {
                "value": "'middle'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'fullWidth'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Divider",
      "styles": {
        "classes": [
          "root",
          "absolute",
          "inset",
          "light",
          "middle",
          "vertical"
        ],
        "name": "MuiDivider",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "absolute": "Styles applied to the root element if `absolute={true}`.",
          "inset": "Styles applied to the root element if `variant=\"inset\"`.",
          "light": "Styles applied to the root element if `light={true}`.",
          "middle": "Styles applied to the root element if `variant=\"middle\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`."
        },
        "globalClasses": {
          "root": "MuiDivider-root",
          "absolute": "MuiDivider-absolute",
          "inset": "MuiDivider-inset",
          "light": "MuiDivider-light",
          "middle": "MuiDivider-middle",
          "vertical": "MuiDivider-vertical"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    height: 1,\n    margin: 0, // Reset browser default style.\n    border: 'none',\n    flexShrink: 0,\n    backgroundColor: theme.palette.divider,\n  },\n  /* Styles applied to the root element if `absolute={true}`. */\n  absolute: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '100%',\n  },\n  /* Styles applied to the root element if `variant=\"inset\"`. */\n  inset: {\n    marginLeft: 72,\n  },\n  /* Styles applied to the root element if `light={true}`. */\n  light: {\n    backgroundColor: fade(theme.palette.divider, 0.08),\n  },\n  /* Styles applied to the root element if `variant=\"middle\"`. */\n  middle: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    height: '100%',\n    width: 1,\n  },\n});\n\nconst Divider = React.forwardRef(function Divider(props, ref) {\n  const {\n    absolute = false,\n    classes,\n    className,\n    component: Component = 'hr',\n    light = false,\n    orientation = 'horizontal',\n    role = Component !== 'hr' ? 'separator' : undefined,\n    variant = 'fullWidth',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes[variant]]: variant !== 'fullWidth',\n          [classes.absolute]: absolute,\n          [classes.light]: light,\n          [classes.vertical]: orientation === 'vertical',\n        },\n        className,\n      )}\n      role={role}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nDivider.propTypes = {\n  /**\n   * Absolutely position the element.\n   */\n  absolute: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the divider will have a lighter color.\n   */\n  light: PropTypes.bool,\n  /**\n   * The divider orientation.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['fullWidth', 'inset', 'middle']),\n};\n\nexport default withStyles(styles, { name: 'MuiDivider' })(Divider);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLHRElement",
      "filename": "/packages/material-ui/src/Divider/Divider.js",
      "inheritance": null,
      "usedInPages": [
        "/components/dividers",
        "/components/lists"
      ]
    },
    "ExpansionPanel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.node.isRequired, props => {\n  const summary = React.Children.toArray(props.children)[0];\n  if (summary.type === React.Fragment) {\n    return new Error(\n      \"Material-UI: the ExpansionPanel doesn't accept a Fragment as a child. \" +\n        'Consider providing an array instead.',\n    );\n  }\n\n  if (!React.isValidElement(summary)) {\n    return new Error(\n      'Material-UI: expected the first child of ExpansionPanel to be a valid element.',\n    );\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "The content of the expansion panel.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "defaultExpanded": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, expands the panel by default.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the panel will be displayed in a disabled state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "expanded": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, expands the panel, otherwise collapse it.\nSetting this prop enables control over the panel.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the expand/collapse state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The `expanded` state of the panel.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "expanded"
            }
          ]
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the collapse effect.",
          "defaultValue": {
            "value": "Collapse",
            "computed": true
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `Transition` element.",
          "tags": []
        }
      },
      "name": "ExpansionPanel",
      "styles": {
        "classes": [
          "root",
          "rounded",
          "expanded",
          "disabled"
        ],
        "name": "MuiExpansionPanel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "rounded": "Styles applied to the root element if `square={false}`.",
          "expanded": "Styles applied to the root element if `expanded={true}`.",
          "disabled": "Styles applied to the root element if `disabled={true}`."
        },
        "globalClasses": {
          "root": "MuiExpansionPanel-root",
          "rounded": "MuiExpansionPanel-rounded",
          "expanded": "Mui-expanded",
          "disabled": "Mui-disabled"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport Collapse from '../Collapse';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nimport ExpansionPanelContext from './ExpansionPanelContext';\n\nexport const styles = theme => {\n  const transition = {\n    duration: theme.transitions.duration.shortest,\n  };\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      transition: theme.transitions.create(['margin'], transition),\n      '&:before': {\n        position: 'absolute',\n        left: 0,\n        top: -1,\n        right: 0,\n        height: 1,\n        content: '\"\"',\n        opacity: 1,\n        backgroundColor: theme.palette.divider,\n        transition: theme.transitions.create(['opacity', 'background-color'], transition),\n      },\n      '&:first-child': {\n        '&:before': {\n          display: 'none',\n        },\n      },\n      '&$expanded': {\n        margin: '16px 0',\n        '&:first-child': {\n          marginTop: 0,\n        },\n        '&:last-child': {\n          marginBottom: 0,\n        },\n        '&:before': {\n          opacity: 0,\n        },\n      },\n      '&$expanded + &': {\n        '&:before': {\n          display: 'none',\n        },\n      },\n      '&$disabled': {\n        backgroundColor: theme.palette.action.disabledBackground,\n      },\n    },\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: 0,\n      '&:first-child': {\n        borderTopLeftRadius: theme.shape.borderRadius,\n        borderTopRightRadius: theme.shape.borderRadius,\n      },\n      '&:last-child': {\n        borderBottomLeftRadius: theme.shape.borderRadius,\n        borderBottomRightRadius: theme.shape.borderRadius,\n        // Fix a rendering issue on Edge\n        '@supports (-ms-ime-align: auto)': {\n          borderBottomLeftRadius: 0,\n          borderBottomRightRadius: 0,\n        },\n      },\n    },\n    /* Styles applied to the root element if `expanded={true}`. */\n    expanded: {},\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n  };\n};\n\nconst ExpansionPanel = React.forwardRef(function ExpansionPanel(props, ref) {\n  const {\n    children: childrenProp,\n    classes,\n    className,\n    defaultExpanded = false,\n    disabled = false,\n    expanded: expandedProp,\n    onChange,\n    square = false,\n    TransitionComponent = Collapse,\n    TransitionProps,\n    ...other\n  } = props;\n\n  const { current: isControlled } = React.useRef(expandedProp != null);\n  const [expandedState, setExpandedState] = React.useState(defaultExpanded);\n  const expanded = isControlled ? expandedProp : expandedState;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled !== (expandedProp != null)) {\n        console.error(\n          [\n            `Material-UI: A component is changing ${\n              isControlled ? 'a ' : 'an un'\n            }controlled ExpansionPanel to be ${isControlled ? 'un' : ''}controlled.`,\n            'Elements should not switch from uncontrolled to controlled (or vice versa).',\n            'Decide between using a controlled or uncontrolled ExpansionPanel ' +\n              'element for the lifetime of the component.',\n            'More info: https://fb.me/react-controlled-components',\n          ].join('\\n'),\n        );\n      }\n    }, [expandedProp, isControlled]);\n  }\n\n  const handleChange = React.useCallback(\n    event => {\n      if (!isControlled) {\n        setExpandedState(!expanded);\n      }\n\n      if (onChange) {\n        onChange(event, !expanded);\n      }\n    },\n    [expanded, isControlled, onChange],\n  );\n\n  const [summary, ...children] = React.Children.toArray(childrenProp);\n  const contextValue = React.useMemo(() => ({ expanded, disabled, toggle: handleChange }), [\n    expanded,\n    disabled,\n    handleChange,\n  ]);\n\n  return (\n    <Paper\n      className={clsx(\n        classes.root,\n        {\n          [classes.expanded]: expanded,\n          [classes.disabled]: disabled,\n          [classes.rounded]: !square,\n        },\n        className,\n      )}\n      ref={ref}\n      square={square}\n      {...other}\n    >\n      <ExpansionPanelContext.Provider value={contextValue}>\n        {summary}\n      </ExpansionPanelContext.Provider>\n      <TransitionComponent in={expanded} timeout=\"auto\" {...TransitionProps}>\n        <div aria-labelledby={summary.props.id} id={summary.props['aria-controls']} role=\"region\">\n          {children}\n        </div>\n      </TransitionComponent>\n    </Paper>\n  );\n});\n\nExpansionPanel.propTypes = {\n  /**\n   * The content of the expansion panel.\n   */\n  children: chainPropTypes(PropTypes.node.isRequired, props => {\n    const summary = React.Children.toArray(props.children)[0];\n    if (summary.type === React.Fragment) {\n      return new Error(\n        \"Material-UI: the ExpansionPanel doesn't accept a Fragment as a child. \" +\n          'Consider providing an array instead.',\n      );\n    }\n\n    if (!React.isValidElement(summary)) {\n      return new Error(\n        'Material-UI: expected the first child of ExpansionPanel to be a valid element.',\n      );\n    }\n\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, expands the panel by default.\n   */\n  defaultExpanded: PropTypes.bool,\n  /**\n   * If `true`, the panel will be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, expands the panel, otherwise collapse it.\n   * Setting this prop enables control over the panel.\n   */\n  expanded: PropTypes.bool,\n  /**\n   * Callback fired when the expand/collapse state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {boolean} expanded The `expanded` state of the panel.\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  square: PropTypes.bool,\n  /**\n   * The component used for the collapse effect.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * Props applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiExpansionPanel' })(ExpansionPanel);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanel/ExpansionPanel.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "ExpansionPanelActions": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the actions do not have additional margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ExpansionPanelActions",
      "styles": {
        "classes": [
          "root",
          "spacing"
        ],
        "name": "MuiExpansionPanelActions",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "spacing": "Styles applied to the root element if `disableSpacing={false}`."
        },
        "globalClasses": {
          "root": "MuiExpansionPanelActions-root",
          "spacing": "MuiExpansionPanelActions-spacing"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport '../Button'; // So we don't have any override priority issue.\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end',\n  },\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > * + *': {\n      marginLeft: 8,\n    },\n  },\n};\n\nconst ExpansionPanelActions = React.forwardRef(function ExpansionPanelActions(props, ref) {\n  const { classes, className, disableSpacing = false, ...other } = props;\n\n  return (\n    <div\n      className={clsx(classes.root, { [classes.spacing]: !disableSpacing }, className)}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nExpansionPanelActions.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiExpansionPanelActions' })(ExpansionPanelActions);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanelActions/ExpansionPanelActions.js",
      "inheritance": null,
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "ExpansionPanelDetails": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the expansion panel details.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ExpansionPanelDetails",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiExpansionPanelDetails",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiExpansionPanelDetails-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    padding: '8px 24px 24px',\n  },\n};\n\nconst ExpansionPanelDetails = React.forwardRef(function ExpansionPanelDetails(props, ref) {\n  const { classes, className, ...other } = props;\n\n  return <div className={clsx(classes.root, className)} ref={ref} {...other} />;\n});\n\nExpansionPanelDetails.propTypes = {\n  /**\n   * The content of the expansion panel details.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n};\n\nexport default withStyles(styles, { name: 'MuiExpansionPanelDetails' })(ExpansionPanelDetails);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanelDetails/ExpansionPanelDetails.js",
      "inheritance": null,
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "ExpansionPanelSummary": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the expansion panel summary.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "expandIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display as the expand indicator.",
          "tags": []
        },
        "IconButtonProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `IconButton` element wrapping the expand icon.",
          "tags": []
        }
      },
      "name": "ExpansionPanelSummary",
      "styles": {
        "classes": [
          "root",
          "expanded",
          "focused",
          "disabled",
          "content",
          "expandIcon"
        ],
        "name": "MuiExpansionPanelSummary",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "expanded": "Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "content": "Styles applied to the children wrapper element.",
          "expandIcon": "Styles applied to the `IconButton` component when `expandIcon` is supplied."
        },
        "globalClasses": {
          "root": "MuiExpansionPanelSummary-root",
          "expanded": "Mui-expanded",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "content": "MuiExpansionPanelSummary-content",
          "expandIcon": "MuiExpansionPanelSummary-expandIcon"
        }
      },
      "src": "/* eslint-disable jsx-a11y/aria-role */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ButtonBase from '../ButtonBase';\nimport IconButton from '../IconButton';\nimport withStyles from '../styles/withStyles';\nimport ExpansionPanelContext from '../ExpansionPanel/ExpansionPanelContext';\n\nexport const styles = theme => {\n  const transition = {\n    duration: theme.transitions.duration.shortest,\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      minHeight: 8 * 6,\n      transition: theme.transitions.create(['min-height', 'background-color'], transition),\n      padding: '0 24px 0 24px',\n      '&:hover:not($disabled)': {\n        cursor: 'pointer',\n      },\n      '&$expanded': {\n        minHeight: 64,\n      },\n      '&$focused': {\n        backgroundColor: theme.palette.grey[300],\n      },\n      '&$disabled': {\n        opacity: 0.38,\n      },\n    },\n    /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */\n    expanded: {},\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the children wrapper element. */\n    content: {\n      display: 'flex',\n      flexGrow: 1,\n      transition: theme.transitions.create(['margin'], transition),\n      margin: '12px 0',\n      '&$expanded': {\n        margin: '20px 0',\n      },\n    },\n    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */\n    expandIcon: {\n      transform: 'rotate(0deg)',\n      transition: theme.transitions.create('transform', transition),\n      '&:hover': {\n        // Disable the hover effect for the IconButton,\n        // because a hover effect should apply to the entire Expand button and\n        // not only to the IconButton.\n        backgroundColor: 'transparent',\n      },\n      '&$expanded': {\n        transform: 'rotate(180deg)',\n      },\n    },\n  };\n};\n\nconst ExpansionPanelSummary = React.forwardRef(function ExpansionPanelSummary(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    expandIcon,\n    IconButtonProps,\n    onBlur,\n    onClick,\n    onFocusVisible,\n    ...other\n  } = props;\n\n  const [focusedState, setFocusedState] = React.useState(false);\n  const handleFocusVisible = event => {\n    setFocusedState(true);\n\n    if (onFocusVisible) {\n      onFocusVisible(event);\n    }\n  };\n  const handleBlur = event => {\n    setFocusedState(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const { disabled = false, expanded, toggle } = React.useContext(ExpansionPanelContext);\n  const handleChange = event => {\n    if (toggle) {\n      toggle(event);\n    }\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    <ButtonBase\n      focusRipple={false}\n      disableRipple\n      disabled={disabled}\n      component=\"div\"\n      aria-expanded={expanded}\n      className={clsx(\n        classes.root,\n        {\n          [classes.disabled]: disabled,\n          [classes.expanded]: expanded,\n          [classes.focused]: focusedState,\n        },\n        className,\n      )}\n      onFocusVisible={handleFocusVisible}\n      onBlur={handleBlur}\n      onClick={handleChange}\n      ref={ref}\n      {...other}\n    >\n      <div className={clsx(classes.content, { [classes.expanded]: expanded })}>{children}</div>\n      {expandIcon && (\n        <IconButton\n          className={clsx(classes.expandIcon, {\n            [classes.expanded]: expanded,\n          })}\n          edge=\"end\"\n          component=\"div\"\n          tabIndex={null}\n          role={null}\n          aria-hidden\n          {...IconButtonProps}\n        >\n          {expandIcon}\n        </IconButton>\n      )}\n    </ButtonBase>\n  );\n});\n\nExpansionPanelSummary.propTypes = {\n  /**\n   * The content of the expansion panel summary.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon: PropTypes.node,\n  /**\n   * Props applied to the `IconButton` element wrapping the expand icon.\n   */\n  IconButtonProps: PropTypes.object,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n};\n\nexport default withStyles(styles, { name: 'MuiExpansionPanelSummary' })(ExpansionPanelSummary);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ExpansionPanelSummary/ExpansionPanelSummary.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/expansion-panels"
      ]
    },
    "Fab": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "href": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'large'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'round'",
                "computed": false
              },
              {
                "value": "'extended'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'round'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Fab",
      "styles": {
        "classes": [
          "root",
          "label",
          "primary",
          "secondary",
          "extended",
          "focusVisible",
          "disabled",
          "colorInherit",
          "sizeSmall",
          "sizeMedium"
        ],
        "name": "MuiFab",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "label": "Styles applied to the span element that wraps the children.",
          "primary": "Styles applied to the root element if `color=\"primary\"`.",
          "secondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "extended": "Styles applied to the root element if `variant=\"extended\"`.",
          "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"``.",
          "sizeMedium": "Styles applied to the root element if `size=\"medium\"``."
        },
        "globalClasses": {
          "root": "MuiFab-root",
          "label": "MuiFab-label",
          "primary": "MuiFab-primary",
          "secondary": "MuiFab-secondary",
          "extended": "MuiFab-extended",
          "focusVisible": "Mui-focusVisible",
          "disabled": "Mui-disabled",
          "colorInherit": "MuiFab-colorInherit",
          "sizeSmall": "MuiFab-sizeSmall",
          "sizeMedium": "MuiFab-sizeMedium"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    ...theme.typography.button,\n    boxSizing: 'border-box',\n    minHeight: 36,\n    transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n      duration: theme.transitions.duration.short,\n    }),\n    borderRadius: '50%',\n    padding: 0,\n    minWidth: 0,\n    width: 56,\n    height: 56,\n    boxShadow: theme.shadows[6],\n    '&:active': {\n      boxShadow: theme.shadows[12],\n    },\n    color: theme.palette.getContrastText(theme.palette.grey[300]),\n    backgroundColor: theme.palette.grey[300],\n    '&$focusVisible': {\n      boxShadow: theme.shadows[6],\n    },\n    '&:hover': {\n      backgroundColor: theme.palette.grey.A100,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.grey[300],\n      },\n      '&$disabled': {\n        backgroundColor: theme.palette.action.disabledBackground,\n      },\n      textDecoration: 'none',\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n      boxShadow: theme.shadows[0],\n      backgroundColor: theme.palette.action.disabledBackground,\n    },\n  },\n  /* Styles applied to the span element that wraps the children. */\n  label: {\n    width: '100%', // assure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit',\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  primary: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.primary.main,\n      },\n    },\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  secondary: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.secondary.main,\n      },\n    },\n  },\n  /* Styles applied to the root element if `variant=\"extended\"`. */\n  extended: {\n    borderRadius: 48 / 2,\n    padding: '0 16px',\n    width: 'auto',\n    minHeight: 'auto',\n    minWidth: 48,\n    height: 48,\n    '&$sizeSmall': {\n      width: 'auto',\n      padding: '0 8px',\n      borderRadius: 34 / 2,\n      minWidth: 34,\n      height: 34,\n    },\n    '&$sizeMedium': {\n      width: 'auto',\n      padding: '0 16px',\n      borderRadius: 40 / 2,\n      minWidth: 40,\n      height: 40,\n    },\n  },\n  /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n  focusVisible: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit',\n  },\n  /* Styles applied to the root element if `size=\"small\"``. */\n  sizeSmall: {\n    width: 40,\n    height: 40,\n  },\n  /* Styles applied to the root element if `size=\"medium\"``. */\n  sizeMedium: {\n    width: 48,\n    height: 48,\n  },\n});\n\nconst Fab = React.forwardRef(function Fab(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'default',\n    component = 'button',\n    disabled = false,\n    disableFocusRipple = false,\n    focusVisibleClassName,\n    size = 'large',\n    variant = 'round',\n    ...other\n  } = props;\n\n  return (\n    <ButtonBase\n      className={clsx(\n        classes.root,\n        {\n          [classes.extended]: variant === 'extended',\n          [classes.primary]: color === 'primary',\n          [classes.secondary]: color === 'secondary',\n          [classes[`size${capitalize(size)}`]]: size !== 'large',\n          [classes.disabled]: disabled,\n          [classes.colorInherit]: color === 'inherit',\n        },\n        className,\n      )}\n      component={component}\n      disabled={disabled}\n      focusRipple={!disableFocusRipple}\n      focusVisibleClassName={clsx(classes.focusVisible, focusVisibleClassName)}\n      ref={ref}\n      {...other}\n    >\n      <span className={classes.label}>{children}</span>\n    </ButtonBase>\n  );\n});\n\nFab.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['round', 'extended']),\n};\n\nexport default withStyles(styles, { name: 'MuiFab' })(Fab);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/Fab/Fab.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/buttons"
      ]
    },
    "Fade": {
      "description": "The Fade transition is used by the [Modal](/components/modal/) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will transition in.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Fade",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nimport useForkRef from '../utils/useForkRef';\n\nconst styles = {\n  entering: {\n    opacity: 1,\n  },\n  entered: {\n    opacity: 1,\n  },\n};\n\nconst defaultTimeout = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n};\n\n/**\n * The Fade transition is used by the [Modal](/components/modal/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\nconst Fade = React.forwardRef(function Fade(props, ref) {\n  const {\n    children,\n    in: inProp,\n    onEnter,\n    onExit,\n    style,\n    timeout = defaultTimeout,\n    ...other\n  } = props;\n  const theme = useTheme();\n  const handleRef = useForkRef(children.ref, ref);\n\n  const handleEnter = (node, isAppearing) => {\n    reflow(node); // So the animation always start from the start.\n\n    const transitionProps = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'enter',\n      },\n    );\n    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);\n    node.style.transition = theme.transitions.create('opacity', transitionProps);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleExit = node => {\n    const transitionProps = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'exit',\n      },\n    );\n    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);\n    node.style.transition = theme.transitions.create('opacity', transitionProps);\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  return (\n    <Transition\n      appear\n      in={inProp}\n      onEnter={handleEnter}\n      onExit={handleExit}\n      timeout={timeout}\n      {...other}\n    >\n      {(state, childProps) => {\n        return React.cloneElement(children, {\n          style: {\n            opacity: 0,\n            visibility: state === 'exited' && !inProp ? 'hidden' : undefined,\n            ...styles[state],\n            ...style,\n            ...children.props.style,\n          },\n          ref: handleRef,\n          ...childProps,\n        });\n      }}\n    </Transition>\n  );\n});\n\nFade.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.element,\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n};\n\nexport default Fade;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Fade/Fade.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/transitions"
      ]
    },
    "FilledInput": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "disableUnderline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will not have an underline.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "FilledInput",
      "styles": {
        "classes": [
          "root",
          "colorSecondary",
          "underline",
          "focused",
          "disabled",
          "adornedStart",
          "adornedEnd",
          "error",
          "marginDense",
          "multiline",
          "input",
          "inputMarginDense",
          "inputHiddenLabel",
          "inputSelect",
          "inputMultiline",
          "inputAdornedStart",
          "inputAdornedEnd"
        ],
        "name": "MuiFilledInput",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorSecondary": "Styles applied to the root element if color secondary.",
          "underline": "Styles applied to the root element if `disableUnderline={false}`.",
          "focused": "Pseudo-class applied to the root element if the component is focused.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
          "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
          "error": "Styles applied to the root element if `error={true}`.",
          "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputHiddenLabel": "Styles applied to the `input` if in `<FormControl hiddenLabel />`.",
          "inputSelect": "Styles applied to the `input` element if `select={true}`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
          "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
        },
        "globalClasses": {
          "root": "MuiFilledInput-root",
          "colorSecondary": "MuiFilledInput-colorSecondary",
          "underline": "MuiFilledInput-underline",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "adornedStart": "MuiFilledInput-adornedStart",
          "adornedEnd": "MuiFilledInput-adornedEnd",
          "error": "Mui-error",
          "marginDense": "MuiFilledInput-marginDense",
          "multiline": "MuiFilledInput-multiline",
          "input": "MuiFilledInput-input",
          "inputMarginDense": "MuiFilledInput-inputMarginDense",
          "inputHiddenLabel": "MuiFilledInput-inputHiddenLabel",
          "inputSelect": "MuiFilledInput-inputSelect",
          "inputMultiline": "MuiFilledInput-inputMultiline",
          "inputAdornedStart": "MuiFilledInput-inputAdornedStart",
          "inputAdornedEnd": "MuiFilledInput-inputAdornedEnd"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport InputBase from '../InputBase';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => {\n  const light = theme.palette.type === 'light';\n  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';\n  const backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      backgroundColor,\n      borderTopLeftRadius: theme.shape.borderRadius,\n      borderTopRightRadius: theme.shape.borderRadius,\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shorter,\n        easing: theme.transitions.easing.easeOut,\n      }),\n      '&:hover': {\n        backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor,\n        },\n      },\n      '&$focused': {\n        backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)',\n      },\n      '&$disabled': {\n        backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)',\n      },\n    },\n    /* Styles applied to the root element if color secondary. */\n    colorSecondary: {\n      '&$underline:after': {\n        borderBottomColor: theme.palette.secondary.main,\n      },\n    },\n    /* Styles applied to the root element if `disableUnderline={false}`. */\n    underline: {\n      '&:after': {\n        borderBottom: `2px solid ${theme.palette.primary.main}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut,\n        }),\n        pointerEvents: 'none', // Transparent to the hover style.\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)',\n      },\n      '&$error:after': {\n        borderBottomColor: theme.palette.error.main,\n        transform: 'scaleX(1)', // error is always underlined in red\n      },\n      '&:before': {\n        borderBottom: `1px solid ${bottomLineColor}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\\\\00a0\"',\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('border-bottom-color', {\n          duration: theme.transitions.duration.shorter,\n        }),\n        pointerEvents: 'none', // Transparent to the hover style.\n      },\n      '&:hover:before': {\n        borderBottom: `1px solid ${theme.palette.text.primary}`,\n      },\n      '&$disabled:before': {\n        borderBottomStyle: 'dotted',\n      },\n    },\n    /* Pseudo-class applied to the root element if the component is focused. */\n    focused: {},\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {\n      paddingLeft: 12,\n    },\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {\n      paddingRight: 12,\n    },\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: '27px 12px 10px',\n      '&$marginDense': {\n        paddingTop: 23,\n        paddingBottom: 6,\n      },\n    },\n    /* Styles applied to the `input` element. */\n    input: {\n      padding: '27px 12px 10px',\n      '&:-webkit-autofill': {\n        WebkitBoxShadow: theme.palette.type === 'dark' ? '0 0 0 100px #266798 inset' : null,\n        WebkitTextFillColor: theme.palette.type === 'dark' ? '#fff' : null,\n        borderTopLeftRadius: 'inherit',\n        borderTopRightRadius: 'inherit',\n      },\n    },\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 23,\n      paddingBottom: 6,\n    },\n    /* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */\n    inputHiddenLabel: {\n      paddingTop: 18,\n      paddingBottom: 19,\n      '&$inputMarginDense': {\n        paddingTop: 10,\n        paddingBottom: 11,\n      },\n    },\n    /* Styles applied to the `input` element if `select={true}`. */\n    inputSelect: {\n      paddingRight: 24,\n    },\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      padding: 0,\n    },\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {\n      paddingLeft: 0,\n    },\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {\n      paddingRight: 0,\n    },\n  };\n};\n\nconst FilledInput = React.forwardRef(function FilledInput(props, ref) {\n  const {\n    disableUnderline,\n    classes,\n    fullWidth = false,\n    inputComponent = 'input',\n    multiline = false,\n    type = 'text',\n    ...other\n  } = props;\n\n  return (\n    <InputBase\n      classes={{\n        ...classes,\n        root: clsx(classes.root, {\n          [classes.underline]: !disableUnderline,\n        }),\n        underline: null,\n      }}\n      fullWidth={fullWidth}\n      inputComponent={inputComponent}\n      multiline={multiline}\n      ref={ref}\n      type={type}\n      {...other}\n    />\n  );\n});\n\nFilledInput.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline: PropTypes.bool,\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n};\n\nFilledInput.muiName = 'Input';\n\nexport default withStyles(styles, { name: 'MuiFilledInput' })(FilledInput);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/FilledInput/FilledInput.js",
      "inheritance": {
        "component": "InputBase",
        "pathname": "/api/input-base"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "FormControlLabel": {
      "description": "Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\nUse this component if you want to display an extra label.",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component appears selected.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "control": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the control will be disabled.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The text to be used in an enclosing label element.",
          "tags": []
        },
        "labelPlacement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'end'",
                "computed": false
              },
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The position of the label.",
          "defaultValue": {
            "value": "'end'",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component.",
          "tags": []
        }
      },
      "name": "FormControlLabel",
      "styles": {
        "classes": [
          "root",
          "labelPlacementStart",
          "labelPlacementTop",
          "labelPlacementBottom",
          "disabled",
          "label"
        ],
        "name": "MuiFormControlLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "labelPlacementStart": "Styles applied to the root element if `labelPlacement=\"start\"`.",
          "labelPlacementTop": "Styles applied to the root element if `labelPlacement=\"top\"`.",
          "labelPlacementBottom": "Styles applied to the root element if `labelPlacement=\"bottom\"`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "label": "Styles applied to the label's Typography component."
        },
        "globalClasses": {
          "root": "MuiFormControlLabel-root",
          "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
          "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
          "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
          "disabled": "Mui-disabled",
          "label": "MuiFormControlLabel-label"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport { useFormControl } from '../FormControl';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    marginLeft: -11,\n    marginRight: 16, // used for row presentation of radio/checkbox\n    '&$disabled': {\n      cursor: 'default',\n    },\n  },\n  /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n  labelPlacementStart: {\n    flexDirection: 'row-reverse',\n    marginLeft: 16, // used for row presentation of radio/checkbox\n    marginRight: -11,\n  },\n  /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n  labelPlacementTop: {\n    flexDirection: 'column-reverse',\n    marginLeft: 16,\n  },\n  /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n  labelPlacementBottom: {\n    flexDirection: 'column',\n    marginLeft: 16,\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the label's Typography component. */\n  label: {\n    '&$disabled': {\n      color: theme.palette.text.disabled,\n    },\n  },\n});\n\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\nconst FormControlLabel = React.forwardRef(function FormControlLabel(props, ref) {\n  const {\n    checked,\n    classes,\n    className,\n    control,\n    disabled: disabledProp,\n    inputRef,\n    label,\n    labelPlacement = 'end',\n    name,\n    onChange,\n    value,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n\n  let disabled = disabledProp;\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  const controlProps = {\n    disabled,\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n\n  return (\n    <label\n      className={clsx(\n        classes.root,\n        {\n          [classes[`labelPlacement${capitalize(labelPlacement)}`]]: labelPlacement !== 'end',\n          [classes.disabled]: disabled,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {React.cloneElement(control, controlProps)}\n      <Typography\n        component=\"span\"\n        className={clsx(classes.label, { [classes.disabled]: disabled })}\n      >\n        {label}\n      </Typography>\n    </label>\n  );\n});\n\nFormControlLabel.propTypes = {\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element,\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n  /**\n   * The position of the label.\n   */\n  labelPlacement: PropTypes.oneOf(['end', 'start', 'top', 'bottom']),\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiFormControlLabel' })(FormControlLabel);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLabelElement",
      "filename": "/packages/material-ui/src/FormControlLabel/FormControlLabel.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/radio-buttons",
        "/components/switches"
      ]
    },
    "FormGroup": {
      "description": "`FormGroup` wraps controls such as `Checkbox` and `Switch`.\nIt provides compact row layout.\nFor the `Radio`, you should be using the `RadioGroup` component instead of this one.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "row": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Display group of elements in a compact row.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "FormGroup",
      "styles": {
        "classes": [
          "root",
          "row"
        ],
        "name": "MuiFormGroup",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "row": "Styles applied to the root element if `row={true}`."
        },
        "globalClasses": {
          "root": "MuiFormGroup-root",
          "row": "MuiFormGroup-row"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n  },\n  /* Styles applied to the root element if `row={true}`. */\n  row: {\n    flexDirection: 'row',\n  },\n};\n\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\nconst FormGroup = React.forwardRef(function FormGroup(props, ref) {\n  const { classes, className, row = false, ...other } = props;\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        {\n          [classes.row]: row,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nFormGroup.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Display group of elements in a compact row.\n   */\n  row: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiFormGroup' })(FormGroup);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/FormGroup/FormGroup.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/switches"
      ]
    },
    "FormHelperText": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'p'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should be displayed in a disabled state.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, helper text should be displayed in an error state.",
          "tags": []
        },
        "filled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should use filled classes key.",
          "tags": []
        },
        "focused": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should use focused classes key.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the helper text should use required classes key.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "tags": []
        }
      },
      "name": "FormHelperText",
      "styles": {
        "classes": [
          "root",
          "error",
          "disabled",
          "marginDense",
          "contained",
          "focused",
          "filled",
          "required"
        ],
        "name": "MuiFormHelperText",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
          "contained": "Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "filled": "Pseudo-class applied to the root element if `filled={true}`.",
          "required": "Pseudo-class applied to the root element if `required={true}`."
        },
        "globalClasses": {
          "root": "MuiFormHelperText-root",
          "error": "Mui-error",
          "disabled": "Mui-disabled",
          "marginDense": "MuiFormHelperText-marginDense",
          "contained": "MuiFormHelperText-contained",
          "focused": "Mui-focused",
          "filled": "MuiFormHelperText-filled",
          "required": "Mui-required"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.secondary,\n    ...theme.typography.caption,\n    textAlign: 'left',\n    marginTop: 8,\n    lineHeight: '1em',\n    minHeight: '1em',\n    margin: 0,\n    '&$disabled': {\n      color: theme.palette.text.disabled,\n    },\n    '&$error': {\n      color: theme.palette.error.main,\n    },\n  },\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 4,\n  },\n  /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n  contained: {\n    margin: '8px 14px 0',\n  },\n  /* Pseudo-class applied to the root element if `focused={true}`. */\n  focused: {},\n  /* Pseudo-class applied to the root element if `filled={true}`. */\n  filled: {},\n  /* Pseudo-class applied to the root element if `required={true}`. */\n  required: {},\n});\n\nconst FormHelperText = React.forwardRef(function FormHelperText(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'p',\n    disabled,\n    error,\n    filled,\n    focused,\n    margin,\n    required,\n    variant,\n    ...other\n  } = props;\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required'],\n  });\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes.contained]: fcs.variant === 'filled' || fcs.variant === 'outlined',\n          [classes.marginDense]: fcs.margin === 'dense',\n          [classes.disabled]: fcs.disabled,\n          [classes.error]: fcs.error,\n          [classes.filled]: fcs.filled,\n          [classes.focused]: fcs.focused,\n          [classes.required]: fcs.required,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nFormHelperText.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n\nexport default withStyles(styles, { name: 'MuiFormHelperText' })(FormHelperText);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLParagraphElement",
      "filename": "/packages/material-ui/src/FormHelperText/FormHelperText.js",
      "inheritance": null,
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "FormLabel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'label'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should be displayed in a disabled state.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should be displayed in an error state.",
          "tags": []
        },
        "filled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should use filled classes key.",
          "tags": []
        },
        "focused": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input of this label is focused (used by `FormGroup` components).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will indicate that the input is required.",
          "tags": []
        }
      },
      "name": "FormLabel",
      "styles": {
        "classes": [
          "root",
          "colorSecondary",
          "focused",
          "disabled",
          "error",
          "filled",
          "required",
          "asterisk"
        ],
        "name": "MuiFormLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorSecondary": "Styles applied to the root element if the color is secondary.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "filled": "Pseudo-class applied to the root element if `filled={true}`.",
          "required": "Pseudo-class applied to the root element if `required={true}`.",
          "asterisk": "Styles applied to the asterisk element."
        },
        "globalClasses": {
          "root": "MuiFormLabel-root",
          "colorSecondary": "MuiFormLabel-colorSecondary",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "filled": "MuiFormLabel-filled",
          "required": "Mui-required",
          "asterisk": "MuiFormLabel-asterisk"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.secondary,\n    ...theme.typography.body1,\n    lineHeight: 1,\n    padding: 0,\n    '&$focused': {\n      color: theme.palette.primary.main,\n    },\n    '&$disabled': {\n      color: theme.palette.text.disabled,\n    },\n    '&$error': {\n      color: theme.palette.error.main,\n    },\n  },\n  /* Styles applied to the root element if the color is secondary. */\n  colorSecondary: {\n    '&$focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n  /* Pseudo-class applied to the root element if `focused={true}`. */\n  focused: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n  /* Pseudo-class applied to the root element if `filled={true}`. */\n  filled: {},\n  /* Pseudo-class applied to the root element if `required={true}`. */\n  required: {},\n  /* Styles applied to the asterisk element. */\n  asterisk: {\n    '&$error': {\n      color: theme.palette.error.main,\n    },\n  },\n});\n\nconst FormLabel = React.forwardRef(function FormLabel(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color,\n    component: Component = 'label',\n    disabled,\n    error,\n    filled,\n    focused,\n    required,\n    ...other\n  } = props;\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled'],\n  });\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        classes[`color${capitalize(fcs.color || 'primary')}`],\n        {\n          [classes.disabled]: fcs.disabled,\n          [classes.error]: fcs.error,\n          [classes.filled]: fcs.filled,\n          [classes.focused]: fcs.focused,\n          [classes.required]: fcs.required,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {children}\n      {fcs.required && (\n        <span\n          className={clsx(classes.asterisk, {\n            [classes.error]: fcs.error,\n          })}\n        >\n          &thinsp;{'*'}\n        </span>\n      )}\n    </Component>\n  );\n});\n\nFormLabel.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled: PropTypes.bool,\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused: PropTypes.bool,\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiFormLabel' })(FormLabel);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLabelElement",
      "filename": "/packages/material-ui/src/FormLabel/FormLabel.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/radio-buttons",
        "/components/switches"
      ]
    },
    "Grid": {
      "description": "",
      "displayName": "ForwardRef(Grid)",
      "methods": [],
      "props": {
        "alignContent": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'stretch'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'flex-end'",
                "computed": false
              },
              {
                "value": "'space-between'",
                "computed": false
              },
              {
                "value": "'space-around'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `align-content` style property.\nIt's applied for all screen sizes.",
          "defaultValue": {
            "value": "'stretch'",
            "computed": false
          },
          "tags": []
        },
        "alignItems": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'flex-end'",
                "computed": false
              },
              {
                "value": "'stretch'",
                "computed": false
              },
              {
                "value": "'baseline'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `align-items` style property.\nIt's applied for all screen sizes.",
          "defaultValue": {
            "value": "'stretch'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "container": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will have the flex *container* behavior.\nYou should be wrapping *items* with a *container*.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'row'",
                "computed": false
              },
              {
                "value": "'row-reverse'",
                "computed": false
              },
              {
                "value": "'column'",
                "computed": false
              },
              {
                "value": "'column-reverse'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `flex-direction` style property.\nIt is applied for all screen sizes.",
          "defaultValue": {
            "value": "'row'",
            "computed": false
          },
          "tags": []
        },
        "item": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will have the flex *item* behavior.\nYou should be wrapping *items* with a *container*.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "justify": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'flex-end'",
                "computed": false
              },
              {
                "value": "'space-between'",
                "computed": false
              },
              {
                "value": "'space-around'",
                "computed": false
              },
              {
                "value": "'space-evenly'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `justify-content` style property.\nIt is applied for all screen sizes.",
          "defaultValue": {
            "value": "'flex-start'",
            "computed": false
          },
          "tags": []
        },
        "lg": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `lg` breakpoint and wider screens if not overridden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "md": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `md` breakpoint and wider screens if not overridden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "sm": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `sm` breakpoint and wider screens if not overridden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "spacing": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the space between the type `item` component.\nIt can only be used on a type `container` component.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "wrap": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'nowrap'",
                "computed": false
              },
              {
                "value": "'wrap'",
                "computed": false
              },
              {
                "value": "'wrap-reverse'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `flex-wrap` style property.\nIt's applied for all screen sizes.",
          "defaultValue": {
            "value": "'wrap'",
            "computed": false
          },
          "tags": []
        },
        "xl": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for the `xl` breakpoint and wider screens.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xs": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              },
              {
                "value": "7",
                "computed": false
              },
              {
                "value": "8",
                "computed": false
              },
              {
                "value": "9",
                "computed": false
              },
              {
                "value": "10",
                "computed": false
              },
              {
                "value": "11",
                "computed": false
              },
              {
                "value": "12",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the number of grids the component is going to use.\nIt's applied for all the screen sizes with the lowest priority.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "zeroMinWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, it sets `min-width: 0` on the item.\nRefer to the limitations section of the documentation to better understand the use case.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Grid",
      "styles": {
        "classes": [
          "root",
          "container",
          "item",
          "zeroMinWidth",
          "direction-xs-column",
          "direction-xs-column-reverse",
          "direction-xs-row-reverse",
          "wrap-xs-nowrap",
          "wrap-xs-wrap-reverse",
          "align-items-xs-center",
          "align-items-xs-flex-start",
          "align-items-xs-flex-end",
          "align-items-xs-baseline",
          "align-content-xs-center",
          "align-content-xs-flex-start",
          "align-content-xs-flex-end",
          "align-content-xs-space-between",
          "align-content-xs-space-around",
          "justify-xs-center",
          "justify-xs-flex-end",
          "justify-xs-space-between",
          "justify-xs-space-around",
          "justify-xs-space-evenly",
          "spacing-xs-1",
          "spacing-xs-2",
          "spacing-xs-3",
          "spacing-xs-4",
          "spacing-xs-5",
          "spacing-xs-6",
          "spacing-xs-7",
          "spacing-xs-8",
          "spacing-xs-9",
          "spacing-xs-10",
          "grid-xs-auto",
          "grid-xs-true",
          "grid-xs-1",
          "grid-xs-2",
          "grid-xs-3",
          "grid-xs-4",
          "grid-xs-5",
          "grid-xs-6",
          "grid-xs-7",
          "grid-xs-8",
          "grid-xs-9",
          "grid-xs-10",
          "grid-xs-11",
          "grid-xs-12"
        ],
        "name": "MuiGrid",
        "descriptions": {
          "root": "Styles applied to the root element",
          "container": "Styles applied to the root element if `container={true}`.",
          "item": "Styles applied to the root element if `item={true}`.",
          "zeroMinWidth": "Styles applied to the root element if `zeroMinWidth={true}`.",
          "": "Styles applied to the root element if `justify=\"space-evenly\"`."
        },
        "globalClasses": {
          "root": "MuiGrid-root",
          "container": "MuiGrid-container",
          "item": "MuiGrid-item",
          "zeroMinWidth": "MuiGrid-zeroMinWidth",
          "direction-xs-column": "MuiGrid-direction-xs-column",
          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
          "align-items-xs-center": "MuiGrid-align-items-xs-center",
          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
          "align-content-xs-center": "MuiGrid-align-content-xs-center",
          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
          "justify-xs-center": "MuiGrid-justify-xs-center",
          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
          "spacing-xs-1": "MuiGrid-spacing-xs-1",
          "spacing-xs-2": "MuiGrid-spacing-xs-2",
          "spacing-xs-3": "MuiGrid-spacing-xs-3",
          "spacing-xs-4": "MuiGrid-spacing-xs-4",
          "spacing-xs-5": "MuiGrid-spacing-xs-5",
          "spacing-xs-6": "MuiGrid-spacing-xs-6",
          "spacing-xs-7": "MuiGrid-spacing-xs-7",
          "spacing-xs-8": "MuiGrid-spacing-xs-8",
          "spacing-xs-9": "MuiGrid-spacing-xs-9",
          "spacing-xs-10": "MuiGrid-spacing-xs-10",
          "grid-xs-auto": "MuiGrid-grid-xs-auto",
          "grid-xs-true": "MuiGrid-grid-xs-true",
          "grid-xs-1": "MuiGrid-grid-xs-1",
          "grid-xs-2": "MuiGrid-grid-xs-2",
          "grid-xs-3": "MuiGrid-grid-xs-3",
          "grid-xs-4": "MuiGrid-grid-xs-4",
          "grid-xs-5": "MuiGrid-grid-xs-5",
          "grid-xs-6": "MuiGrid-grid-xs-6",
          "grid-xs-7": "MuiGrid-grid-xs-7",
          "grid-xs-8": "MuiGrid-grid-xs-8",
          "grid-xs-9": "MuiGrid-grid-xs-9",
          "grid-xs-10": "MuiGrid-grid-xs-10",
          "grid-xs-11": "MuiGrid-grid-xs-11",
          "grid-xs-12": "MuiGrid-grid-xs-12"
        }
      },
      "src": "// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport requirePropFactory from '../utils/requirePropFactory';\n\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nfunction generateGrid(globalStyles, theme, breakpoint) {\n  const styles = {};\n\n  GRID_SIZES.forEach(size => {\n    const key = `grid-${breakpoint}-${size}`;\n\n    if (size === true) {\n      // For the auto layouting\n      styles[key] = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%',\n      };\n      return;\n    }\n\n    if (size === 'auto') {\n      styles[key] = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        maxWidth: 'none',\n      };\n      return;\n    }\n\n    // Keep 7 significant numbers.\n    const width = `${Math.round((size / 12) * 10e7) / 10e5}%`;\n\n    // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n    styles[key] = {\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width,\n    };\n  });\n\n  // No need for a media query for the first size.\n  if (breakpoint === 'xs') {\n    Object.assign(globalStyles, styles);\n  } else {\n    globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n  }\n}\n\nfunction getOffset(val, div = 1) {\n  const parse = parseFloat(val);\n  return `${parse / div}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nfunction generateGutter(theme, breakpoint) {\n  const styles = {};\n\n  SPACINGS.forEach(spacing => {\n    const themeSpacing = theme.spacing(spacing);\n\n    if (themeSpacing === 0) {\n      return;\n    }\n\n    styles[`spacing-${breakpoint}-${spacing}`] = {\n      margin: `-${getOffset(themeSpacing, 2)}`,\n      width: `calc(100% + ${getOffset(themeSpacing)})`,\n      '& > $item': {\n        padding: getOffset(themeSpacing, 2),\n      },\n    };\n  });\n\n  return styles;\n}\n\n// Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\nexport const styles = theme => ({\n  /* Styles applied to the root element */\n  root: {},\n  /* Styles applied to the root element if `container={true}`. */\n  container: {\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n  },\n  /* Styles applied to the root element if `item={true}`. */\n  item: {\n    boxSizing: 'border-box',\n    margin: '0', // For instance, it's useful when used with a `figure` element.\n  },\n  /* Styles applied to the root element if `zeroMinWidth={true}`. */\n  zeroMinWidth: {\n    minWidth: 0,\n  },\n  /* Styles applied to the root element if `direction=\"column\"`. */\n  'direction-xs-column': {\n    flexDirection: 'column',\n  },\n  /* Styles applied to the root element if `direction=\"column-reverse\"`. */\n  'direction-xs-column-reverse': {\n    flexDirection: 'column-reverse',\n  },\n  /* Styles applied to the root element if `direction=\"rwo-reverse\"`. */\n  'direction-xs-row-reverse': {\n    flexDirection: 'row-reverse',\n  },\n  /* Styles applied to the root element if `wrap=\"nowrap\"`. */\n  'wrap-xs-nowrap': {\n    flexWrap: 'nowrap',\n  },\n  /* Styles applied to the root element if `wrap=\"reverse\"`. */\n  'wrap-xs-wrap-reverse': {\n    flexWrap: 'wrap-reverse',\n  },\n  /* Styles applied to the root element if `alignItems=\"center\"`. */\n  'align-items-xs-center': {\n    alignItems: 'center',\n  },\n  /* Styles applied to the root element if `alignItems=\"flex-start\"`. */\n  'align-items-xs-flex-start': {\n    alignItems: 'flex-start',\n  },\n  /* Styles applied to the root element if `alignItems=\"flex-end\"`. */\n  'align-items-xs-flex-end': {\n    alignItems: 'flex-end',\n  },\n  /* Styles applied to the root element if `alignItems=\"baseline\"`. */\n  'align-items-xs-baseline': {\n    alignItems: 'baseline',\n  },\n  /* Styles applied to the root element if `alignContent=\"center\"`. */\n  'align-content-xs-center': {\n    alignContent: 'center',\n  },\n  /* Styles applied to the root element if `alignContent=\"flex-start\"`. */\n  'align-content-xs-flex-start': {\n    alignContent: 'flex-start',\n  },\n  /* Styles applied to the root element if `alignContent=\"flex-end\"`. */\n  'align-content-xs-flex-end': {\n    alignContent: 'flex-end',\n  },\n  /* Styles applied to the root element if `alignContent=\"space-between\"`. */\n  'align-content-xs-space-between': {\n    alignContent: 'space-between',\n  },\n  /* Styles applied to the root element if `alignContent=\"space-around\"`. */\n  'align-content-xs-space-around': {\n    alignContent: 'space-around',\n  },\n  /* Styles applied to the root element if `justify=\"center\"`. */\n  'justify-xs-center': {\n    justifyContent: 'center',\n  },\n  /* Styles applied to the root element if `justify=\"flex-end\"`. */\n  'justify-xs-flex-end': {\n    justifyContent: 'flex-end',\n  },\n  /* Styles applied to the root element if `justify=\"space-between\"`. */\n  'justify-xs-space-between': {\n    justifyContent: 'space-between',\n  },\n  /* Styles applied to the root element if `justify=\"space-around\"`. */\n  'justify-xs-space-around': {\n    justifyContent: 'space-around',\n  },\n  /* Styles applied to the root element if `justify=\"space-evenly\"`. */\n  'justify-xs-space-evenly': {\n    justifyContent: 'space-evenly',\n  },\n  ...generateGutter(theme, 'xs'),\n  ...theme.breakpoints.keys.reduce((accumulator, key) => {\n    // Use side effect over immutability for better performance.\n    generateGrid(accumulator, theme, key);\n    return accumulator;\n  }, {}),\n});\n\nconst Grid = React.forwardRef((props, ref) => {\n  const {\n    alignContent = 'stretch',\n    alignItems = 'stretch',\n    classes,\n    className: classNameProp,\n    component: Component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    justify = 'flex-start',\n    lg = false,\n    md = false,\n    sm = false,\n    spacing = 0,\n    wrap = 'wrap',\n    xl = false,\n    xs = false,\n    zeroMinWidth = false,\n    ...other\n  } = props;\n\n  const className = clsx(\n    classes.root,\n    {\n      [classes.container]: container,\n      [classes.item]: item,\n      [classes.zeroMinWidth]: zeroMinWidth,\n      [classes[`spacing-xs-${String(spacing)}`]]: container && spacing !== 0,\n      [classes[`direction-xs-${String(direction)}`]]: direction !== 'row',\n      [classes[`wrap-xs-${String(wrap)}`]]: wrap !== 'wrap',\n      [classes[`align-items-xs-${String(alignItems)}`]]: alignItems !== 'stretch',\n      [classes[`align-content-xs-${String(alignContent)}`]]: alignContent !== 'stretch',\n      [classes[`justify-xs-${String(justify)}`]]: justify !== 'flex-start',\n      [classes[`grid-xs-${String(xs)}`]]: xs !== false,\n      [classes[`grid-sm-${String(sm)}`]]: sm !== false,\n      [classes[`grid-md-${String(md)}`]]: md !== false,\n      [classes[`grid-lg-${String(lg)}`]]: lg !== false,\n      [classes[`grid-xl-${String(xl)}`]]: xl !== false,\n    },\n    classNameProp,\n  );\n\n  return <Component className={className} ref={ref} {...other} />;\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  // can't use named function expression since the function body references `Grid`\n  // which would point to the render function instead of the actual component\n  Grid.displayName = 'ForwardRef(Grid)';\n}\n\nGrid.propTypes = {\n  /**\n   * Defines the `align-content` style property.\n   * It's applied for all screen sizes.\n   */\n  alignContent: PropTypes.oneOf([\n    'stretch',\n    'center',\n    'flex-start',\n    'flex-end',\n    'space-between',\n    'space-around',\n  ]),\n  /**\n   * Defines the `align-items` style property.\n   * It's applied for all screen sizes.\n   */\n  alignItems: PropTypes.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   */\n  container: PropTypes.bool,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   */\n  direction: PropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   */\n  item: PropTypes.bool,\n  /**\n   * Defines the `justify-content` style property.\n   * It is applied for all screen sizes.\n   */\n  justify: PropTypes.oneOf([\n    'flex-start',\n    'center',\n    'flex-end',\n    'space-between',\n    'space-around',\n    'space-evenly',\n  ]),\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `lg` breakpoint and wider screens if not overridden.\n   */\n  lg: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `md` breakpoint and wider screens if not overridden.\n   */\n  md: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `sm` breakpoint and wider screens if not overridden.\n   */\n  sm: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n  /**\n   * Defines the space between the type `item` component.\n   * It can only be used on a type `container` component.\n   */\n  spacing: PropTypes.oneOf(SPACINGS),\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `xl` breakpoint and wider screens.\n   */\n  xl: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for all the screen sizes with the lowest priority.\n   */\n  xs: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   */\n  zeroMinWidth: PropTypes.bool,\n};\n\nconst StyledGrid = withStyles(styles, { name: 'MuiGrid' })(Grid);\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid');\n  StyledGrid.propTypes = {\n    ...StyledGrid.propTypes,\n    alignContent: requireProp('container'),\n    alignItems: requireProp('container'),\n    direction: requireProp('container'),\n    justify: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item'),\n  };\n}\n\nexport default StyledGrid;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Grid/Grid.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid"
      ]
    },
    "GridList": {
      "description": "",
      "methods": [],
      "props": {
        "cellHeight": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "Number of px for one cell height.\nYou can set `'auto'` if you want to let the children determine the height.",
          "defaultValue": {
            "value": "180",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Grid Tiles that will be in Grid List.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "cols": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Number of columns.",
          "defaultValue": {
            "value": "2",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'ul'",
            "computed": false
          },
          "tags": []
        },
        "spacing": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Number of px for the spacing between tiles.",
          "defaultValue": {
            "value": "4",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "GridList",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiGridList",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiGridList-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    overflowY: 'auto',\n    listStyle: 'none',\n    padding: 0,\n    WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.\n  },\n};\n\nconst GridList = React.forwardRef(function GridList(props, ref) {\n  const {\n    cellHeight = 180,\n    children,\n    classes,\n    className,\n    cols = 2,\n    component: Component = 'ul',\n    spacing = 4,\n    style,\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(classes.root, className)}\n      ref={ref}\n      style={{ margin: -spacing / 2, ...style }}\n      {...other}\n    >\n      {React.Children.map(children, child => {\n        if (!React.isValidElement(child)) {\n          return null;\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (child.type === React.Fragment) {\n            console.error(\n              [\n                \"Material-UI: the GridList component doesn't accept a Fragment as a child.\",\n                'Consider providing an array instead.',\n              ].join('\\n'),\n            );\n          }\n        }\n\n        const childCols = child.props.cols || 1;\n        const childRows = child.props.rows || 1;\n\n        return React.cloneElement(child, {\n          style: Object.assign(\n            {\n              width: `${(100 / cols) * childCols}%`,\n              height: cellHeight === 'auto' ? 'auto' : cellHeight * childRows + spacing,\n              padding: spacing / 2,\n            },\n            child.props.style,\n          ),\n        });\n      })}\n    </Component>\n  );\n});\n\nGridList.propTypes = {\n  /**\n   * Number of px for one cell height.\n   * You can set `'auto'` if you want to let the children determine the height.\n   */\n  cellHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n  /**\n   * Grid Tiles that will be in Grid List.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Number of columns.\n   */\n  cols: PropTypes.number,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Number of px for the spacing between tiles.\n   */\n  spacing: PropTypes.number,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiGridList' })(GridList);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui/src/GridList/GridList.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list"
      ]
    },
    "GridListTile": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Theoretically you can pass any node as children, but the main use case is to pass an img,\nin which case GridListTile takes care of making the image \"cover\" available space\n(similar to `background-size: cover` or to `object-fit: cover`).",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "cols": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Width of the tile in number of grid cells.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "rows": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Height of the tile in number of grid cells.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "GridListTile",
      "styles": {
        "classes": [
          "root",
          "tile",
          "imgFullHeight",
          "imgFullWidth"
        ],
        "name": "MuiGridListTile",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "tile": "Styles applied to the `div` element that wraps the children.",
          "imgFullHeight": "Styles applied to an `img` element child, if needed to ensure it covers the tile.",
          "imgFullWidth": "Styles applied to an `img` element child, if needed to ensure it covers the tile."
        },
        "globalClasses": {
          "root": "MuiGridListTile-root",
          "tile": "MuiGridListTile-tile",
          "imgFullHeight": "MuiGridListTile-imgFullHeight",
          "imgFullWidth": "MuiGridListTile-imgFullWidth"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport debounce from '../utils/debounce';\nimport withStyles from '../styles/withStyles';\nimport isMuiElement from '../utils/isMuiElement';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    boxSizing: 'border-box',\n    flexShrink: 0,\n  },\n  /* Styles applied to the `div` element that wraps the children. */\n  tile: {\n    position: 'relative',\n    display: 'block', // In case it's not rendered with a div.\n    height: '100%',\n    overflow: 'hidden',\n  },\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullHeight: {\n    height: '100%',\n    transform: 'translateX(-50%)',\n    position: 'relative',\n    left: '50%',\n  },\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullWidth: {\n    width: '100%',\n    position: 'relative',\n    transform: 'translateY(-50%)',\n    top: '50%',\n  },\n};\n\nconst fit = (imgEl, classes) => {\n  if (!imgEl || !imgEl.complete) {\n    return;\n  }\n\n  if (imgEl.width / imgEl.height > imgEl.parentNode.offsetWidth / imgEl.parentNode.offsetHeight) {\n    imgEl.classList.remove(...classes.imgFullWidth.split(' '));\n    imgEl.classList.add(...classes.imgFullHeight.split(' '));\n  } else {\n    imgEl.classList.remove(...classes.imgFullHeight.split(' '));\n    imgEl.classList.add(...classes.imgFullWidth.split(' '));\n  }\n};\n\nfunction ensureImageCover(imgEl, classes) {\n  if (!imgEl) {\n    return;\n  }\n\n  if (imgEl.complete) {\n    fit(imgEl, classes);\n  } else {\n    imgEl.addEventListener('load', () => {\n      fit(imgEl, classes);\n    });\n  }\n}\n\nconst GridListTile = React.forwardRef(function GridListTile(props, ref) {\n  // cols rows default values are for docs only\n  const {\n    children,\n    classes,\n    className,\n    // eslint-disable-next-line no-unused-vars\n    cols = 1,\n    component: Component = 'li',\n    // eslint-disable-next-line no-unused-vars\n    rows = 1,\n    ...other\n  } = props;\n\n  const imgRef = React.useRef(null);\n\n  React.useEffect(() => {\n    ensureImageCover(imgRef.current, classes);\n  });\n\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      fit(imgRef.current, classes);\n    });\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [classes]);\n\n  return (\n    <Component className={clsx(classes.root, className)} ref={ref} {...other}>\n      <div className={classes.tile}>\n        {React.Children.map(children, child => {\n          if (!React.isValidElement(child)) {\n            return null;\n          }\n\n          if (child.type === 'img' || isMuiElement(child, ['Image'])) {\n            return React.cloneElement(child, {\n              ref: imgRef,\n            });\n          }\n\n          return child;\n        })}\n      </div>\n    </Component>\n  );\n});\n\nGridListTile.propTypes = {\n  /**\n   * Theoretically you can pass any node as children, but the main use case is to pass an img,\n   * in which case GridListTile takes care of making the image \"cover\" available space\n   * (similar to `background-size: cover` or to `object-fit: cover`).\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Width of the tile in number of grid cells.\n   */\n  cols: PropTypes.number,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Height of the tile in number of grid cells.\n   */\n  rows: PropTypes.number,\n};\n\nexport default withStyles(styles, { name: 'MuiGridListTile' })(GridListTile);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/GridListTile/GridListTile.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list"
      ]
    },
    "GridListTileBar": {
      "description": "",
      "methods": [],
      "props": {
        "actionIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "An IconButton element to be used as secondary action target\n(primary action target is the tile itself).",
          "tags": []
        },
        "actionPosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Position of secondary action IconButton.",
          "defaultValue": {
            "value": "'right'",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "subtitle": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "String or element serving as subtitle (support text).",
          "tags": []
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Title to be displayed on tile.",
          "tags": []
        },
        "titlePosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Position of the title bar.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "GridListTileBar",
      "styles": {
        "classes": [
          "root",
          "titlePositionBottom",
          "titlePositionTop",
          "rootSubtitle",
          "titleWrap",
          "titleWrapActionPosLeft",
          "titleWrapActionPosRight",
          "title",
          "subtitle",
          "actionIcon",
          "actionIconActionPosLeft"
        ],
        "name": "MuiGridListTileBar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "titlePositionBottom": "Styles applied to the root element if `titlePosition=\"bottom\"`.",
          "titlePositionTop": "Styles applied to the root element if `titlePosition=\"top\"`.",
          "rootSubtitle": "Styles applied to the root element if a `subtitle` is provided.",
          "titleWrap": "Styles applied to the title and subtitle container element.",
          "titleWrapActionPosLeft": "Styles applied to the container element if `actionPosition=\"left\"`.",
          "titleWrapActionPosRight": "Styles applied to the container element if `actionPosition=\"right\"`.",
          "title": "Styles applied to the title container element.",
          "subtitle": "Styles applied to the subtitle container element.",
          "actionIcon": "Styles applied to the actionIcon if supplied.",
          "actionIconActionPosLeft": "Styles applied to the actionIcon if `actionPosition=\"left\"`."
        },
        "globalClasses": {
          "root": "MuiGridListTileBar-root",
          "titlePositionBottom": "MuiGridListTileBar-titlePositionBottom",
          "titlePositionTop": "MuiGridListTileBar-titlePositionTop",
          "rootSubtitle": "MuiGridListTileBar-rootSubtitle",
          "titleWrap": "MuiGridListTileBar-titleWrap",
          "titleWrapActionPosLeft": "MuiGridListTileBar-titleWrapActionPosLeft",
          "titleWrapActionPosRight": "MuiGridListTileBar-titleWrapActionPosRight",
          "title": "MuiGridListTileBar-title",
          "subtitle": "MuiGridListTileBar-subtitle",
          "actionIcon": "MuiGridListTileBar-actionIcon",
          "actionIconActionPosLeft": "MuiGridListTileBar-actionIconActionPosLeft"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    height: 48,\n    background: 'rgba(0, 0, 0, 0.5)',\n    display: 'flex',\n    alignItems: 'center',\n    fontFamily: theme.typography.fontFamily,\n  },\n  /* Styles applied to the root element if `titlePosition=\"bottom\"`. */\n  titlePositionBottom: {\n    bottom: 0,\n  },\n  /* Styles applied to the root element if `titlePosition=\"top\"`. */\n  titlePositionTop: {\n    top: 0,\n  },\n  /* Styles applied to the root element if a `subtitle` is provided. */\n  rootSubtitle: {\n    height: 68,\n  },\n  /* Styles applied to the title and subtitle container element. */\n  titleWrap: {\n    flexGrow: 1,\n    marginLeft: 16,\n    marginRight: 16,\n    color: theme.palette.common.white,\n    overflow: 'hidden',\n  },\n  /* Styles applied to the container element if `actionPosition=\"left\"`. */\n  titleWrapActionPosLeft: {\n    marginLeft: 0,\n  },\n  /* Styles applied to the container element if `actionPosition=\"right\"`. */\n  titleWrapActionPosRight: {\n    marginRight: 0,\n  },\n  /* Styles applied to the title container element. */\n  title: {\n    fontSize: theme.typography.pxToRem(16),\n    lineHeight: '24px',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n  },\n  /* Styles applied to the subtitle container element. */\n  subtitle: {\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n  },\n  /* Styles applied to the actionIcon if supplied. */\n  actionIcon: {},\n  /* Styles applied to the actionIcon if `actionPosition=\"left\"`. */\n  actionIconActionPosLeft: {\n    order: -1,\n  },\n});\n\nconst GridListTileBar = React.forwardRef(function GridListTileBar(props, ref) {\n  const {\n    actionIcon,\n    actionPosition = 'right',\n    classes,\n    className,\n    subtitle,\n    title,\n    titlePosition = 'bottom',\n    ...other\n  } = props;\n\n  const actionPos = actionIcon && actionPosition;\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        {\n          [classes.titlePositionBottom]: titlePosition === 'bottom',\n          [classes.titlePositionTop]: titlePosition === 'top',\n          [classes.rootSubtitle]: subtitle,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      <div\n        className={clsx(classes.titleWrap, {\n          [classes.titleWrapActionPosLeft]: actionPos === 'left',\n          [classes.titleWrapActionPosRight]: actionPos === 'right',\n        })}\n      >\n        <div className={classes.title}>{title}</div>\n        {subtitle ? <div className={classes.subtitle}>{subtitle}</div> : null}\n      </div>\n      {actionIcon ? (\n        <div\n          className={clsx(classes.actionIcon, {\n            [classes.actionIconActionPosLeft]: actionPos === 'left',\n          })}\n        >\n          {actionIcon}\n        </div>\n      ) : null}\n    </div>\n  );\n});\n\nGridListTileBar.propTypes = {\n  /**\n   * An IconButton element to be used as secondary action target\n   * (primary action target is the tile itself).\n   */\n  actionIcon: PropTypes.node,\n  /**\n   * Position of secondary action IconButton.\n   */\n  actionPosition: PropTypes.oneOf(['left', 'right']),\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * String or element serving as subtitle (support text).\n   */\n  subtitle: PropTypes.node,\n  /**\n   * Title to be displayed on tile.\n   */\n  title: PropTypes.node,\n  /**\n   * Position of the title bar.\n   */\n  titlePosition: PropTypes.oneOf(['top', 'bottom']),\n};\n\nexport default withStyles(styles, { name: 'MuiGridListTileBar' })(GridListTileBar);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/GridListTileBar/GridListTileBar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list"
      ]
    },
    "Hidden": {
      "description": "Responsively hides children based on the selected implementation.",
      "displayName": "Hidden",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "implementation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'js'",
                "computed": false
              },
              {
                "value": "'css'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Specify which implementation to use.  'js' is the default, 'css' works better for\nserver-side rendering.",
          "defaultValue": {
            "value": "'js'",
            "computed": false
          },
          "tags": []
        },
        "initialWidth": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'xs'",
                "computed": false
              },
              {
                "value": "'sm'",
                "computed": false
              },
              {
                "value": "'md'",
                "computed": false
              },
              {
                "value": "'lg'",
                "computed": false
              },
              {
                "value": "'xl'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "You can use this prop when choosing the `js` implementation with server-side rendering.\n\nAs `window.innerWidth` is unavailable on the server,\nwe default to rendering an empty component during the first mount.\nYou might want to use an heuristic to approximate\nthe screen width of the client browser screen width.\n\nFor instance, you could be using the user-agent or the client-hints.\nhttps://caniuse.com/#search=client%20hint",
          "tags": []
        },
        "lgDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "lgUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "mdDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "mdUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "only": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'xs'",
                    "computed": false
                  },
                  {
                    "value": "'sm'",
                    "computed": false
                  },
                  {
                    "value": "'md'",
                    "computed": false
                  },
                  {
                    "value": "'lg'",
                    "computed": false
                  },
                  {
                    "value": "'xl'",
                    "computed": false
                  }
                ]
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'xs'",
                      "computed": false
                    },
                    {
                      "value": "'sm'",
                      "computed": false
                    },
                    {
                      "value": "'md'",
                      "computed": false
                    },
                    {
                      "value": "'lg'",
                      "computed": false
                    },
                    {
                      "value": "'xl'",
                      "computed": false
                    }
                  ]
                }
              }
            ]
          },
          "required": false,
          "description": "Hide the given breakpoint(s).",
          "tags": []
        },
        "smDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "smUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xlDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xlUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xsDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and down will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "xsUp": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, screens this size and up will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Hidden",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport HiddenJs from './HiddenJs';\nimport HiddenCss from './HiddenCss';\n\n/**\n * Responsively hides children based on the selected implementation.\n */\nfunction Hidden(props) {\n  const {\n    implementation = 'js',\n    lgDown = false,\n    lgUp = false,\n    mdDown = false,\n    mdUp = false,\n    smDown = false,\n    smUp = false,\n    xlDown = false,\n    xlUp = false,\n    xsDown = false,\n    xsUp = false,\n    ...other\n  } = props;\n\n  if (implementation === 'js') {\n    return (\n      <HiddenJs\n        lgDown={lgDown}\n        lgUp={lgUp}\n        mdDown={mdDown}\n        mdUp={mdUp}\n        smDown={smDown}\n        smUp={smUp}\n        xlDown={xlDown}\n        xlUp={xlUp}\n        xsDown={xsDown}\n        xsUp={xsUp}\n        {...other}\n      />\n    );\n  }\n\n  return (\n    <HiddenCss\n      lgDown={lgDown}\n      lgUp={lgUp}\n      mdDown={mdDown}\n      mdUp={mdUp}\n      smDown={smDown}\n      smUp={smUp}\n      xlDown={xlDown}\n      xlUp={xlUp}\n      xsDown={xsDown}\n      xsUp={xsUp}\n      {...other}\n    />\n  );\n}\n\nHidden.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use an heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([\n    PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])),\n  ]),\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool,\n};\n\nexport default Hidden;\n",
      "spread": true,
      "EOL": "\n",
      "filename": "/packages/material-ui/src/Hidden/Hidden.js",
      "inheritance": null,
      "usedInPages": [
        "/components/hidden"
      ]
    },
    "Icon": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The name of the icon font ligature.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'action'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'disabled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "fontSize": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Icon",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "colorAction",
          "colorError",
          "colorDisabled",
          "fontSizeInherit",
          "fontSizeSmall",
          "fontSizeLarge"
        ],
        "name": "MuiIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorAction": "Styles applied to the root element if `color=\"action\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
          "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
          "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiIcon-root",
          "colorPrimary": "MuiIcon-colorPrimary",
          "colorSecondary": "MuiIcon-colorSecondary",
          "colorAction": "MuiIcon-colorAction",
          "colorError": "MuiIcon-colorError",
          "colorDisabled": "MuiIcon-colorDisabled",
          "fontSizeInherit": "MuiIcon-fontSizeInherit",
          "fontSizeSmall": "MuiIcon-fontSizeSmall",
          "fontSizeLarge": "MuiIcon-fontSizeLarge"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    userSelect: 'none',\n    fontSize: theme.typography.pxToRem(24),\n    width: '1em',\n    height: '1em',\n    // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541\n    // To remove at some point.\n    overflow: 'hidden',\n    flexShrink: 0,\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the root element if `color=\"action\"`. */\n  colorAction: {\n    color: theme.palette.action.active,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main,\n  },\n  /* Styles applied to the root element if `color=\"disabled\"`. */\n  colorDisabled: {\n    color: theme.palette.action.disabled,\n  },\n  fontSizeInherit: {\n    fontSize: 'inherit',\n  },\n  /* Styles applied to the root element if `fontSize=\"small\"`. */\n  fontSizeSmall: {\n    fontSize: theme.typography.pxToRem(20),\n  },\n  /* Styles applied to the root element if `fontSize=\"large\"`. */\n  fontSizeLarge: {\n    fontSize: theme.typography.pxToRem(36),\n  },\n});\n\nconst Icon = React.forwardRef(function Icon(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'inherit',\n    component: Component = 'span',\n    fontSize = 'default',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        'material-icons',\n        classes.root,\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'inherit',\n          [classes[`fontSize${capitalize(fontSize)}`]]: fontSize !== 'default',\n        },\n        className,\n      )}\n      aria-hidden\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nIcon.propTypes = {\n  /**\n   * The name of the icon font ligature.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['inherit', 'default', 'small', 'large']),\n};\n\nIcon.muiName = 'Icon';\n\nexport default withStyles(styles, { name: 'MuiIcon' })(Icon);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Icon/Icon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/icons",
        "/components/material-icons"
      ]
    },
    "IconButton": {
      "description": "Refer to the [Icons](/components/icons/) section of the documentation\nregarding the available icon options.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.node, props => {\n  const found = React.Children.toArray(props.children).some(\n    child => React.isValidElement(child) && child.props.onClick,\n  );\n\n  if (found) {\n    return new Error(\n      [\n        'Material-UI: you are providing an onClick event listener ' +\n          'to a child of a button element.',\n        'Firefox will never trigger the event.',\n        'You should move the onClick listener to the parent button element.',\n        'https://github.com/mui-org/material-ui/issues/13957',\n      ].join('\\n'),\n    );\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "The icon element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "edge": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'end'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "IconButton",
      "styles": {
        "classes": [
          "root",
          "edgeStart",
          "edgeEnd",
          "colorInherit",
          "colorPrimary",
          "colorSecondary",
          "disabled",
          "sizeSmall",
          "label"
        ],
        "name": "MuiIconButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
          "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "label": "Styles applied to the children container element."
        },
        "globalClasses": {
          "root": "MuiIconButton-root",
          "edgeStart": "MuiIconButton-edgeStart",
          "edgeEnd": "MuiIconButton-edgeEnd",
          "colorInherit": "MuiIconButton-colorInherit",
          "colorPrimary": "MuiIconButton-colorPrimary",
          "colorSecondary": "MuiIconButton-colorSecondary",
          "disabled": "Mui-disabled",
          "sizeSmall": "MuiIconButton-sizeSmall",
          "label": "MuiIconButton-label"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    textAlign: 'center',\n    flex: '0 0 auto',\n    fontSize: theme.typography.pxToRem(24),\n    padding: 12,\n    borderRadius: '50%',\n    overflow: 'visible', // Explicitly set the default value to solve a bug on IE 11.\n    color: theme.palette.action.active,\n    transition: theme.transitions.create('background-color', {\n      duration: theme.transitions.duration.shortest,\n    }),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n    '&$disabled': {\n      backgroundColor: 'transparent',\n      color: theme.palette.action.disabled,\n    },\n  },\n  /* Styles applied to the root element if `edge=\"start\"`. */\n  edgeStart: {\n    marginLeft: -12,\n    '$sizeSmall&': {\n      marginLeft: -3,\n    },\n  },\n  /* Styles applied to the root element if `edge=\"end\"`. */\n  edgeEnd: {\n    marginRight: -12,\n    '$sizeSmall&': {\n      marginRight: -3,\n    },\n  },\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit',\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    padding: 3,\n    fontSize: theme.typography.pxToRem(18),\n  },\n  /* Styles applied to the children container element. */\n  label: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'inherit',\n    justifyContent: 'inherit',\n  },\n});\n\n/**\n * Refer to the [Icons](/components/icons/) section of the documentation\n * regarding the available icon options.\n */\nconst IconButton = React.forwardRef(function IconButton(props, ref) {\n  const {\n    edge = false,\n    children,\n    classes,\n    className,\n    color = 'default',\n    disabled = false,\n    disableFocusRipple = false,\n    size = 'medium',\n    ...other\n  } = props;\n\n  return (\n    <ButtonBase\n      className={clsx(\n        classes.root,\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'default',\n          [classes.disabled]: disabled,\n          [classes[`size${capitalize(size)}`]]: size !== 'medium',\n          [classes.edgeStart]: edge === 'start',\n          [classes.edgeEnd]: edge === 'end',\n        },\n        className,\n      )}\n      centerRipple\n      focusRipple={!disableFocusRipple}\n      disabled={disabled}\n      ref={ref}\n      {...other}\n    >\n      <span className={classes.label}>{children}</span>\n    </ButtonBase>\n  );\n});\n\nIconButton.propTypes = {\n  /**\n   * The icon element.\n   */\n  children: chainPropTypes(PropTypes.node, props => {\n    const found = React.Children.toArray(props.children).some(\n      child => React.isValidElement(child) && child.props.onClick,\n    );\n\n    if (found) {\n      return new Error(\n        [\n          'Material-UI: you are providing an onClick event listener ' +\n            'to a child of a button element.',\n          'Firefox will never trigger the event.',\n          'You should move the onClick listener to the parent button element.',\n          'https://github.com/mui-org/material-ui/issues/13957',\n        ].join('\\n'),\n      );\n    }\n\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['start', 'end', false]),\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n};\n\nexport default withStyles(styles, { name: 'MuiIconButton' })(IconButton);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/IconButton/IconButton.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/buttons",
        "/components/grid-list"
      ]
    },
    "Input": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "disableUnderline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will not have an underline.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "Input",
      "styles": {
        "classes": [
          "root",
          "formControl",
          "focused",
          "disabled",
          "colorSecondary",
          "underline",
          "error",
          "multiline",
          "fullWidth",
          "input",
          "inputMarginDense",
          "inputMultiline",
          "inputTypeSearch"
        ],
        "name": "MuiInput",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
          "focused": "Styles applied to the root element if the component is focused.",
          "disabled": "Styles applied to the root element if `disabled={true}`.",
          "colorSecondary": "Styles applied to the root element if color secondary.",
          "underline": "Styles applied to the root element if `disableUnderline={false}`.",
          "error": "Styles applied to the root element if `error={true}`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`."
        },
        "globalClasses": {
          "root": "MuiInput-root",
          "formControl": "MuiInput-formControl",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "colorSecondary": "MuiInput-colorSecondary",
          "underline": "MuiInput-underline",
          "error": "Mui-error",
          "multiline": "MuiInput-multiline",
          "fullWidth": "MuiInput-fullWidth",
          "input": "MuiInput-input",
          "inputMarginDense": "MuiInput-inputMarginDense",
          "inputMultiline": "MuiInput-inputMultiline",
          "inputTypeSearch": "MuiInput-inputTypeSearch"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport InputBase from '../InputBase';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => {\n  const light = theme.palette.type === 'light';\n  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n    },\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      'label + &': {\n        marginTop: 16,\n      },\n    },\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the root element if color secondary. */\n    colorSecondary: {\n      '&$underline:after': {\n        borderBottomColor: theme.palette.secondary.main,\n      },\n    },\n    /* Styles applied to the root element if `disableUnderline={false}`. */\n    underline: {\n      '&:after': {\n        borderBottom: `2px solid ${theme.palette.primary.main}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut,\n        }),\n        pointerEvents: 'none', // Transparent to the hover style.\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)',\n      },\n      '&$error:after': {\n        borderBottomColor: theme.palette.error.main,\n        transform: 'scaleX(1)', // error is always underlined in red\n      },\n      '&:before': {\n        borderBottom: `1px solid ${bottomLineColor}`,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\\\\00a0\"',\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('border-bottom-color', {\n          duration: theme.transitions.duration.shorter,\n        }),\n        pointerEvents: 'none', // Transparent to the hover style.\n      },\n      '&:hover:not($disabled):before': {\n        borderBottom: `2px solid ${theme.palette.text.primary}`,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          borderBottom: `1px solid ${bottomLineColor}`,\n        },\n      },\n      '&$disabled:before': {\n        borderBottomStyle: 'dotted',\n      },\n    },\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {},\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {},\n    /* Styles applied to the `input` element. */\n    input: {},\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {},\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {},\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {},\n  };\n};\n\nconst Input = React.forwardRef(function Input(props, ref) {\n  const {\n    disableUnderline,\n    classes,\n    fullWidth = false,\n    inputComponent = 'input',\n    multiline = false,\n    type = 'text',\n    ...other\n  } = props;\n\n  return (\n    <InputBase\n      classes={{\n        ...classes,\n        root: clsx(classes.root, {\n          [classes.underline]: !disableUnderline,\n        }),\n        underline: null,\n      }}\n      fullWidth={fullWidth}\n      inputComponent={inputComponent}\n      multiline={multiline}\n      ref={ref}\n      type={type}\n      {...other}\n    />\n  );\n});\n\nInput.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline: PropTypes.bool,\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n};\n\nInput.muiName = 'Input';\n\nexport default withStyles(styles, { name: 'MuiInput' })(Input);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Input/Input.js",
      "inheritance": {
        "component": "InputBase",
        "pathname": "/api/input-base"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "InputAdornment": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the component, normally an `IconButton` or string.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disablePointerEvents": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable pointer events on the root.\nThis allows for the content of the adornment to focus the input on click.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If children is a string then disable wrapping in a Typography component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "position": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'end'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The position this adornment should appear relative to the `Input`.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.\nNote: If you are using the `TextField` component or the `FormControl` component\nyou do not have to set this manually.",
          "tags": []
        }
      },
      "name": "InputAdornment",
      "styles": {
        "classes": [
          "root",
          "filled",
          "positionStart",
          "positionEnd",
          "disablePointerEvents",
          "hiddenLabel",
          "marginDense"
        ],
        "name": "MuiInputAdornment",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "filled": "Styles applied to the root element if `variant=\"filled\"`.",
          "positionStart": "Styles applied to the root element if `position=\"start\"`.",
          "positionEnd": "Styles applied to the root element if `position=\"end\"`.",
          "disablePointerEvents": "Styles applied to the root element if `disablePointerEvents=true`.",
          "hiddenLabel": "Styles applied if the adornment is used inside <FormControl hiddenLabel />.",
          "marginDense": "Styles applied if the adornment is used inside <FormControl margin=\"dense\" />."
        },
        "globalClasses": {
          "root": "MuiInputAdornment-root",
          "filled": "MuiInputAdornment-filled",
          "positionStart": "MuiInputAdornment-positionStart",
          "positionEnd": "MuiInputAdornment-positionEnd",
          "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
          "hiddenLabel": "MuiInputAdornment-hiddenLabel",
          "marginDense": "MuiInputAdornment-marginDense"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em', // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n  },\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16,\n    },\n  },\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8,\n  },\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8,\n  },\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none',\n  },\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {},\n};\n\nconst InputAdornment = React.forwardRef(function InputAdornment(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl() || {};\n\n  let variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error(\n          'Material-UI: The `InputAdornment` variant infers the variant prop ' +\n            'you do not have to provide one.',\n        );\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return (\n    <FormControlContext.Provider value={null}>\n      <Component\n        className={clsx(\n          classes.root,\n          {\n            [classes.filled]: variant === 'filled',\n            [classes.positionStart]: position === 'start',\n            [classes.positionEnd]: position === 'end',\n            [classes.disablePointerEvents]: disablePointerEvents,\n            [classes.marginDense]: muiFormControl.margin === 'dense',\n            [classes.hiddenLabel]: muiFormControl.hiddenLabel,\n          },\n          className,\n        )}\n        ref={ref}\n        {...other}\n      >\n        {typeof children === 'string' && !disableTypography ? (\n          <Typography color=\"textSecondary\">{children}</Typography>\n        ) : (\n          children\n        )}\n      </Component>\n    </FormControlContext.Provider>\n  );\n});\n\nInputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n\nexport default withStyles(styles, { name: 'MuiInputAdornment' })(InputAdornment);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/InputAdornment/InputAdornment.js",
      "inheritance": null,
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "InputLabel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The contents of the `InputLabel`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "disableAnimation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the transition animation is disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, apply disabled class.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will be displayed in an error state.",
          "tags": []
        },
        "focused": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input of this label is focused.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "if `true`, the label will indicate that the input is required.",
          "tags": []
        },
        "shrink": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label is shrunk.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "tags": []
        }
      },
      "name": "InputLabel",
      "styles": {
        "classes": [
          "root",
          "focused",
          "disabled",
          "error",
          "required",
          "asterisk",
          "formControl",
          "marginDense",
          "shrink",
          "animated",
          "filled",
          "outlined"
        ],
        "name": "MuiInputLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "focused": "Pseudo-class applied to the root element if `focused={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "error": "Pseudo-class applied to the root element if `error={true}`.",
          "required": "Pseudo-class applied to the root element if `required={true}`.",
          "asterisk": "Pseudo-class applied to the asterisk element.",
          "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
          "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
          "shrink": "Styles applied to the `input` element if `shrink={true}`.",
          "animated": "Styles applied to the `input` element if `disableAnimation={false}`.",
          "filled": "Styles applied to the root element if `variant=\"filled\"`.",
          "outlined": "Styles applied to the root element if `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiInputLabel-root",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "required": "Mui-required",
          "asterisk": "MuiInputLabel-asterisk",
          "formControl": "MuiInputLabel-formControl",
          "marginDense": "MuiInputLabel-marginDense",
          "shrink": "MuiInputLabel-shrink",
          "animated": "MuiInputLabel-animated",
          "filled": "MuiInputLabel-filled",
          "outlined": "MuiInputLabel-outlined"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport FormLabel from '../FormLabel';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    transformOrigin: 'top left',\n  },\n  /* Pseudo-class applied to the root element if `focused={true}`. */\n  focused: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n  /* Pseudo-class applied to the root element if `required={true}`. */\n  required: {},\n  /* Pseudo-class applied to the asterisk element. */\n  asterisk: {},\n  /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n  formControl: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    // slight alteration to spec spacing to match visual spec result\n    transform: 'translate(0, 24px) scale(1)',\n  },\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    // Compensation for the `Input.inputDense` style.\n    transform: 'translate(0, 21px) scale(1)',\n  },\n  /* Styles applied to the `input` element if `shrink={true}`. */\n  shrink: {\n    transform: 'translate(0, 1.5px) scale(0.75)',\n    transformOrigin: 'top left',\n  },\n  /* Styles applied to the `input` element if `disableAnimation={false}`. */\n  animated: {\n    transition: theme.transitions.create(['color', 'transform'], {\n      duration: theme.transitions.duration.shorter,\n      easing: theme.transitions.easing.easeOut,\n    }),\n  },\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    // Chrome's autofill feature gives the input field a yellow background.\n    // Since the input field is behind the label in the HTML tree,\n    // the input field is drawn last and hides the label with an opaque background color.\n    // zIndex: 1 will raise the label above opaque background-colors of input.\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(12px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(12px, 17px) scale(1)',\n    },\n    '&$shrink': {\n      transform: 'translate(12px, 10px) scale(0.75)',\n      '&$marginDense': {\n        transform: 'translate(12px, 7px) scale(0.75)',\n      },\n    },\n  },\n  /* Styles applied to the root element if `variant=\"outlined\"`. */\n  outlined: {\n    // see comment above on filled.zIndex\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(14px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(14px, 12px) scale(1)',\n    },\n    '&$shrink': {\n      transform: 'translate(14px, -6px) scale(0.75)',\n    },\n  },\n});\n\nconst InputLabel = React.forwardRef(function InputLabel(props, ref) {\n  const {\n    classes,\n    className,\n    disableAnimation = false,\n    margin,\n    shrink: shrinkProp,\n    variant,\n    ...other\n  } = props;\n\n  const muiFormControl = useFormControl();\n\n  let shrink = shrinkProp;\n  if (typeof shrink === 'undefined' && muiFormControl) {\n    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;\n  }\n\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['margin', 'variant'],\n  });\n\n  return (\n    <FormLabel\n      data-shrink={shrink}\n      className={clsx(\n        classes.root,\n        {\n          [classes.formControl]: muiFormControl,\n          [classes.animated]: !disableAnimation,\n          [classes.shrink]: shrink,\n          [classes.marginDense]: fcs.margin === 'dense',\n          [classes.filled]: fcs.variant === 'filled',\n          [classes.outlined]: fcs.variant === 'outlined',\n        },\n        className,\n      )}\n      classes={{\n        focused: classes.focused,\n        disabled: classes.disabled,\n        error: classes.error,\n        required: classes.required,\n        asterisk: classes.asterisk,\n      }}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nInputLabel.propTypes = {\n  /**\n   * The contents of the `InputLabel`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * If `true`, the transition animation is disabled.\n   */\n  disableAnimation: PropTypes.bool,\n  /**\n   * If `true`, apply disabled class.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the input of this label is focused.\n   */\n  focused: PropTypes.bool,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n  /**\n   * if `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n\nexport default withStyles(styles, { name: 'MuiInputLabel' })(InputLabel);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLabelElement",
      "filename": "/packages/material-ui/src/InputLabel/InputLabel.js",
      "inheritance": {
        "component": "FormLabel",
        "pathname": "/api/form-label"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "Link": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the link.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'textPrimary'",
                "computed": false
              },
              {
                "value": "'textSecondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the link.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "custom",
            "raw": "elementTypeAcceptingRef"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'a'",
            "computed": false
          },
          "tags": []
        },
        "TypographyClasses": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "`classes` prop applied to the [`Typography`](/api/typography/) element.",
          "tags": []
        },
        "underline": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'none'",
                "computed": false
              },
              {
                "value": "'hover'",
                "computed": false
              },
              {
                "value": "'always'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Controls when the link should have an underline.",
          "defaultValue": {
            "value": "'hover'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Applies the theme typography styles.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Link",
      "styles": {
        "classes": [
          "root",
          "underlineNone",
          "underlineHover",
          "underlineAlways",
          "button",
          "focusVisible"
        ],
        "name": "MuiLink",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "underlineNone": "Styles applied to the root element if `underline=\"none\"`.",
          "underlineHover": "Styles applied to the root element if `underline=\"hover\"`.",
          "underlineAlways": "Styles applied to the root element if `underline=\"always\"`.",
          "button": "Styles applied to the root element if `component=\"button\"`.",
          "focusVisible": "Pseudo-class applied to the root element if the link is keyboard focused."
        },
        "globalClasses": {
          "root": "MuiLink-root",
          "underlineNone": "MuiLink-underlineNone",
          "underlineHover": "MuiLink-underlineHover",
          "underlineAlways": "MuiLink-underlineAlways",
          "button": "MuiLink-button",
          "focusVisible": "Mui-focusVisible"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport { useIsFocusVisible } from '../utils/focusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none',\n  },\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline',\n  },\n  // Same reset as ButtonBase.root\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent', // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0, // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0, // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none', // Reset\n    '-webkit-appearance': 'none', // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none', // Remove Firefox dotted outline.\n    },\n    '&$focusVisible': {\n      outline: 'auto',\n    },\n  },\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {},\n};\n\nconst Link = React.forwardRef(function Link(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'hover',\n    variant = 'inherit',\n    ...other\n  } = props;\n\n  const { isFocusVisible, onBlurVisible, ref: focusVisibleRef } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n  const handleBlur = event => {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = event => {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return (\n    <Typography\n      className={clsx(\n        classes.root,\n        {\n          [classes.button]: component === 'button',\n          [classes.focusVisible]: focusVisible,\n        },\n        classes[`underline${capitalize(underline)}`],\n        className,\n      )}\n      classes={TypographyClasses}\n      color={color}\n      component={component}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      ref={handlerRef}\n      variant={variant}\n      {...other}\n    />\n  );\n});\n\nLink.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf([\n    'default',\n    'error',\n    'inherit',\n    'primary',\n    'secondary',\n    'textPrimary',\n    'textSecondary',\n  ]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string,\n};\n\nexport default withStyles(styles, { name: 'MuiLink' })(Link);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLAnchorElement",
      "filename": "/packages/material-ui/src/Link/Link.js",
      "inheritance": {
        "component": "Typography",
        "pathname": "/api/typography"
      },
      "usedInPages": [
        "/components/breadcrumbs",
        "/components/links"
      ]
    },
    "List": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'ul'",
            "computed": false
          },
          "tags": []
        },
        "dense": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used for\nthe list and list items.\nThe prop is available to descendant components as the `dense` context.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disablePadding": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, vertical padding will be removed from the list.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "subheader": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the subheader, normally `ListSubheader`.",
          "tags": []
        }
      },
      "name": "List",
      "styles": {
        "classes": [
          "root",
          "padding",
          "dense",
          "subheader"
        ],
        "name": "MuiList",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "padding": "Styles applied to the root element if `disablePadding={false}`.",
          "dense": "Styles applied to the root element if dense.",
          "subheader": "Styles applied to the root element if a `subheader` is provided."
        },
        "globalClasses": {
          "root": "MuiList-root",
          "padding": "MuiList-padding",
          "dense": "MuiList-dense",
          "subheader": "MuiList-subheader"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative',\n  },\n  /* Styles applied to the root element if `disablePadding={false}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  /* Styles applied to the root element if dense. */\n  dense: {},\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0,\n  },\n};\n\nconst List = React.forwardRef(function List(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'ul',\n    dense = false,\n    disablePadding = false,\n    subheader,\n    ...other\n  } = props;\n\n  const context = React.useMemo(() => ({ dense }), [dense]);\n\n  return (\n    <ListContext.Provider value={context}>\n      <Component\n        className={clsx(\n          classes.root,\n          {\n            [classes.dense]: dense,\n            [classes.padding]: !disablePadding,\n            [classes.subheader]: subheader,\n          },\n          className,\n        )}\n        ref={ref}\n        {...other}\n      >\n        {subheader}\n        {children}\n      </Component>\n    </ListContext.Provider>\n  );\n});\n\nList.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   */\n  dense: PropTypes.bool,\n  /**\n   * If `true`, vertical padding will be removed from the list.\n   */\n  disablePadding: PropTypes.bool,\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node,\n};\n\nexport default withStyles(styles, { name: 'MuiList' })(List);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui/src/List/List.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists",
        "/components/transfer-list"
      ]
    },
    "ListItem": {
      "description": "Uses an additional container component if `ListItemSecondaryAction` is the last child.",
      "methods": [],
      "props": {
        "alignItems": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'flex-start'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Defines the `align-items` style property.",
          "defaultValue": {
            "value": "'center'",
            "computed": false
          },
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list item will be focused during the first mount.\nFocus will also be triggered if the value changes from false to true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "button": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list item will be a button (using `ButtonBase`). Props intended\nfor `ButtonBase` can then be applied to `ListItem`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.node, props => {\n  const children = React.Children.toArray(props.children);\n\n  // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n  let secondaryActionIndex = -1;\n  for (let i = children.length - 1; i >= 0; i -= 1) {\n    const child = children[i];\n    if (isMuiElement(child, ['ListItemSecondaryAction'])) {\n      secondaryActionIndex = i;\n      break;\n    }\n  }\n\n  //  is ListItemSecondaryAction the last child of ListItem\n  if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n    return new Error(\n      'Material-UI: you used an element after ListItemSecondaryAction. ' +\n        'For ListItem to detect that it has a secondary action ' +\n        'you must pass it as the last child to ListItem.',\n    );\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "The content of the component. If a `ListItemSecondaryAction` is used it must\nbe the last child.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.",
          "tags": []
        },
        "ContainerComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The container component used when a `ListItemSecondaryAction` is the last child.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "ContainerProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the container component if used.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "dense": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list item will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the left and right padding is removed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "divider": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a 1px light border is added to the bottom of the list item.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use to apply selected styling.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ListItem",
      "styles": {
        "classes": [
          "root",
          "container",
          "focusVisible",
          "dense",
          "alignItemsFlexStart",
          "disabled",
          "divider",
          "gutters",
          "button",
          "secondaryAction",
          "selected"
        ],
        "name": "MuiListItem",
        "descriptions": {
          "root": "Styles applied to the (normally root) `component` element. May be wrapped by a `container`.",
          "container": "Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`.",
          "focusVisible": "Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`.",
          "dense": "Styles applied to the `component` element if dense.",
          "alignItemsFlexStart": "Styles applied to the `component` element if `alignItems=\"flex-start\"`.",
          "disabled": "Pseudo-class applied to the inner `component` element if `disabled={true}`.",
          "divider": "Styles applied to the inner `component` element if `divider={true}`.",
          "gutters": "Styles applied to the inner `component` element if `disableGutters={false}`.",
          "button": "Styles applied to the inner `component` element if `button={true}`.",
          "secondaryAction": "Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`.",
          "selected": "Pseudo-class applied to the root element if `selected={true}`."
        },
        "globalClasses": {
          "root": "MuiListItem-root",
          "container": "MuiListItem-container",
          "focusVisible": "Mui-focusVisible",
          "dense": "MuiListItem-dense",
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "gutters": "MuiListItem-gutters",
          "button": "MuiListItem-button",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport isMuiElement from '../utils/isMuiElement';\nimport useForkRef from '../utils/useForkRef';\nimport ListContext from '../List/ListContext';\nimport ReactDOM from 'react-dom';\n\nexport const styles = theme => ({\n  /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    position: 'relative',\n    textDecoration: 'none',\n    width: '100%',\n    boxSizing: 'border-box',\n    textAlign: 'left',\n    paddingTop: 8,\n    paddingBottom: 8,\n    '&$focusVisible': {\n      backgroundColor: theme.palette.action.selected,\n    },\n    '&$selected, &$selected:hover': {\n      backgroundColor: theme.palette.action.selected,\n    },\n    '&$disabled': {\n      opacity: 0.5,\n    },\n  },\n  /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */\n  container: {\n    position: 'relative',\n  },\n  /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */\n  focusVisible: {},\n  /* Styles applied to the `component` element if dense. */\n  dense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n  /* Styles applied to the `component` element if `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    alignItems: 'flex-start',\n  },\n  /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the inner `component` element if `divider={true}`. */\n  divider: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    backgroundClip: 'padding-box',\n  },\n  /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n  gutters: {\n    paddingLeft: 16,\n    paddingRight: 16,\n  },\n  /* Styles applied to the inner `component` element if `button={true}`. */\n  button: {\n    transition: theme.transitions.create('background-color', {\n      duration: theme.transitions.duration.shortest,\n    }),\n    '&:hover': {\n      textDecoration: 'none',\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */\n  secondaryAction: {\n    // Add some space to avoid collision as `ListItemSecondaryAction`\n    // is absolutely positioned.\n    paddingRight: 48,\n  },\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {},\n});\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n */\nconst ListItem = React.forwardRef(function ListItem(props, ref) {\n  const {\n    alignItems = 'center',\n    autoFocus = false,\n    button = false,\n    children: childrenProp,\n    classes,\n    className,\n    component: componentProp,\n    ContainerComponent = 'li',\n    ContainerProps: { className: ContainerClassName, ...ContainerProps } = {},\n    dense,\n    disabled = false,\n    disableGutters = false,\n    divider = false,\n    focusVisibleClassName,\n    selected = false,\n    ...other\n  } = props;\n\n  const context = React.useContext(ListContext);\n  const childContext = {\n    dense: dense || context.dense || false,\n    alignItems,\n  };\n  const listItemRef = React.useRef(null);\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error(\n          'Material-UI: unable to set focus to a ListItem whose component has not been rendered.',\n        );\n      }\n    }\n  }, [autoFocus]);\n\n  const children = React.Children.toArray(childrenProp);\n  const hasSecondaryAction =\n    children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);\n\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    listItemRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(handleOwnRef, ref);\n\n  const componentProps = {\n    className: clsx(\n      classes.root,\n      {\n        [classes.dense]: childContext.dense,\n        [classes.gutters]: !disableGutters,\n        [classes.divider]: divider,\n        [classes.disabled]: disabled,\n        [classes.button]: button,\n        [classes.alignItemsFlexStart]: alignItems === 'flex-start',\n        [classes.secondaryAction]: hasSecondaryAction,\n        [classes.selected]: selected,\n      },\n      className,\n    ),\n    disabled,\n    ...other,\n  };\n  let Component = componentProp || 'li';\n\n  if (button) {\n    componentProps.component = componentProp || 'div';\n    componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);\n    Component = ButtonBase;\n  }\n\n  if (hasSecondaryAction) {\n    // Use div by default.\n    Component = !componentProps.component && !componentProp ? 'div' : Component;\n\n    // Avoid nesting of li > li.\n    if (ContainerComponent === 'li') {\n      if (Component === 'li') {\n        Component = 'div';\n      } else if (componentProps.component === 'li') {\n        componentProps.component = 'div';\n      }\n    }\n\n    return (\n      <ListContext.Provider value={childContext}>\n        <ContainerComponent\n          className={clsx(classes.container, ContainerClassName)}\n          ref={handleRef}\n          {...ContainerProps}\n        >\n          <Component {...componentProps}>{children}</Component>\n          {children.pop()}\n        </ContainerComponent>\n      </ListContext.Provider>\n    );\n  }\n\n  return (\n    <ListContext.Provider value={childContext}>\n      <Component ref={handleRef} {...componentProps}>\n        {children}\n      </Component>\n    </ListContext.Provider>\n  );\n});\n\nListItem.propTypes = {\n  /**\n   * Defines the `align-items` style property.\n   */\n  alignItems: PropTypes.oneOf(['flex-start', 'center']),\n  /**\n   * If `true`, the list item will be focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, the list item will be a button (using `ButtonBase`). Props intended\n   * for `ButtonBase` can then be applied to `ListItem`.\n   */\n  button: PropTypes.bool,\n  /**\n   * The content of the component. If a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children: chainPropTypes(PropTypes.node, props => {\n    const children = React.Children.toArray(props.children);\n\n    // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n    let secondaryActionIndex = -1;\n    for (let i = children.length - 1; i >= 0; i -= 1) {\n      const child = children[i];\n      if (isMuiElement(child, ['ListItemSecondaryAction'])) {\n        secondaryActionIndex = i;\n        break;\n      }\n    }\n\n    //  is ListItemSecondaryAction the last child of ListItem\n    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n      return new Error(\n        'Material-UI: you used an element after ListItemSecondaryAction. ' +\n          'For ListItem to detect that it has a secondary action ' +\n          'you must pass it as the last child to ListItem.',\n      );\n    }\n\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The container component used when a `ListItemSecondaryAction` is the last child.\n   */\n  ContainerComponent: PropTypes.elementType,\n  /**\n   * Props applied to the container component if used.\n   */\n  ContainerProps: PropTypes.object,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: PropTypes.bool,\n  /**\n   * If `true`, the list item will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   */\n  divider: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * Use to apply selected styling.\n   */\n  selected: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiListItem' })(ListItem);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/ListItem/ListItem.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists",
        "/components/transfer-list"
      ]
    },
    "ListItemAvatar": {
      "description": "A simple wrapper to apply `List` styles to an `Avatar`.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": true,
          "description": "The content of the component – normally `Avatar`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ListItemAvatar",
      "styles": {
        "classes": [
          "root",
          "alignItemsFlexStart"
        ],
        "name": "MuiListItemAvatar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
        },
        "globalClasses": {
          "root": "MuiListItemAvatar-root",
          "alignItemsFlexStart": "MuiListItemAvatar-alignItemsFlexStart"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0,\n  },\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8,\n  },\n};\n\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\nconst ListItemAvatar = React.forwardRef(function ListItemAvatar(props, ref) {\n  const { classes, className, ...other } = props;\n  const context = React.useContext(ListContext);\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        {\n          [classes.alignItemsFlexStart]: context.alignItems === 'flex-start',\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nListItemAvatar.propTypes = {\n  /**\n   * The content of the component – normally `Avatar`.\n   */\n  children: PropTypes.element.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n};\n\nexport default withStyles(styles, { name: 'MuiListItemAvatar' })(ListItemAvatar);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemAvatar/ListItemAvatar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListItemIcon": {
      "description": "A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": true,
          "description": "The content of the component, normally `Icon`, `SvgIcon`,\nor a `@material-ui/icons` SVG icon element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ListItemIcon",
      "styles": {
        "classes": [
          "root",
          "alignItemsFlexStart"
        ],
        "name": "MuiListItemIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
        },
        "globalClasses": {
          "root": "MuiListItemIcon-root",
          "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    color: theme.palette.action.active,\n    flexShrink: 0,\n    display: 'inline-flex',\n  },\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8,\n  },\n});\n\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\nconst ListItemIcon = React.forwardRef(function ListItemIcon(props, ref) {\n  const { classes, className, ...other } = props;\n  const context = React.useContext(ListContext);\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        {\n          [classes.alignItemsFlexStart]: context.alignItems === 'flex-start',\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nListItemIcon.propTypes = {\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.element.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n};\n\nexport default withStyles(styles, { name: 'MuiListItemIcon' })(ListItemIcon);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemIcon/ListItemIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListItemSecondaryAction": {
      "description": "Must be used as the last child of ListItem to function properly.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally an `IconButton` or selection control.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "ListItemSecondaryAction",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiListItemSecondaryAction",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiListItemSecondaryAction-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)',\n  },\n};\n\n/**\n * Must be used as the last child of ListItem to function properly.\n */\nconst ListItemSecondaryAction = React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  const { classes, className, ...other } = props;\n\n  return <div className={clsx(classes.root, className)} ref={ref} {...other} />;\n});\n\nListItemSecondaryAction.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n};\n\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\n\nexport default withStyles(styles, { name: 'MuiListItemSecondaryAction' })(ListItemSecondaryAction);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemSecondaryAction/ListItemSecondaryAction.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListItemText": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Alias for the `primary` property.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableTypography": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "inset": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the children will be indented.\nThis should be used if there is no left avatar or left icon.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "primary": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The main content element.",
          "tags": []
        },
        "primaryTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`).",
          "tags": []
        },
        "secondary": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The secondary content element.",
          "tags": []
        },
        "secondaryTypographyProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`).",
          "tags": []
        }
      },
      "name": "ListItemText",
      "styles": {
        "classes": [
          "root",
          "multiline",
          "dense",
          "inset",
          "primary",
          "secondary"
        ],
        "name": "MuiListItemText",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "multiline": "Styles applied to the `Typography` components if primary and secondary are set.",
          "dense": "Styles applied to the `Typography` components if dense.",
          "inset": "Styles applied to the root element if `inset={true}`.",
          "primary": "Styles applied to the primary `Typography` component.",
          "secondary": "Styles applied to the secondary `Typography` component."
        },
        "globalClasses": {
          "root": "MuiListItemText-root",
          "multiline": "MuiListItemText-multiline",
          "dense": "MuiListItemText-dense",
          "inset": "MuiListItemText-inset",
          "primary": "MuiListItemText-primary",
          "secondary": "MuiListItemText-secondary"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4,\n  },\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6,\n  },\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56,\n  },\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {},\n};\n\nconst ListItemText = React.forwardRef(function ListItemText(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disableTypography = false,\n    inset = false,\n    primary: primaryProp,\n    primaryTypographyProps,\n    secondary: secondaryProp,\n    secondaryTypographyProps,\n    ...other\n  } = props;\n  const { dense } = React.useContext(ListContext);\n\n  let primary = primaryProp != null ? primaryProp : children;\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = (\n      <Typography\n        variant={dense ? 'body2' : 'body1'}\n        className={classes.primary}\n        component=\"span\"\n        {...primaryTypographyProps}\n      >\n        {primary}\n      </Typography>\n    );\n  }\n\n  let secondary = secondaryProp;\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = (\n      <Typography\n        variant=\"body2\"\n        className={classes.secondary}\n        color=\"textSecondary\"\n        {...secondaryTypographyProps}\n      >\n        {secondary}\n      </Typography>\n    );\n  }\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        {\n          [classes.dense]: dense,\n          [classes.inset]: inset,\n          [classes.multiline]: primary && secondary,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {primary}\n      {secondary}\n    </div>\n  );\n});\n\nListItemText.propTypes = {\n  /**\n   * Alias for the `primary` property.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * If `true`, the children will be indented.\n   * This should be used if there is no left avatar or left icon.\n   */\n  inset: PropTypes.bool,\n  /**\n   * The main content element.\n   */\n  primary: PropTypes.node,\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  primaryTypographyProps: PropTypes.object,\n  /**\n   * The secondary content element.\n   */\n  secondary: PropTypes.node,\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  secondaryTypographyProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiListItemText' })(ListItemText);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/ListItemText/ListItemText.js",
      "inheritance": null,
      "usedInPages": [
        "/components/lists"
      ]
    },
    "ListSubheader": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the List Subheader will not have gutters.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableSticky": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the List Subheader will not stick to the top during scroll.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "inset": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the List Subheader will be indented.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ListSubheader",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorInherit",
          "gutters",
          "inset",
          "sticky"
        ],
        "name": "MuiListSubheader",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "gutters": "Styles applied to the inner `component` element if `disableGutters={false}`.",
          "inset": "Styles applied to the root element if `inset={true}`.",
          "sticky": "Styles applied to the root element if `disableSticky={false}`."
        },
        "globalClasses": {
          "root": "MuiListSubheader-root",
          "colorPrimary": "MuiListSubheader-colorPrimary",
          "colorInherit": "MuiListSubheader-colorInherit",
          "gutters": "MuiListSubheader-gutters",
          "inset": "MuiListSubheader-inset",
          "sticky": "MuiListSubheader-sticky"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    boxSizing: 'border-box',\n    lineHeight: '48px',\n    listStyle: 'none',\n    color: theme.palette.text.secondary,\n    fontFamily: theme.typography.fontFamily,\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.pxToRem(14),\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit',\n  },\n  /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n  gutters: {\n    paddingLeft: 16,\n    paddingRight: 16,\n  },\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 72,\n  },\n  /* Styles applied to the root element if `disableSticky={false}`. */\n  sticky: {\n    position: 'sticky',\n    top: 0,\n    zIndex: 1,\n    backgroundColor: 'inherit',\n  },\n});\n\nconst ListSubheader = React.forwardRef(function ListSubheader(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'default',\n    component: Component = 'li',\n    disableGutters = false,\n    disableSticky = false,\n    inset = false,\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'default',\n          [classes.inset]: inset,\n          [classes.sticky]: !disableSticky,\n          [classes.gutters]: !disableGutters,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nListSubheader.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'inherit']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   */\n  disableSticky: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader will be indented.\n   */\n  inset: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiListSubheader' })(ListSubheader);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/ListSubheader/ListSubheader.js",
      "inheritance": null,
      "usedInPages": [
        "/components/grid-list",
        "/components/lists"
      ]
    },
    "Menu": {
      "description": "",
      "methods": [],
      "props": {
        "anchorEl": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "The DOM element used to set the position of the menu.",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\nchildren are not focusable. If you set this prop to `false` focus will be placed\non the parent modal container. This has severe accessibility implications\nand should only be considered if you manage focus otherwise.",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Menu contents, normally `MenuItem`s.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableAutoFocusItem": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "When opening the menu will not focus the active item but the `[role=\"menu\"]`\nunless `autoFocus` is also set to `false`. Not using the default means not\nfollowing WAI-ARIA authoring practices. Please be considerate about possible\naccessibility implications.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "MenuListProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`MenuList`](/api/menu-list/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the Menu enters.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu is entering.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the Menu exits.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the Menu is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the menu is visible.",
          "tags": []
        },
        "PopoverClasses": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "`classes` prop applied to the [`Popover`](/api/popover/) element.",
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "The length of the transition in `ms`, or 'auto'",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'menu'",
                "computed": false
              },
              {
                "value": "'selectedMenu'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\nand the vertical alignment relative to the anchor element.",
          "defaultValue": {
            "value": "'selectedMenu'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Menu",
      "styles": {
        "classes": [
          "paper",
          "list"
        ],
        "name": "MuiMenu",
        "descriptions": {
          "paper": "Styles applied to the `Paper` component.",
          "list": "Styles applied to the `List` component via `MenuList`."
        },
        "globalClasses": {
          "paper": "MuiMenu-paper",
          "list": "MuiMenu-list"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Popover from '../Popover';\nimport MenuList from '../MenuList';\nimport ReactDOM from 'react-dom';\nimport setRef from '../utils/setRef';\nimport useTheme from '../styles/useTheme';\n\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right',\n};\n\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left',\n};\n\nexport const styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch',\n  },\n  /* Styles applied to the `List` component via `MenuList`. */\n  list: {\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n  },\n};\n\nconst Menu = React.forwardRef(function Menu(props, ref) {\n  const {\n    autoFocus = true,\n    children,\n    classes,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    onEntering,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    variant = 'selectedMenu',\n    ...other\n  } = props;\n  const theme = useTheme();\n\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n\n  const menuListActionsRef = React.useRef(null);\n  const contentAnchorRef = React.useRef(null);\n\n  const getContentAnchorEl = () => contentAnchorRef.current;\n\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n  let activeItemIndex = -1;\n  // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n  React.Children.map(children, (child, index) => {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (child.type === React.Fragment) {\n        console.error(\n          [\n            \"Material-UI: the Menu component doesn't accept a Fragment as a child.\",\n            'Consider providing an array instead.',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      return React.cloneElement(child, {\n        ref: instance => {\n          // #StrictMode ready\n          contentAnchorRef.current = ReactDOM.findDOMNode(instance);\n          setRef(child.ref, instance);\n        },\n      });\n    }\n\n    return child;\n  });\n\n  return (\n    <Popover\n      getContentAnchorEl={getContentAnchorEl}\n      classes={PopoverClasses}\n      onClose={onClose}\n      onEntering={handleEntering}\n      anchorOrigin={theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN}\n      transformOrigin={theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN}\n      PaperProps={{\n        ...PaperProps,\n        classes: {\n          ...PaperProps.classes,\n          root: classes.paper,\n        },\n      }}\n      open={open}\n      ref={ref}\n      transitionDuration={transitionDuration}\n      {...other}\n    >\n      <MenuList\n        data-mui-test=\"Menu\"\n        onKeyDown={handleListKeyDown}\n        actions={menuListActionsRef}\n        autoFocus={autoFocus && (activeItemIndex === -1 || disableAutoFocusItem)}\n        autoFocusItem={autoFocusItem}\n        variant={variant}\n        {...MenuListProps}\n        className={clsx(classes.list, MenuListProps.className)}\n      >\n        {items}\n      </MenuList>\n    </Popover>\n  );\n});\n\nMenu.propTypes = {\n  /**\n   * The DOM element used to set the position of the menu.\n   */\n  anchorEl: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   */\n  disableAutoFocusItem: PropTypes.bool,\n  /**\n   * Props applied to the [`MenuList`](/api/menu-list/) element.\n   */\n  MenuListProps: PropTypes.object,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired before the Menu enters.\n   */\n  onEnter: PropTypes.func,\n  /**\n   * Callback fired when the Menu has entered.\n   */\n  onEntered: PropTypes.func,\n  /**\n   * Callback fired when the Menu is entering.\n   */\n  onEntering: PropTypes.func,\n  /**\n   * Callback fired before the Menu exits.\n   */\n  onExit: PropTypes.func,\n  /**\n   * Callback fired when the Menu has exited.\n   */\n  onExited: PropTypes.func,\n  /**\n   * Callback fired when the Menu is exiting.\n   */\n  onExiting: PropTypes.func,\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n  /**\n   * `classes` prop applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n    PropTypes.oneOf(['auto']),\n  ]),\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu']),\n};\n\nexport default withStyles(styles, { name: 'MuiMenu' })(Menu);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Menu/Menu.js",
      "inheritance": {
        "component": "Popover",
        "pathname": "/api/popover"
      },
      "usedInPages": [
        "/components/app-bar",
        "/components/menus"
      ]
    },
    "MenuItem": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Menu item contents.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'li'",
            "computed": false
          },
          "tags": []
        },
        "dense": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used.",
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the left and right padding is removed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "MenuItem",
      "styles": {
        "classes": [
          "root",
          "gutters",
          "selected",
          "dense"
        ],
        "name": "MuiMenuItem",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "gutters": "Styles applied to the root element if `disableGutters={false}`.",
          "selected": "Styles applied to the root element if `selected={true}`.",
          "dense": "Styles applied to the root element if dense."
        },
        "globalClasses": {
          "root": "MuiMenuItem-root",
          "gutters": "MuiMenuItem-gutters",
          "selected": "Mui-selected",
          "dense": "MuiMenuItem-dense"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListItem from '../ListItem';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    ...theme.typography.body1,\n    minHeight: 48,\n    paddingTop: 6,\n    paddingBottom: 6,\n    boxSizing: 'border-box',\n    width: 'auto',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto',\n    },\n  },\n  // TODO To remove in v5?\n  /* Styles applied to the root element if `disableGutters={false}`. */\n  gutters: {},\n  /* Styles applied to the root element if `selected={true}`. */\n  selected: {},\n  /* Styles applied to the root element if dense. */\n  dense: {\n    ...theme.typography.body2,\n    minHeight: 'auto',\n  },\n});\n\nconst MenuItem = React.forwardRef(function MenuItem(props, ref) {\n  const {\n    classes,\n    className,\n    component = 'li',\n    disableGutters = false,\n    role = 'menuitem',\n    selected,\n    tabIndex: tabIndexProp,\n    ...other\n  } = props;\n\n  let tabIndex;\n  if (!props.disabled) {\n    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;\n  }\n  return (\n    <ListItem\n      button\n      role={role}\n      tabIndex={tabIndex}\n      component={component}\n      selected={selected}\n      disableGutters={disableGutters}\n      classes={{ dense: classes.dense }}\n      className={clsx(\n        classes.root,\n        {\n          [classes.selected]: selected,\n          [classes.gutters]: !disableGutters,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nMenuItem.propTypes = {\n  /**\n   * Menu item contents.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.number,\n};\n\nexport default withStyles(styles, { name: 'MuiMenuItem' })(MenuItem);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui/src/MenuItem/MenuItem.js",
      "inheritance": {
        "component": "ListItem",
        "pathname": "/api/list-item"
      },
      "usedInPages": [
        "/components/integrated-autocomplete",
        "/components/menus"
      ]
    },
    "MenuList": {
      "description": "A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton\nIt's exposed to help customization of the [`Menu`](/api/menu/) component. If you\nuse it separately you need to move focus into the component manually. Once\nthe focus is placed inside the component it is fully keyboard accessible.",
      "methods": [],
      "props": {
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, will focus the `[role=\"menu\"]` container and move into tab order",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "autoFocusItem": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\nif `variant=\"selectedMenu\"`",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "MenuList contents, normally `MenuItem`s.",
          "tags": []
        },
        "disableListWrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the menu items will not wrap focus.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'menu'",
                "computed": false
              },
              {
                "value": "'selectedMenu'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\nand the vertical alignment relative to the anchor element.",
          "defaultValue": {
            "value": "'selectedMenu'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "MenuList",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport useForkRef from '../utils/useForkRef';\n\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n  return disableListWrap ? null : list.firstChild;\n}\n\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n  return disableListWrap ? null : list.lastChild;\n}\n\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n  let text = nextFocus.innerText;\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n  if (text === undefined) {\n    return false;\n  }\n  text = text.trim().toLowerCase();\n  if (text.length === 0) {\n    return false;\n  }\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\n\nfunction moveFocus(list, currentFocus, disableListWrap, traversalFunction, textCriteria) {\n  let wrappedOnce = false;\n  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return false;\n      }\n      wrappedOnce = true;\n    }\n    // Move to the next element.\n    if (\n      !nextFocus.hasAttribute('tabindex') ||\n      nextFocus.disabled ||\n      nextFocus.getAttribute('aria-disabled') === 'true' ||\n      !textCriteriaMatches(nextFocus, textCriteria)\n    ) {\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return true;\n    }\n  }\n\n  return false;\n}\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\n/**\n * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton\n * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\nconst MenuList = React.forwardRef(function MenuList(props, ref) {\n  const {\n    actions,\n    autoFocus = false,\n    autoFocusItem = false,\n    children,\n    className,\n    onKeyDown,\n    disableListWrap = false,\n    variant = 'selectedMenu',\n    ...other\n  } = props;\n  const listRef = React.useRef(null);\n  const textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null,\n  });\n\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  React.useImperativeHandle(\n    actions,\n    () => ({\n      adjustStyleForScrollbar: (containerElement, theme) => {\n        // Let's ignore that piece of logic if users are already overriding the width\n        // of the menu.\n        const noExplicitWidth = !listRef.current.style.width;\n        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n          const scrollbarSize = `${getScrollbarSize(true)}px`;\n          listRef.current.style[\n            theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'\n          ] = scrollbarSize;\n          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;\n        }\n        return listRef.current;\n      },\n    }),\n    [],\n  );\n\n  const handleKeyDown = event => {\n    const list = listRef.current;\n    const key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n    const currentFocus = ownerDocument(list).activeElement;\n\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, previousItem);\n    } else if (key.length === 1) {\n      const criteria = textCriteriaRef.current;\n      const lowerKey = key.toLowerCase();\n      const currTime = performance.now();\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      const keepFocusOnCurrent =\n        currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n      if (\n        criteria.previousKeyMatched &&\n        (keepFocusOnCurrent || moveFocus(list, currentFocus, false, nextItem, criteria))\n      ) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    listRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(handleOwnRef, ref);\n\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n  let activeItemIndex = -1;\n  // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n  React.Children.forEach(children, (child, index) => {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (child.type === React.Fragment) {\n        console.error(\n          [\n            \"Material-UI: the Menu component doesn't accept a Fragment as a child.\",\n            'Consider providing an array instead.',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      const newChildProps = {};\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n\n      if (newChildProps !== null) {\n        return React.cloneElement(child, newChildProps);\n      }\n    }\n\n    return child;\n  });\n\n  return (\n    <List\n      role=\"menu\"\n      ref={handleRef}\n      className={className}\n      onKeyDown={handleKeyDown}\n      tabIndex={autoFocus ? 0 : -1}\n      {...other}\n    >\n      {items}\n    </List>\n  );\n});\n\nMenuList.propTypes = {\n  /**\n   * @ignore\n   */\n  actions: PropTypes.shape({ current: PropTypes.object }),\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`\n   */\n  autoFocusItem: PropTypes.bool,\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the menu items will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu']),\n};\n\nexport default MenuList;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui/src/MenuList/MenuList.js",
      "inheritance": {
        "component": "List",
        "pathname": "/api/list"
      },
      "usedInPages": [
        "/components/menus"
      ]
    },
    "MobileStepper": {
      "description": "",
      "methods": [],
      "props": {
        "activeStep": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Set the active step (zero based index).\nDefines which dot is highlighted when the variant is 'dots'.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "backButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "A back button element. For instance, it can be a `Button` or an `IconButton`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "LinearProgressProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `LinearProgress` element.",
          "tags": []
        },
        "nextButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "A next button element. For instance, it can be a `Button` or an `IconButton`.",
          "tags": []
        },
        "position": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'static'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set the positioning type.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        },
        "steps": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The total steps.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'dots'",
                "computed": false
              },
              {
                "value": "'progress'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'dots'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "MobileStepper",
      "styles": {
        "classes": [
          "root",
          "positionBottom",
          "positionTop",
          "positionStatic",
          "dots",
          "dot",
          "dotActive",
          "progress"
        ],
        "name": "MuiMobileStepper",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "positionBottom": "Styles applied to the root element if `position=\"bottom\"`.",
          "positionTop": "Styles applied to the root element if `position=\"top\"`.",
          "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
          "dots": "Styles applied to the dots container if `variant=\"dots\"`.",
          "dot": "Styles applied to each dot if `variant=\"dots\"`.",
          "dotActive": "Styles applied to a dot if `variant=\"dots\"` and this is the active step.",
          "progress": "Styles applied to the Linear Progress component if `variant=\"progress\"`."
        },
        "globalClasses": {
          "root": "MuiMobileStepper-root",
          "positionBottom": "MuiMobileStepper-positionBottom",
          "positionTop": "MuiMobileStepper-positionTop",
          "positionStatic": "MuiMobileStepper-positionStatic",
          "dots": "MuiMobileStepper-dots",
          "dot": "MuiMobileStepper-dot",
          "dotActive": "MuiMobileStepper-dotActive",
          "progress": "MuiMobileStepper-progress"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Paper from '../Paper';\nimport capitalize from '../utils/capitalize';\nimport LinearProgress from '../LinearProgress';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    background: theme.palette.background.default,\n    padding: 8,\n  },\n  /* Styles applied to the root element if `position=\"bottom\"`. */\n  positionBottom: {\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: theme.zIndex.mobileStepper,\n  },\n  /* Styles applied to the root element if `position=\"top\"`. */\n  positionTop: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: theme.zIndex.mobileStepper,\n  },\n  /* Styles applied to the root element if `position=\"static\"`. */\n  positionStatic: {},\n  /* Styles applied to the dots container if `variant=\"dots\"`. */\n  dots: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  /* Styles applied to each dot if `variant=\"dots\"`. */\n  dot: {\n    backgroundColor: theme.palette.action.disabled,\n    borderRadius: '50%',\n    width: 8,\n    height: 8,\n    margin: '0 2px',\n  },\n  /* Styles applied to a dot if `variant=\"dots\"` and this is the active step. */\n  dotActive: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  /* Styles applied to the Linear Progress component if `variant=\"progress\"`. */\n  progress: {\n    width: '50%',\n  },\n});\n\nconst MobileStepper = React.forwardRef(function MobileStepper(props, ref) {\n  const {\n    activeStep = 0,\n    backButton,\n    classes,\n    className,\n    LinearProgressProps,\n    nextButton,\n    position = 'bottom',\n    steps,\n    variant = 'dots',\n    ...other\n  } = props;\n\n  return (\n    <Paper\n      square\n      elevation={0}\n      className={clsx(classes.root, classes[`position${capitalize(position)}`], className)}\n      ref={ref}\n      {...other}\n    >\n      {backButton}\n      {variant === 'text' && (\n        <React.Fragment>\n          {activeStep + 1} / {steps}\n        </React.Fragment>\n      )}\n      {variant === 'dots' && (\n        <div className={classes.dots}>\n          {[...new Array(steps)].map((_, index) => (\n            <div\n              key={index}\n              className={clsx(classes.dot, {\n                [classes.dotActive]: index === activeStep,\n              })}\n            />\n          ))}\n        </div>\n      )}\n      {variant === 'progress' && (\n        <LinearProgress\n          className={classes.progress}\n          variant=\"determinate\"\n          value={Math.ceil((activeStep / (steps - 1)) * 100)}\n          {...LinearProgressProps}\n        />\n      )}\n      {nextButton}\n    </Paper>\n  );\n});\n\nMobileStepper.propTypes = {\n  /**\n   * Set the active step (zero based index).\n   * Defines which dot is highlighted when the variant is 'dots'.\n   */\n  activeStep: PropTypes.number,\n  /**\n   * A back button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  backButton: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Props applied to the `LinearProgress` element.\n   */\n  LinearProgressProps: PropTypes.object,\n  /**\n   * A next button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  nextButton: PropTypes.node,\n  /**\n   * Set the positioning type.\n   */\n  position: PropTypes.oneOf(['bottom', 'top', 'static']),\n  /**\n   * The total steps.\n   */\n  steps: PropTypes.number.isRequired,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'dots', 'progress']),\n};\n\nexport default withStyles(styles, { name: 'MuiMobileStepper' })(MobileStepper);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/MobileStepper/MobileStepper.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "NativeSelect": {
      "description": "An alternative to `<Select native />` with a much smaller bundle size footprint.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The option elements to populate the select with.\nCan be some `<option>` elements.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "IconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The icon that displays the arrow.",
          "defaultValue": {
            "value": "ArrowDropDownIcon",
            "computed": true
          },
          "tags": []
        },
        "input": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
          "defaultValue": {
            "value": "<Input />",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Attributes applied to the `select` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function fired when a menu item is selected.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The input value. The DOM API casts this to a string.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "tags": []
        }
      },
      "name": "NativeSelect",
      "styles": {
        "classes": [
          "root",
          "select",
          "filled",
          "outlined",
          "selectMenu",
          "disabled",
          "icon",
          "iconOpen",
          "iconFilled",
          "iconOutlined"
        ],
        "name": "MuiNativeSelect",
        "descriptions": {
          "root": "Styles applied to the select component `root` class.",
          "select": "Styles applied to the select component `select` class.",
          "filled": "Styles applied to the select component if `variant=\"filled\"`.",
          "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
          "selectMenu": "Styles applied to the select component `selectMenu` class.",
          "disabled": "Pseudo-class applied to the select component `disabled` class.",
          "icon": "Styles applied to the icon component.",
          "iconOpen": "Styles applied to the icon component if the popup is open.",
          "iconFilled": "Styles applied to the icon component if `variant=\"filled\"`.",
          "iconOutlined": "Styles applied to the icon component if `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiNativeSelect-root",
          "select": "MuiNativeSelect-select",
          "filled": "MuiNativeSelect-filled",
          "outlined": "MuiNativeSelect-outlined",
          "selectMenu": "MuiNativeSelect-selectMenu",
          "disabled": "Mui-disabled",
          "icon": "MuiNativeSelect-icon",
          "iconOpen": "MuiNativeSelect-iconOpen",
          "iconFilled": "MuiNativeSelect-iconFilled",
          "iconOutlined": "MuiNativeSelect-iconOutlined"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport NativeSelectInput from './NativeSelectInput';\nimport withStyles from '../styles/withStyles';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\n\nexport const styles = theme => ({\n  /* Styles applied to the select component `root` class. */\n  root: {},\n  /* Styles applied to the select component `select` class. */\n  select: {\n    '-moz-appearance': 'none', // Reset\n    '-webkit-appearance': 'none', // Reset\n    // When interacting quickly, the text can end up selected.\n    // Native select can't be selected either.\n    userSelect: 'none',\n    borderRadius: 0, // Reset\n    minWidth: 16, // So it doesn't collapse.\n    cursor: 'pointer',\n    '&:focus': {\n      // Show that it's not an text input\n      backgroundColor:\n        theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',\n      borderRadius: 0, // Reset Chrome style\n    },\n    // Remove IE 11 arrow\n    '&::-ms-expand': {\n      display: 'none',\n    },\n    '&$disabled': {\n      cursor: 'default',\n    },\n    '&[multiple]': {\n      height: 'auto',\n    },\n    '&:not([multiple]) option, &:not([multiple]) optgroup': {\n      backgroundColor: theme.palette.background.paper,\n    },\n  },\n  /* Styles applied to the select component if `variant=\"filled\"`. */\n  filled: {},\n  /* Styles applied to the select component if `variant=\"outlined\"`. */\n  outlined: {\n    borderRadius: theme.shape.borderRadius,\n  },\n  /* Styles applied to the select component `selectMenu` class. */\n  selectMenu: {\n    height: 'auto', // Reset\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n  },\n  /* Pseudo-class applied to the select component `disabled` class. */\n  disabled: {},\n  /* Styles applied to the icon component. */\n  icon: {\n    // We use a position absolute over a flexbox in order to forward the pointer events\n    // to the input.\n    position: 'absolute',\n    right: 0,\n    top: 'calc(50% - 12px)', // Center vertically\n    color: theme.palette.action.active,\n    pointerEvents: 'none', // Don't block pointer events on the select under the icon.\n  },\n  /* Styles applied to the icon component if the popup is open. */\n  iconOpen: {\n    transform: 'rotate(180deg)',\n  },\n  /* Styles applied to the icon component if `variant=\"filled\"`. */\n  iconFilled: {\n    right: 7,\n  },\n  /* Styles applied to the icon component if `variant=\"outlined\"`. */\n  iconOutlined: {\n    right: 7,\n  },\n});\n\nconst defaultInput = <Input />;\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = React.forwardRef(function NativeSelect(props, ref) {\n  const {\n    children,\n    classes,\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps,\n    variant,\n    ...other\n  } = props;\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant'],\n  });\n\n  return React.cloneElement(input, {\n    // Most of the logic is implemented in `NativeSelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: NativeSelectInput,\n    select: true,\n    inputProps: {\n      children,\n      classes,\n      IconComponent,\n      variant: fcs.variant,\n      type: undefined, // We render a select. We can ignore the type provided by the `Input`.\n      ...inputProps,\n      ...(input ? input.props.inputProps : {}),\n    },\n    ref,\n    ...other,\n  });\n});\n\nNativeSelect.propTypes = {\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n  /**\n   * Attributes applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The input value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n\nNativeSelect.muiName = 'Select';\n\nexport default withStyles(styles, { name: 'MuiNativeSelect' })(NativeSelect);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/NativeSelect/NativeSelect.js",
      "inheritance": {
        "component": "Input",
        "pathname": "/api/input"
      },
      "usedInPages": [
        "/components/selects"
      ]
    },
    "NoSsr": {
      "description": "NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n\nThis component can be useful in a variety of situations:\n- Escape hatch for broken dependencies not supporting SSR.\n- Improve the time-to-first paint on the client by only rendering above the fold.\n- Reduce the rendering time on the server.\n- Under too heavy server load, you can turn on service degradation.",
      "displayName": "NoSsr",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "You can wrap a node.",
          "tags": []
        },
        "defer": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will not only prevent server-side rendering.\nIt will also defer the rendering of the children into a different screen frame.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fallback": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The fallback content to display.",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "NoSsr",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\n\nconst useEnhancedEffect =\n  typeof window !== 'undefined' && process.env.NODE_ENV !== 'test'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\nfunction NoSsr(props) {\n  const { children, defer = false, fallback = null } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n\n  // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n  return <React.Fragment>{mountedState ? children : fallback}</React.Fragment>;\n}\n\nNoSsr.propTypes = {\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;\n",
      "spread": false,
      "EOL": "\n",
      "filename": "/packages/material-ui/src/NoSsr/NoSsr.js",
      "inheritance": null,
      "usedInPages": [
        "/components/no-ssr"
      ]
    },
    "OutlinedInput": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "labelWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The width of the label.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "notched": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the outline is notched to accommodate the label.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "OutlinedInput",
      "styles": {
        "classes": [
          "root",
          "colorSecondary",
          "focused",
          "disabled",
          "adornedStart",
          "adornedEnd",
          "error",
          "marginDense",
          "multiline",
          "notchedOutline",
          "input",
          "inputMarginDense",
          "inputSelect",
          "inputMultiline",
          "inputAdornedStart",
          "inputAdornedEnd"
        ],
        "name": "MuiOutlinedInput",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorSecondary": "Styles applied to the root element if the color is secondary.",
          "focused": "Styles applied to the root element if the component is focused.",
          "disabled": "Styles applied to the root element if `disabled={true}`.",
          "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
          "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
          "error": "Styles applied to the root element if `error={true}`.",
          "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "notchedOutline": "Styles applied to the `NotchedOutline` element.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputSelect": "Styles applied to the `input` element if `select={true}`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
          "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
        },
        "globalClasses": {
          "root": "MuiOutlinedInput-root",
          "colorSecondary": "MuiOutlinedInput-colorSecondary",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "adornedStart": "MuiOutlinedInput-adornedStart",
          "adornedEnd": "MuiOutlinedInput-adornedEnd",
          "error": "Mui-error",
          "marginDense": "MuiOutlinedInput-marginDense",
          "multiline": "MuiOutlinedInput-multiline",
          "notchedOutline": "MuiOutlinedInput-notchedOutline",
          "input": "MuiOutlinedInput-input",
          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
          "inputSelect": "MuiOutlinedInput-inputSelect",
          "inputMultiline": "MuiOutlinedInput-inputMultiline",
          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport InputBase from '../InputBase';\nimport NotchedOutline from './NotchedOutline';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => {\n  const borderColor =\n    theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      '&:hover $notchedOutline': {\n        borderColor: theme.palette.text.primary,\n      },\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        '&:hover $notchedOutline': {\n          borderColor,\n        },\n      },\n      '&$focused $notchedOutline': {\n        borderColor: theme.palette.primary.main,\n        borderWidth: 2,\n      },\n      '&$error $notchedOutline': {\n        borderColor: theme.palette.error.main,\n      },\n      '&$disabled $notchedOutline': {\n        borderColor: theme.palette.action.disabled,\n      },\n    },\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {\n      '&$focused $notchedOutline': {\n        borderColor: theme.palette.secondary.main,\n      },\n    },\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {\n      paddingLeft: 14,\n    },\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {\n      paddingRight: 14,\n    },\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: '18.5px 14px',\n      '&$marginDense': {\n        paddingTop: 10.5,\n        paddingBottom: 10.5,\n      },\n    },\n    /* Styles applied to the `NotchedOutline` element. */\n    notchedOutline: {\n      borderColor,\n    },\n    /* Styles applied to the `input` element. */\n    input: {\n      padding: '18.5px 14px',\n      '&:-webkit-autofill': {\n        WebkitBoxShadow: theme.palette.type === 'dark' ? '0 0 0 100px #266798 inset' : null,\n        WebkitTextFillColor: theme.palette.type === 'dark' ? '#fff' : null,\n        borderRadius: 'inherit',\n      },\n    },\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 10.5,\n      paddingBottom: 10.5,\n    },\n    /* Styles applied to the `input` element if `select={true}`. */\n    inputSelect: {\n      paddingRight: 24,\n    },\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      padding: 0,\n    },\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {\n      paddingLeft: 0,\n    },\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {\n      paddingRight: 0,\n    },\n  };\n};\n\nconst OutlinedInput = React.forwardRef(function OutlinedInput(props, ref) {\n  const {\n    classes,\n    fullWidth = false,\n    inputComponent = 'input',\n    labelWidth = 0,\n    multiline = false,\n    notched,\n    type = 'text',\n    ...other\n  } = props;\n\n  return (\n    <InputBase\n      renderSuffix={state => (\n        <NotchedOutline\n          className={classes.notchedOutline}\n          labelWidth={labelWidth}\n          notched={\n            typeof notched !== 'undefined'\n              ? notched\n              : Boolean(state.startAdornment || state.filled || state.focused)\n          }\n        />\n      )}\n      classes={{\n        ...classes,\n        root: clsx(classes.root, classes.underline),\n        notchedOutline: null,\n      }}\n      fullWidth={fullWidth}\n      inputComponent={inputComponent}\n      multiline={multiline}\n      ref={ref}\n      type={type}\n      {...other}\n    />\n  );\n});\n\nOutlinedInput.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The width of the label.\n   */\n  labelWidth: PropTypes.number,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * If `true`, the outline is notched to accommodate the label.\n   */\n  notched: PropTypes.bool,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n};\n\nOutlinedInput.muiName = 'Input';\n\nexport default withStyles(styles, { name: 'MuiOutlinedInput' })(OutlinedInput);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/OutlinedInput/OutlinedInput.js",
      "inheritance": {
        "component": "InputBase",
        "pathname": "/api/input-base"
      },
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "Paper": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "elevation": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Shadow depth, corresponds to `dp` in the spec.\nIt accepts values between 0 and 24 inclusive.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "square": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, rounded corners are disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Paper",
      "styles": {
        "classes": [
          "root",
          "rounded",
          "elevation0",
          "elevation1",
          "elevation2",
          "elevation3",
          "elevation4",
          "elevation5",
          "elevation6",
          "elevation7",
          "elevation8",
          "elevation9",
          "elevation10",
          "elevation11",
          "elevation12",
          "elevation13",
          "elevation14",
          "elevation15",
          "elevation16",
          "elevation17",
          "elevation18",
          "elevation19",
          "elevation20",
          "elevation21",
          "elevation22",
          "elevation23",
          "elevation24"
        ],
        "name": "MuiPaper",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "rounded": "Styles applied to the root element if `square={false}`."
        },
        "globalClasses": {
          "root": "MuiPaper-root",
          "rounded": "MuiPaper-rounded",
          "elevation0": "MuiPaper-elevation0",
          "elevation1": "MuiPaper-elevation1",
          "elevation2": "MuiPaper-elevation2",
          "elevation3": "MuiPaper-elevation3",
          "elevation4": "MuiPaper-elevation4",
          "elevation5": "MuiPaper-elevation5",
          "elevation6": "MuiPaper-elevation6",
          "elevation7": "MuiPaper-elevation7",
          "elevation8": "MuiPaper-elevation8",
          "elevation9": "MuiPaper-elevation9",
          "elevation10": "MuiPaper-elevation10",
          "elevation11": "MuiPaper-elevation11",
          "elevation12": "MuiPaper-elevation12",
          "elevation13": "MuiPaper-elevation13",
          "elevation14": "MuiPaper-elevation14",
          "elevation15": "MuiPaper-elevation15",
          "elevation16": "MuiPaper-elevation16",
          "elevation17": "MuiPaper-elevation17",
          "elevation18": "MuiPaper-elevation18",
          "elevation19": "MuiPaper-elevation19",
          "elevation20": "MuiPaper-elevation20",
          "elevation21": "MuiPaper-elevation21",
          "elevation22": "MuiPaper-elevation22",
          "elevation23": "MuiPaper-elevation23",
          "elevation24": "MuiPaper-elevation24"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport useTheme from '../styles/useTheme';\n\nexport const styles = theme => {\n  const elevations = {};\n  theme.shadows.forEach((shadow, index) => {\n    elevations[`elevation${index}`] = {\n      boxShadow: shadow,\n    };\n  });\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow'),\n    },\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius,\n    },\n    ...elevations,\n  };\n};\n\nconst Paper = React.forwardRef(function Paper(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    square = false,\n    elevation = 1,\n    ...other\n  } = props;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const theme = useTheme();\n    if (!theme.shadows[elevation]) {\n      console.error(`Material-UI: this elevation \\`${elevation}\\` is not implemented.`);\n    }\n  }\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        classes[`elevation${elevation}`],\n        {\n          [classes.rounded]: !square,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nPaper.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   */\n  elevation: PropTypes.number,\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiPaper' })(Paper);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Paper/Paper.js",
      "inheritance": null,
      "usedInPages": [
        "/components/cards",
        "/components/integrated-autocomplete",
        "/components/paper"
      ]
    },
    "Portal": {
      "description": "Portals provide a first-class way to render children into a DOM node\nthat exists outside the DOM hierarchy of the parent component.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The children to render into the `container`.",
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "func"
              },
              {
                "name": "instanceOf",
                "value": "React.Component"
              },
              {
                "name": "instanceOf",
                "value": "typeof Element === 'undefined' ? Object : Element"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will have the portal children appended to it.\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
          "tags": []
        },
        "disablePortal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onRendered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired once the children has been mounted into the `container`.\n\nThis prop will be deprecated and removed in v5, the ref can be used instead.",
          "tags": []
        }
      },
      "name": "Portal",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container;\n  // #StrictMode ready\n  return ReactDOM.findDOMNode(container);\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\nconst Portal = React.forwardRef(function Portal(props, ref) {\n  const { children, container, disablePortal = false, onRendered } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef(children.ref, ref);\n\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n\n  useEnhancedEffect(() => {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    React.Children.only(children);\n    return React.cloneElement(children, {\n      ref: handleRef,\n    });\n  }\n\n  return mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode;\n});\n\nPortal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.instanceOf(React.Component),\n    PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element),\n  ]),\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;\n",
      "spread": false,
      "EOL": "\n",
      "filename": "/packages/material-ui/src/Portal/Portal.js",
      "inheritance": null,
      "usedInPages": [
        "/components/portal"
      ]
    },
    "Radio": {
      "description": "",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is checked.",
          "tags": []
        },
        "checkedIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is checked.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the switch will be disabled.",
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is unchecked.",
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The input component prop `type`.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "Radio",
      "styles": {
        "classes": [
          "root",
          "checked",
          "disabled",
          "colorPrimary",
          "colorSecondary"
        ],
        "name": "MuiRadio",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "checked": "Pseudo-class applied to the root element if `checked={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
        },
        "globalClasses": {
          "root": "MuiRadio-root",
          "checked": "Mui-checked",
          "disabled": "Mui-disabled",
          "colorPrimary": "MuiRadio-colorPrimary",
          "colorSecondary": "MuiRadio-colorSecondary"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport RadioButtonIcon from './RadioButtonIcon';\nimport { fade } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport withStyles from '../styles/withStyles';\nimport RadioGroupContext from '../RadioGroup/RadioGroupContext';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.secondary,\n  },\n  /* Pseudo-class applied to the root element if `checked={true}`. */\n  checked: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n    },\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    '&$checked': {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n    },\n  },\n});\n\nconst defaultCheckedIcon = <RadioButtonIcon checked />;\nconst defaultIcon = <RadioButtonIcon />;\n\nconst Radio = React.forwardRef(function Radio(props, ref) {\n  const {\n    checked: checkedProp,\n    classes,\n    color = 'secondary',\n    name: nameProp,\n    onChange: onChangeProp,\n    ...other\n  } = props;\n  const radioGroup = React.useContext(RadioGroupContext);\n\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = radioGroup.value === props.value;\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n\n  return (\n    <SwitchBase\n      color={color}\n      type=\"radio\"\n      icon={defaultIcon}\n      checkedIcon={defaultCheckedIcon}\n      classes={{\n        root: clsx(classes.root, classes[`color${capitalize(color)}`]),\n        checked: classes.checked,\n        disabled: classes.disabled,\n      }}\n      name={name}\n      checked={checked}\n      onChange={onChange}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nRadio.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiRadio' })(Radio);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Radio/Radio.js",
      "inheritance": {
        "component": "IconButton",
        "pathname": "/api/icon-button"
      },
      "usedInPages": [
        "/components/radio-buttons"
      ]
    },
    "RootRef": {
      "description": "⚠️⚠️⚠️\nIf you want the DOM element of a Material-UI component check out\n[FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)\nfirst.\n\nThis component uses `findDOMNode` which is deprecated in React.StrictMode.\n\nHelper component to allow attaching a ref to a\nwrapped element to access the underlying DOM element.\n\nIt's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\nFor example:\n```jsx\nimport React from 'react';\nimport RootRef from '@material-ui/core/RootRef';\n\nfunction MyComponent() {\n  const domRef = React.useRef();\n\n  React.useEffect(() => {\n    console.log(domRef.current); // DOM node\n  }, []);\n\n  return (\n    <RootRef rootRef={domRef}>\n      <SomeChildComponent />\n    </RootRef>\n  );\n}\n```",
      "displayName": "RootRef",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": true,
          "description": "The wrapped element.",
          "tags": []
        },
        "rootRef": {
          "type": {
            "name": "custom",
            "raw": "refType.isRequired"
          },
          "required": false,
          "description": "A ref that points to the first DOM node of the wrapped element.",
          "tags": []
        }
      },
      "name": "RootRef",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, refType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\n\n/**\n * ⚠️⚠️⚠️\n * If you want the DOM element of a Material-UI component check out\n * [FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)\n * first.\n *\n * This component uses `findDOMNode` which is deprecated in React.StrictMode.\n *\n * Helper component to allow attaching a ref to a\n * wrapped element to access the underlying DOM element.\n *\n * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\n * For example:\n * ```jsx\n * import React from 'react';\n * import RootRef from '@material-ui/core/RootRef';\n *\n * function MyComponent() {\n *   const domRef = React.useRef();\n *\n *   React.useEffect(() => {\n *     console.log(domRef.current); // DOM node\n *   }, []);\n *\n *   return (\n *     <RootRef rootRef={domRef}>\n *       <SomeChildComponent />\n *     </RootRef>\n *   );\n * }\n * ```\n */\nclass RootRef extends React.Component {\n  componentDidMount() {\n    this.ref = ReactDOM.findDOMNode(this);\n    setRef(this.props.rootRef, this.ref);\n  }\n\n  componentDidUpdate(prevProps) {\n    const ref = ReactDOM.findDOMNode(this);\n\n    if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {\n      if (prevProps.rootRef !== this.props.rootRef) {\n        setRef(prevProps.rootRef, null);\n      }\n\n      this.ref = ref;\n      setRef(this.props.rootRef, this.ref);\n    }\n  }\n\n  componentWillUnmount() {\n    this.ref = null;\n    setRef(this.props.rootRef, null);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nRootRef.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: PropTypes.element.isRequired,\n  /**\n   * A ref that points to the first DOM node of the wrapped element.\n   */\n  rootRef: refType.isRequired,\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  RootRef.propTypes = exactProp(RootRef.propTypes);\n}\n\nexport default RootRef;\n",
      "spread": false,
      "EOL": "\n",
      "filename": "/packages/material-ui/src/RootRef/RootRef.js",
      "inheritance": null,
      "usedInPages": []
    },
    "SnackbarContent": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The action to display.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "message": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The message to display.",
          "tags": []
        },
        "role": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'alert'",
                "computed": false
              },
              {
                "value": "'alertdialog'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The role of the SnackbarContent. If the Snackbar requires focus\nto be closed, the `alertdialog` role should be used instead.",
          "defaultValue": {
            "value": "'alert'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "SnackbarContent",
      "styles": {
        "classes": [
          "root",
          "message",
          "action"
        ],
        "name": "MuiSnackbarContent",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "message": "Styles applied to the message wrapper element.",
          "action": "Styles applied to the action wrapper element if `action` is provided."
        },
        "globalClasses": {
          "root": "MuiSnackbarContent-root",
          "message": "MuiSnackbarContent-message",
          "action": "MuiSnackbarContent-action"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Paper from '../Paper';\nimport Typography from '../Typography';\nimport { emphasize } from '../styles/colorManipulator';\n\nexport const styles = theme => {\n  const emphasis = theme.palette.type === 'light' ? 0.8 : 0.98;\n  const backgroundColor = emphasize(theme.palette.background.default, emphasis);\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.getContrastText(backgroundColor),\n      backgroundColor,\n      display: 'flex',\n      alignItems: 'center',\n      flexWrap: 'wrap',\n      padding: '6px 16px',\n      borderRadius: theme.shape.borderRadius,\n      flexGrow: 1,\n      [theme.breakpoints.up('sm')]: {\n        flexGrow: 'initial',\n        minWidth: 288,\n      },\n    },\n    /* Styles applied to the message wrapper element. */\n    message: {\n      padding: '8px 0',\n    },\n    /* Styles applied to the action wrapper element if `action` is provided. */\n    action: {\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: 'auto',\n      paddingLeft: 16,\n      marginRight: -8,\n    },\n  };\n};\n\nconst SnackbarContent = React.forwardRef(function SnackbarContent(props, ref) {\n  const { action, classes, className, message, role = 'alert', ...other } = props;\n\n  return (\n    <Paper\n      component={Typography}\n      variant=\"body2\"\n      variantMapping={{\n        body1: 'div',\n        body2: 'div',\n      }}\n      role={role}\n      square\n      elevation={6}\n      className={clsx(classes.root, className)}\n      ref={ref}\n      {...other}\n    >\n      <div className={classes.message}>{message}</div>\n      {action ? <div className={classes.action}>{action}</div> : null}\n    </Paper>\n  );\n});\n\nSnackbarContent.propTypes = {\n  /**\n   * The action to display.\n   */\n  action: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n  /**\n   * The role of the SnackbarContent. If the Snackbar requires focus\n   * to be closed, the `alertdialog` role should be used instead.\n   */\n  role: PropTypes.oneOf(['alert', 'alertdialog']),\n};\n\nexport default withStyles(styles, { name: 'MuiSnackbarContent' })(SnackbarContent);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/SnackbarContent/SnackbarContent.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/snackbars"
      ]
    },
    "Step": {
      "description": "",
      "methods": [],
      "props": {
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Sets the step as active. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Should be `Step` sub-components such as `StepLabel`, `StepContent`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "completed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as completed. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as disabled, will also disable the button if\n`StepButton` is a child of `Step`. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Step",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "alternativeLabel",
          "completed"
        ],
        "name": "MuiStep",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
          "completed": "Pseudo-class applied to the root element if `completed={true}`."
        },
        "globalClasses": {
          "root": "MuiStep-root",
          "horizontal": "MuiStep-horizontal",
          "vertical": "MuiStep-vertical",
          "alternativeLabel": "MuiStep-alternativeLabel",
          "completed": "MuiStep-completed"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {\n    paddingLeft: 8,\n    paddingRight: 8,\n  },\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {},\n  /* Styles applied to the root element if `alternativeLabel={true}`. */\n  alternativeLabel: {\n    flex: 1,\n    position: 'relative',\n  },\n  /* Pseudo-class applied to the root element if `completed={true}`. */\n  completed: {},\n};\n\nconst Step = React.forwardRef(function Step(props, ref) {\n  const {\n    active = false,\n    alternativeLabel,\n    children,\n    classes,\n    className,\n    completed = false,\n    connector,\n    disabled = false,\n    index,\n    last,\n    orientation,\n    ...other\n  } = props;\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        classes[orientation],\n        {\n          [classes.alternativeLabel]: alternativeLabel,\n          [classes.completed]: completed,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {connector &&\n        alternativeLabel &&\n        index !== 0 &&\n        React.cloneElement(connector, {\n          orientation,\n          alternativeLabel,\n          index,\n          active,\n          completed,\n          disabled,\n        })}\n      {React.Children.map(children, child => {\n        if (!React.isValidElement(child)) {\n          return null;\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (child.type === React.Fragment) {\n            console.error(\n              [\n                \"Material-UI: the Step component doesn't accept a Fragment as a child.\",\n                'Consider providing an array instead.',\n              ].join('\\n'),\n            );\n          }\n        }\n\n        return React.cloneElement(child, {\n          active,\n          alternativeLabel,\n          completed,\n          disabled,\n          last,\n          icon: index + 1,\n          orientation,\n          ...child.props,\n        });\n      })}\n    </div>\n  );\n});\n\nStep.propTypes = {\n  /**\n   * Sets the step as active. Is passed to child components.\n   */\n  active: PropTypes.bool,\n  /**\n   * @ignore\n   * Set internally by Stepper when it's supplied with the alternativeLabel property.\n   */\n  alternativeLabel: PropTypes.bool,\n  /**\n   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Mark the step as completed. Is passed to child components.\n   */\n  completed: PropTypes.bool,\n  /**\n   * @ignore\n   * Passed down from Stepper if alternativeLabel is also set.\n   */\n  connector: PropTypes.element,\n  /**\n   * Mark the step as disabled, will also disable the button if\n   * `StepButton` is a child of `Step`. Is passed to child components.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   * Used internally for numbering.\n   */\n  index: PropTypes.number,\n  /**\n   * @ignore\n   */\n  last: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n};\n\nexport default withStyles(styles, { name: 'MuiStep' })(Step);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Step/Step.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepButton": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Can be a `StepLabel` or a node to place inside `StepLabel` as children.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon displayed by the step label.",
          "tags": []
        },
        "optional": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The optional node to display.",
          "tags": []
        }
      },
      "name": "StepButton",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "touchRipple"
        ],
        "name": "MuiStepButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "touchRipple": "Styles applied to the `ButtonBase` touch-ripple."
        },
        "globalClasses": {
          "root": "MuiStepButton-root",
          "horizontal": "MuiStepButton-horizontal",
          "vertical": "MuiStepButton-vertical",
          "touchRipple": "MuiStepButton-touchRipple"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport StepLabel from '../StepLabel';\nimport isMuiElement from '../utils/isMuiElement';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    padding: '24px 16px',\n    margin: '-24px -16px',\n    boxSizing: 'content-box',\n  },\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {},\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    justifyContent: 'flex-start',\n    padding: '8px',\n    margin: '-8px',\n  },\n  /* Styles applied to the `ButtonBase` touch-ripple. */\n  touchRipple: {\n    color: 'rgba(0, 0, 0, 0.3)',\n  },\n};\n\nconst StepButton = React.forwardRef(function StepButton(props, ref) {\n  const {\n    active,\n    alternativeLabel,\n    children,\n    classes,\n    className,\n    completed,\n    disabled,\n    icon,\n    last,\n    optional,\n    orientation,\n    ...other\n  } = props;\n\n  const childProps = {\n    active,\n    alternativeLabel,\n    completed,\n    disabled,\n    icon,\n    optional,\n    orientation,\n  };\n  const child = isMuiElement(children, ['StepLabel']) ? (\n    React.cloneElement(children, childProps)\n  ) : (\n    <StepLabel {...childProps}>{children}</StepLabel>\n  );\n\n  return (\n    <ButtonBase\n      disabled={disabled}\n      TouchRippleProps={{ className: classes.touchRipple }}\n      className={clsx(classes.root, classes[orientation], className)}\n      ref={ref}\n      {...other}\n    >\n      {child}\n    </ButtonBase>\n  );\n});\n\nStepButton.propTypes = {\n  /**\n   * @ignore\n   * Passed in via `Step` - passed through to `StepLabel`.\n   */\n  active: PropTypes.bool,\n  /**\n   * @ignore\n   * Set internally by Stepper when it's supplied with the alternativeLabel property.\n   */\n  alternativeLabel: PropTypes.bool,\n  /**\n   * Can be a `StepLabel` or a node to place inside `StepLabel` as children.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   * Sets completed styling. Is passed to StepLabel.\n   */\n  completed: PropTypes.bool,\n  /**\n   * @ignore\n   * Disables the button and sets disabled styling. Is passed to StepLabel.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The icon displayed by the step label.\n   */\n  icon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  last: PropTypes.bool,\n  /**\n   * The optional node to display.\n   */\n  optional: PropTypes.node,\n  /**\n   * @ignore\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n};\n\nexport default withStyles(styles, { name: 'MuiStepButton' })(StepButton);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/StepButton/StepButton.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepConnector": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        }
      },
      "name": "StepConnector",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "alternativeLabel",
          "active",
          "completed",
          "disabled",
          "line",
          "lineHorizontal",
          "lineVertical"
        ],
        "name": "MuiStepConnector",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
          "active": "Pseudo-class applied to the root element if `active={true}`.",
          "completed": "Pseudo-class applied to the root element if `completed={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "line": "Styles applied to the line element.",
          "lineHorizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "lineVertical": "Styles applied to the root element if `orientation=\"vertical\"`."
        },
        "globalClasses": {
          "root": "MuiStepConnector-root",
          "horizontal": "MuiStepConnector-horizontal",
          "vertical": "MuiStepConnector-vertical",
          "alternativeLabel": "MuiStepConnector-alternativeLabel",
          "active": "MuiStepConnector-active",
          "completed": "MuiStepConnector-completed",
          "disabled": "Mui-disabled",
          "line": "MuiStepConnector-line",
          "lineHorizontal": "MuiStepConnector-lineHorizontal",
          "lineVertical": "MuiStepConnector-lineVertical"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n  },\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {},\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    marginLeft: 12, // half icon\n    padding: '0 0 8px',\n  },\n  /* Styles applied to the root element if `alternativeLabel={true}`. */\n  alternativeLabel: {\n    position: 'absolute',\n    top: 8 + 4,\n    left: 'calc(-50% + 20px)',\n    right: 'calc(50% + 20px)',\n  },\n  /* Pseudo-class applied to the root element if `active={true}`. */\n  active: {},\n  /* Pseudo-class applied to the root element if `completed={true}`. */\n  completed: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the line element. */\n  line: {\n    display: 'block',\n    borderColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600],\n  },\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  lineHorizontal: {\n    borderTopStyle: 'solid',\n    borderTopWidth: 1,\n  },\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  lineVertical: {\n    borderLeftStyle: 'solid',\n    borderLeftWidth: 1,\n    minHeight: 24,\n  },\n});\n\nconst StepConnector = React.forwardRef(function StepConnector(props, ref) {\n  const {\n    active,\n    alternativeLabel = false,\n    classes,\n    className,\n    completed,\n    disabled,\n    index,\n    orientation = 'horizontal',\n    ...other\n  } = props;\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        classes[orientation],\n        {\n          [classes.alternativeLabel]: alternativeLabel,\n          [classes.active]: active,\n          [classes.completed]: completed,\n          [classes.disabled]: disabled,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      <span\n        className={clsx(classes.line, {\n          [classes.lineHorizontal]: orientation === 'horizontal',\n          [classes.lineVertical]: orientation === 'vertical',\n        })}\n      />\n    </div>\n  );\n});\n\nStepConnector.propTypes = {\n  /**\n   * @ignore\n   */\n  active: PropTypes.bool,\n  /**\n   * @ignore\n   * Set internally by Step when it's supplied with the alternativeLabel property.\n   */\n  alternativeLabel: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  completed: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  index: PropTypes.number,\n  /**\n   * @ignore\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n};\n\nexport default withStyles(styles, { name: 'MuiStepConnector' })(StepConnector);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/StepConnector/StepConnector.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepContent": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Step content.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.",
          "defaultValue": {
            "value": "Collapse",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "Adjust the duration of the content expand transition.\nPassed as a prop to the transition component.\n\nSet to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `Transition` element.",
          "tags": []
        }
      },
      "name": "StepContent",
      "styles": {
        "classes": [
          "root",
          "last",
          "transition"
        ],
        "name": "MuiStepContent",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "last": "Styles applied to the root element if `last={true}` (controlled by `Step`).",
          "transition": "Styles applied to the Transition component."
        },
        "globalClasses": {
          "root": "MuiStepContent-root",
          "last": "MuiStepContent-last",
          "transition": "MuiStepContent-transition"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Collapse from '../Collapse';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    marginTop: 8,\n    marginLeft: 12, // half icon\n    paddingLeft: 8 + 12, // margin + half icon\n    paddingRight: 8,\n    borderLeft: `1px solid ${\n      theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    }`,\n  },\n  /* Styles applied to the root element if `last={true}` (controlled by `Step`). */\n  last: {\n    borderLeft: 'none',\n  },\n  /* Styles applied to the Transition component. */\n  transition: {},\n});\n\nconst StepContent = React.forwardRef(function StepContent(props, ref) {\n  const {\n    active,\n    alternativeLabel,\n    children,\n    classes,\n    className,\n    completed,\n    last,\n    optional,\n    orientation,\n    TransitionComponent = Collapse,\n    transitionDuration: transitionDurationProp = 'auto',\n    TransitionProps,\n    ...other\n  } = props;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (orientation !== 'vertical') {\n      console.error(\n        'Material-UI: <StepContent /> is only designed for use with the vertical stepper.',\n      );\n    }\n  }\n\n  let transitionDuration = transitionDurationProp;\n\n  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {\n    transitionDuration = undefined;\n  }\n\n  return (\n    <div className={clsx(classes.root, { [classes.last]: last }, className)} ref={ref} {...other}>\n      <TransitionComponent\n        in={active}\n        className={classes.transition}\n        timeout={transitionDuration}\n        unmountOnExit\n        {...TransitionProps}\n      >\n        {children}\n      </TransitionComponent>\n    </div>\n  );\n});\n\nStepContent.propTypes = {\n  /**\n   * @ignore\n   * Expands the content.\n   */\n  active: PropTypes.bool,\n  /**\n   * @ignore\n   * Set internally by Step when it's supplied with the alternativeLabel prop.\n   */\n  alternativeLabel: PropTypes.bool,\n  /**\n   * Step content.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  completed: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  last: PropTypes.bool,\n  /**\n   * @ignore\n   * Set internally by Step when it's supplied with the optional prop.\n   */\n  optional: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * Adjust the duration of the content expand transition.\n   * Passed as a prop to the transition component.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n    PropTypes.oneOf(['auto']),\n  ]),\n  /**\n   * Props applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiStepContent' })(StepContent);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/StepContent/StepContent.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepIcon": {
      "description": "",
      "methods": [],
      "props": {
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Whether this step is active.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "completed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as completed. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as failed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The label displayed in the step icon.",
          "tags": []
        }
      },
      "name": "StepIcon",
      "styles": {
        "classes": [
          "root",
          "text",
          "active",
          "completed",
          "error"
        ],
        "name": "MuiStepIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "text": "Styles applied to the SVG text element.",
          "active": "Pseudo-class applied to the root element if `active={true}`.",
          "completed": "Pseudo-class applied to the root element if `completed={true}`.",
          "error": "Pseudo-class applied to the root element if `error={true}`."
        },
        "globalClasses": {
          "root": "MuiStepIcon-root",
          "text": "MuiStepIcon-text",
          "active": "MuiStepIcon-active",
          "completed": "MuiStepIcon-completed",
          "error": "Mui-error"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircle from '../internal/svg-icons/CheckCircle';\nimport Warning from '../internal/svg-icons/Warning';\nimport withStyles from '../styles/withStyles';\nimport SvgIcon from '../SvgIcon';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    color: theme.palette.text.disabled,\n    '&$active': {\n      color: theme.palette.primary.main,\n    },\n    '&$completed': {\n      color: theme.palette.primary.main,\n    },\n    '&$error': {\n      color: theme.palette.error.main,\n    },\n  },\n  /* Styles applied to the SVG text element. */\n  text: {\n    fill: theme.palette.primary.contrastText,\n    fontSize: theme.typography.caption.fontSize,\n    fontFamily: theme.typography.fontFamily,\n  },\n  /* Pseudo-class applied to the root element if `active={true}`. */\n  active: {},\n  /* Pseudo-class applied to the root element if `completed={true}`. */\n  completed: {},\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n});\n\nconst StepIcon = React.forwardRef(function StepIcon(props, ref) {\n  const { completed = false, icon, active = false, error = false, classes } = props;\n\n  if (typeof icon === 'number' || typeof icon === 'string') {\n    if (error) {\n      return <Warning className={clsx(classes.root, classes.error)} ref={ref} />;\n    }\n    if (completed) {\n      return <CheckCircle className={clsx(classes.root, classes.completed)} ref={ref} />;\n    }\n    return (\n      <SvgIcon\n        className={clsx(classes.root, {\n          [classes.active]: active,\n        })}\n        ref={ref}\n      >\n        <circle cx=\"12\" cy=\"12\" r=\"12\" />\n        <text className={classes.text} x=\"12\" y=\"16\" textAnchor=\"middle\">\n          {icon}\n        </text>\n      </SvgIcon>\n    );\n  }\n\n  return icon;\n});\n\nStepIcon.propTypes = {\n  /**\n   * Whether this step is active.\n   */\n  active: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * Mark the step as completed. Is passed to child components.\n   */\n  completed: PropTypes.bool,\n  /**\n   * Mark the step as failed.\n   */\n  error: PropTypes.bool,\n  /**\n   * The label displayed in the step icon.\n   */\n  icon: PropTypes.node.isRequired,\n};\n\nexport default withStyles(styles, { name: 'MuiStepIcon' })(StepIcon);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "SVGSVGElement",
      "filename": "/packages/material-ui/src/StepIcon/StepIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "StepLabel": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "In most cases will simply be a string containing a title for the label.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as disabled, will also disable the button if\n`StepLabelButton` is a child of `StepLabel`. Is passed to child components.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Mark the step as failed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Override the default label of the step icon.",
          "tags": []
        },
        "optional": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The optional node to display.",
          "tags": []
        },
        "StepIconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component to render in place of the [`StepIcon`](/api/step-icon/).",
          "tags": []
        },
        "StepIconProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`StepIcon`](/api/step-icon/) element.",
          "tags": []
        }
      },
      "name": "StepLabel",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "label",
          "active",
          "completed",
          "error",
          "disabled",
          "iconContainer",
          "alternativeLabel",
          "labelContainer"
        ],
        "name": "MuiStepLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\".",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\".",
          "label": "Styles applied to the `Typography` component which wraps `children`.",
          "active": "Pseudo-class applied to the `Typography` component if `active={true}`.",
          "completed": "Pseudo-class applied to the `Typography` component if `completed={true}`.",
          "error": "Pseudo-class applied to the root element and `Typography` component if `error={true}`.",
          "disabled": "Pseudo-class applied to the root element and `Typography` component if `disabled={true}`.",
          "iconContainer": "Styles applied to the `icon` container element.",
          "alternativeLabel": "Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`.",
          "labelContainer": "Styles applied to the container element which wraps `Typography` and `optional`."
        },
        "globalClasses": {
          "root": "MuiStepLabel-root",
          "horizontal": "MuiStepLabel-horizontal",
          "vertical": "MuiStepLabel-vertical",
          "label": "MuiStepLabel-label",
          "active": "MuiStepLabel-active",
          "completed": "MuiStepLabel-completed",
          "error": "Mui-error",
          "disabled": "Mui-disabled",
          "iconContainer": "MuiStepLabel-iconContainer",
          "alternativeLabel": "MuiStepLabel-alternativeLabel",
          "labelContainer": "MuiStepLabel-labelContainer"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport StepIcon from '../StepIcon';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    '&$alternativeLabel': {\n      flexDirection: 'column',\n    },\n    '&$disabled': {\n      cursor: 'default',\n    },\n  },\n  /* Styles applied to the root element if `orientation=\"horizontal\". */\n  horizontal: {},\n  /* Styles applied to the root element if `orientation=\"vertical\". */\n  vertical: {},\n  /* Styles applied to the `Typography` component which wraps `children`. */\n  label: {\n    color: theme.palette.text.secondary,\n    '&$active': {\n      color: theme.palette.text.primary,\n      fontWeight: 500,\n    },\n    '&$completed': {\n      color: theme.palette.text.primary,\n      fontWeight: 500,\n    },\n    '&$alternativeLabel': {\n      textAlign: 'center',\n      marginTop: 16,\n    },\n    '&$error': {\n      color: theme.palette.error.main,\n    },\n  },\n  /* Pseudo-class applied to the `Typography` component if `active={true}`. */\n  active: {},\n  /* Pseudo-class applied to the `Typography` component if `completed={true}`. */\n  completed: {},\n  /* Pseudo-class applied to the root element and `Typography` component if `error={true}`. */\n  error: {},\n  /* Pseudo-class applied to the root element and `Typography` component if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the `icon` container element. */\n  iconContainer: {\n    flexShrink: 0, // Fix IE 11 issue\n    display: 'flex',\n    paddingRight: 8,\n    '&$alternativeLabel': {\n      paddingRight: 0,\n    },\n  },\n  /* Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`. */\n  alternativeLabel: {},\n  /* Styles applied to the container element which wraps `Typography` and `optional`. */\n  labelContainer: {\n    width: '100%',\n  },\n});\n\nconst StepLabel = React.forwardRef(function StepLabel(props, ref) {\n  const {\n    active = false,\n    alternativeLabel = false,\n    children,\n    classes,\n    className,\n    completed = false,\n    disabled = false,\n    error = false,\n    icon,\n    last,\n    optional,\n    orientation = 'horizontal',\n    StepIconComponent: StepIconComponentProp,\n    StepIconProps,\n    ...other\n  } = props;\n\n  let StepIconComponent = StepIconComponentProp;\n\n  if (icon && !StepIconComponent) {\n    StepIconComponent = StepIcon;\n  }\n\n  return (\n    <span\n      className={clsx(\n        classes.root,\n        classes[orientation],\n        {\n          [classes.disabled]: disabled,\n          [classes.alternativeLabel]: alternativeLabel,\n          [classes.error]: error,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {icon || StepIconComponent ? (\n        <span\n          className={clsx(classes.iconContainer, {\n            [classes.alternativeLabel]: alternativeLabel,\n          })}\n        >\n          <StepIconComponent\n            completed={completed}\n            active={active}\n            error={error}\n            icon={icon}\n            {...StepIconProps}\n          />\n        </span>\n      ) : null}\n      <span className={classes.labelContainer}>\n        <Typography\n          variant=\"body2\"\n          component=\"span\"\n          className={clsx(classes.label, {\n            [classes.alternativeLabel]: alternativeLabel,\n            [classes.completed]: completed,\n            [classes.active]: active,\n            [classes.error]: error,\n          })}\n          display=\"block\"\n        >\n          {children}\n        </Typography>\n        {optional}\n      </span>\n    </span>\n  );\n});\n\nStepLabel.propTypes = {\n  /**\n   * @ignore\n   * Sets the step as active. Is passed to child components.\n   */\n  active: PropTypes.bool,\n  /**\n   * @ignore\n   * Set internally by Stepper when it's supplied with the alternativeLabel prop.\n   */\n  alternativeLabel: PropTypes.bool,\n  /**\n   * In most cases will simply be a string containing a title for the label.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   * Mark the step as completed. Is passed to child components.\n   */\n  completed: PropTypes.bool,\n  /**\n   * Mark the step as disabled, will also disable the button if\n   * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Mark the step as failed.\n   */\n  error: PropTypes.bool,\n  /**\n   * Override the default label of the step icon.\n   */\n  icon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  last: PropTypes.bool,\n  /**\n   * The optional node to display.\n   */\n  optional: PropTypes.node,\n  /**\n   * @ignore\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The component to render in place of the [`StepIcon`](/api/step-icon/).\n   */\n  StepIconComponent: PropTypes.elementType,\n  /**\n   * Props applied to the [`StepIcon`](/api/step-icon/) element.\n   */\n  StepIconProps: PropTypes.object,\n};\n\nStepLabel.muiName = 'StepLabel';\n\nexport default withStyles(styles, { name: 'MuiStepLabel' })(StepLabel);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/StepLabel/StepLabel.js",
      "inheritance": null,
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "Stepper": {
      "description": "",
      "methods": [],
      "props": {
        "activeStep": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Set the active step (zero based index).",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "alternativeLabel": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If set to 'true' and orientation is horizontal,\nthen the step label will be positioned under the icon.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Two or more `<Step />` components.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "connector": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "An element to be placed between each step.",
          "defaultValue": {
            "value": "<StepConnector />",
            "computed": false
          },
          "tags": []
        },
        "nonLinear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If set the `Stepper` will not assist in controlling steps for linear flow.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The stepper orientation (layout flow direction).",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Stepper",
      "styles": {
        "classes": [
          "root",
          "horizontal",
          "vertical",
          "alternativeLabel"
        ],
        "name": "MuiStepper",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`."
        },
        "globalClasses": {
          "root": "MuiStepper-root",
          "horizontal": "MuiStepper-horizontal",
          "vertical": "MuiStepper-vertical",
          "alternativeLabel": "MuiStepper-alternativeLabel"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Paper from '../Paper';\nimport StepConnector from '../StepConnector';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    padding: 24,\n  },\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column',\n  },\n  /* Styles applied to the root element if `alternativeLabel={true}`. */\n  alternativeLabel: {\n    alignItems: 'flex-start',\n  },\n};\n\nconst defaultConnector = <StepConnector />;\n\nconst Stepper = React.forwardRef(function Stepper(props, ref) {\n  const {\n    activeStep = 0,\n    alternativeLabel = false,\n    children,\n    classes,\n    className,\n    connector: connectorProp = defaultConnector,\n    nonLinear = false,\n    orientation = 'horizontal',\n    ...other\n  } = props;\n\n  const connector = React.isValidElement(connectorProp)\n    ? React.cloneElement(connectorProp, { orientation })\n    : null;\n  const childrenArray = React.Children.toArray(children);\n  const steps = childrenArray.map((step, index) => {\n    const controlProps = {\n      alternativeLabel,\n      connector: connectorProp,\n      last: index + 1 === childrenArray.length,\n      orientation,\n    };\n\n    const state = {\n      index,\n      active: false,\n      completed: false,\n      disabled: false,\n    };\n\n    if (activeStep === index) {\n      state.active = true;\n    } else if (!nonLinear && activeStep > index) {\n      state.completed = true;\n    } else if (!nonLinear && activeStep < index) {\n      state.disabled = true;\n    }\n\n    return [\n      !alternativeLabel &&\n        connector &&\n        index !== 0 &&\n        React.cloneElement(connector, {\n          key: index,\n          ...state,\n        }),\n      React.cloneElement(step, { ...controlProps, ...state, ...step.props }),\n    ];\n  });\n\n  return (\n    <Paper\n      square\n      elevation={0}\n      className={clsx(\n        classes.root,\n        classes[orientation],\n        {\n          [classes.alternativeLabel]: alternativeLabel,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {steps}\n    </Paper>\n  );\n});\n\nStepper.propTypes = {\n  /**\n   * Set the active step (zero based index).\n   */\n  activeStep: PropTypes.number,\n  /**\n   * If set to 'true' and orientation is horizontal,\n   * then the step label will be positioned under the icon.\n   */\n  alternativeLabel: PropTypes.bool,\n  /**\n   * Two or more `<Step />` components.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * An element to be placed between each step.\n   */\n  connector: PropTypes.element,\n  /**\n   * If set the `Stepper` will not assist in controlling steps for linear flow.\n   */\n  nonLinear: PropTypes.bool,\n  /**\n   * The stepper orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n};\n\nexport default withStyles(styles, { name: 'MuiStepper' })(Stepper);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Stepper/Stepper.js",
      "inheritance": {
        "component": "Paper",
        "pathname": "/api/paper"
      },
      "usedInPages": [
        "/components/steppers"
      ]
    },
    "SvgIcon": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Node passed into the SVG element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'action'",
                "computed": false
              },
              {
                "value": "'disabled'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'svg'",
            "computed": false
          },
          "tags": []
        },
        "fontSize": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "htmlColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Applies a color attribute to the SVG element.",
          "tags": []
        },
        "shapeRendering": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The shape-rendering attribute. The behavior of the different options is described on the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\nIf you are having issues with blurry icons you should investigate this property.",
          "tags": []
        },
        "titleAccess": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent",
          "tags": []
        },
        "viewBox": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Allows you to redefine what the coordinates without units mean inside an SVG element.\nFor example, if the SVG element is 500 (width) by 200 (height),\nand you pass viewBox=\"0 0 50 20\",\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\nto bottom right (50,20) and each unit will be worth 10px.",
          "defaultValue": {
            "value": "'0 0 24 24'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "SvgIcon",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "colorAction",
          "colorError",
          "colorDisabled",
          "fontSizeInherit",
          "fontSizeSmall",
          "fontSizeLarge"
        ],
        "name": "MuiSvgIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorAction": "Styles applied to the root element if `color=\"action\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
          "fontSizeInherit": "Styles applied to the root element if `fontSize=\"inherit\"`.",
          "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
          "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiSvgIcon-root",
          "colorPrimary": "MuiSvgIcon-colorPrimary",
          "colorSecondary": "MuiSvgIcon-colorSecondary",
          "colorAction": "MuiSvgIcon-colorAction",
          "colorError": "MuiSvgIcon-colorError",
          "colorDisabled": "MuiSvgIcon-colorDisabled",
          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    userSelect: 'none',\n    width: '1em',\n    height: '1em',\n    display: 'inline-block',\n    fill: 'currentColor',\n    flexShrink: 0,\n    fontSize: theme.typography.pxToRem(24),\n    transition: theme.transitions.create('fill', {\n      duration: theme.transitions.duration.shorter,\n    }),\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the root element if `color=\"action\"`. */\n  colorAction: {\n    color: theme.palette.action.active,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main,\n  },\n  /* Styles applied to the root element if `color=\"disabled\"`. */\n  colorDisabled: {\n    color: theme.palette.action.disabled,\n  },\n  /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n  fontSizeInherit: {\n    fontSize: 'inherit',\n  },\n  /* Styles applied to the root element if `fontSize=\"small\"`. */\n  fontSizeSmall: {\n    fontSize: theme.typography.pxToRem(20),\n  },\n  /* Styles applied to the root element if `fontSize=\"large\"`. */\n  fontSizeLarge: {\n    fontSize: theme.typography.pxToRem(35),\n  },\n});\n\nconst SvgIcon = React.forwardRef(function SvgIcon(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'inherit',\n    component: Component = 'svg',\n    fontSize = 'default',\n    htmlColor,\n    titleAccess,\n    viewBox = '0 0 24 24',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes[`color${capitalize(color)}`]]: color !== 'inherit',\n          [classes[`fontSize${capitalize(fontSize)}`]]: fontSize !== 'default',\n        },\n        className,\n      )}\n      focusable=\"false\"\n      viewBox={viewBox}\n      color={htmlColor}\n      aria-hidden={titleAccess ? 'false' : 'true'}\n      role={titleAccess ? 'img' : 'presentation'}\n      ref={ref}\n      {...other}\n    >\n      {children}\n      {titleAccess ? <title>{titleAccess}</title> : null}\n    </Component>\n  );\n});\n\nSvgIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   */\n  color: PropTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['default', 'inherit', 'large', 'small']),\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this property.\n   */\n  shapeRendering: PropTypes.string,\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   */\n  viewBox: PropTypes.string,\n};\n\nSvgIcon.muiName = 'SvgIcon';\n\nexport default withStyles(styles, { name: 'MuiSvgIcon' })(SvgIcon);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "SVGSVGElement",
      "filename": "/packages/material-ui/src/SvgIcon/SvgIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/icons",
        "/components/material-icons"
      ]
    },
    "Switch": {
      "description": "",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is checked.",
          "tags": []
        },
        "checkedIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is checked.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'default'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the switch will be disabled.",
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "edge": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'end'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when the component is unchecked.",
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the state is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the switch.\n`small` is equivalent to the dense switch styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The input component prop `type`.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the component. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "Switch",
      "styles": {
        "classes": [
          "root",
          "edgeStart",
          "edgeEnd",
          "switchBase",
          "colorPrimary",
          "colorSecondary",
          "sizeSmall",
          "checked",
          "disabled",
          "input",
          "thumb",
          "track"
        ],
        "name": "MuiSwitch",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
          "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
          "switchBase": "Styles applied to the internal `SwitchBase` component's `root` class.",
          "colorPrimary": "Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "checked": "Pseudo-class applied to the internal `SwitchBase` component's `checked` class.",
          "disabled": "Pseudo-class applied to the internal SwitchBase component's disabled class.",
          "input": "Styles applied to the internal SwitchBase component's input element.",
          "thumb": "Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop.",
          "track": "Styles applied to the track element."
        },
        "globalClasses": {
          "root": "MuiSwitch-root",
          "edgeStart": "MuiSwitch-edgeStart",
          "edgeEnd": "MuiSwitch-edgeEnd",
          "switchBase": "MuiSwitch-switchBase",
          "colorPrimary": "MuiSwitch-colorPrimary",
          "colorSecondary": "MuiSwitch-colorSecondary",
          "sizeSmall": "MuiSwitch-sizeSmall",
          "checked": "Mui-checked",
          "disabled": "Mui-disabled",
          "input": "MuiSwitch-input",
          "thumb": "MuiSwitch-thumb",
          "track": "MuiSwitch-track"
        }
      },
      "src": "// @inheritedComponent IconButton\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    width: 34 + 12 * 2,\n    height: 14 + 12 * 2,\n    overflow: 'hidden',\n    padding: 12,\n    boxSizing: 'border-box',\n    position: 'relative',\n    flexShrink: 0,\n    zIndex: 0, // Reset the stacking context.\n    verticalAlign: 'middle', // For correct alignment with the text.\n  },\n  /* Styles applied to the root element if `edge=\"start\"`. */\n  edgeStart: {\n    marginLeft: -8,\n  },\n  /* Styles applied to the root element if `edge=\"end\"`. */\n  edgeEnd: {\n    marginRight: -8,\n  },\n  /* Styles applied to the internal `SwitchBase` component's `root` class. */\n  switchBase: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    zIndex: 1, // Render above the focus ripple.\n    color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n    transition: theme.transitions.create(['left', 'transform'], {\n      duration: theme.transitions.duration.shortest,\n    }),\n    '&$checked': {\n      transform: 'translateX(50%)',\n    },\n    '&$disabled': {\n      color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n    },\n    '&$checked + $track': {\n      opacity: 0.5,\n    },\n    '&$disabled + $track': {\n      opacity: theme.palette.type === 'light' ? 0.12 : 0.1,\n    },\n  },\n  /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n  colorPrimary: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        '@media (hover: none)': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    '&$disabled': {\n      color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n    },\n    '&$checked + $track': {\n      backgroundColor: theme.palette.primary.main,\n    },\n    '&$disabled + $track': {\n      backgroundColor:\n        theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n    },\n  },\n  /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    '&$checked': {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        '@media (hover: none)': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    '&$disabled': {\n      color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n    },\n    '&$checked + $track': {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    '&$disabled + $track': {\n      backgroundColor:\n        theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n    },\n  },\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    width: 40,\n    height: 24,\n    padding: 7,\n    '& $thumb': {\n      width: 16,\n      height: 16,\n    },\n    '& $switchBase': {\n      padding: 4,\n    },\n  },\n  /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n  checked: {},\n  /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n  disabled: {},\n  /* Styles applied to the internal SwitchBase component's input element. */\n  input: {\n    left: '-100%',\n    width: '300%',\n  },\n  /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n  thumb: {\n    boxShadow: theme.shadows[1],\n    backgroundColor: 'currentColor',\n    width: 20,\n    height: 20,\n    borderRadius: '50%',\n  },\n  /* Styles applied to the track element. */\n  track: {\n    height: '100%',\n    width: '100%',\n    borderRadius: 14 / 2,\n    zIndex: -1,\n    transition: theme.transitions.create(['opacity', 'background-color'], {\n      duration: theme.transitions.duration.shortest,\n    }),\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n    opacity: theme.palette.type === 'light' ? 0.38 : 0.3,\n  },\n});\n\nconst Switch = React.forwardRef(function Switch(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'secondary',\n    edge = false,\n    size = 'medium',\n    ...other\n  } = props;\n\n  const icon = <span className={classes.thumb} />;\n\n  return (\n    <span\n      className={clsx(\n        classes.root,\n        {\n          [classes.edgeStart]: edge === 'start',\n          [classes.edgeEnd]: edge === 'end',\n          [classes[`size${capitalize(size)}`]]: size !== 'medium',\n        },\n        className,\n      )}\n    >\n      <SwitchBase\n        type=\"checkbox\"\n        icon={icon}\n        checkedIcon={icon}\n        classes={{\n          root: clsx(classes.switchBase, classes[`color${capitalize(color)}`]),\n          input: classes.input,\n          checked: classes.checked,\n          disabled: classes.disabled,\n        }}\n        ref={ref}\n        {...other}\n      />\n      <span className={classes.track} />\n    </span>\n  );\n});\n\nSwitch.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['start', 'end', false]),\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the switch.\n   * `small` is equivalent to the dense switch styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiSwitch' })(Switch);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Switch/Switch.js",
      "inheritance": {
        "component": "IconButton",
        "pathname": "/api/icon-button"
      },
      "usedInPages": [
        "/components/switches",
        "/components/transfer-list"
      ]
    },
    "Tab": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "unsupportedProp"
          },
          "required": false,
          "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the tab will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label element.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "You can provide your own value. Otherwise, we fallback to the child position index.",
          "tags": []
        },
        "wrapped": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Tab labels appear in a single row.\nThey can use a second line if needed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Tab",
      "styles": {
        "classes": [
          "root",
          "labelIcon",
          "textColorInherit",
          "textColorPrimary",
          "textColorSecondary",
          "selected",
          "disabled",
          "fullWidth",
          "wrapped",
          "wrapper"
        ],
        "name": "MuiTab",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "labelIcon": "Styles applied to the root element if both `icon` and `label` are provided.",
          "textColorInherit": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"inherit\"`.",
          "textColorPrimary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"primary\"`.",
          "textColorSecondary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"secondary\"`.",
          "selected": "Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component).",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component).",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component).",
          "wrapped": "Styles applied to the root element if `wrapped={true}`.",
          "wrapper": "Styles applied to the `icon` and `label`'s wrapper element."
        },
        "globalClasses": {
          "root": "MuiTab-root",
          "labelIcon": "MuiTab-labelIcon",
          "textColorInherit": "MuiTab-textColorInherit",
          "textColorPrimary": "MuiTab-textColorPrimary",
          "textColorSecondary": "MuiTab-textColorSecondary",
          "selected": "Mui-selected",
          "disabled": "Mui-disabled",
          "fullWidth": "MuiTab-fullWidth",
          "wrapped": "MuiTab-wrapped",
          "wrapper": "MuiTab-wrapper"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport unsupportedProp from '../utils/unsupportedProp';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    ...theme.typography.button,\n    maxWidth: 264,\n    minWidth: 72,\n    position: 'relative',\n    boxSizing: 'border-box',\n    minHeight: 48,\n    flexShrink: 0,\n    padding: '6px 12px',\n    [theme.breakpoints.up('sm')]: {\n      padding: '6px 24px',\n    },\n    overflow: 'hidden',\n    whiteSpace: 'normal',\n    textAlign: 'center',\n    [theme.breakpoints.up('sm')]: {\n      fontSize: theme.typography.pxToRem(13),\n      minWidth: 160,\n    },\n  },\n  /* Styles applied to the root element if both `icon` and `label` are provided. */\n  labelIcon: {\n    minHeight: 72,\n    paddingTop: 9,\n    '& $wrapper > *:first-child': {\n      marginBottom: 6,\n    },\n  },\n  /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"inherit\"`. */\n  textColorInherit: {\n    color: 'inherit',\n    opacity: 0.7,\n    '&$selected': {\n      opacity: 1,\n    },\n    '&$disabled': {\n      opacity: 0.5,\n    },\n  },\n  /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"primary\"`. */\n  textColorPrimary: {\n    color: theme.palette.text.secondary,\n    '&$selected': {\n      color: theme.palette.primary.main,\n    },\n    '&$disabled': {\n      color: theme.palette.text.disabled,\n    },\n  },\n  /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"secondary\"`. */\n  textColorSecondary: {\n    color: theme.palette.text.secondary,\n    '&$selected': {\n      color: theme.palette.secondary.main,\n    },\n    '&$disabled': {\n      color: theme.palette.text.disabled,\n    },\n  },\n  /* Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component). */\n  selected: {},\n  /* Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component). */\n  disabled: {},\n  /* Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component). */\n  fullWidth: {\n    flexShrink: 1,\n    flexGrow: 1,\n    flexBasis: 0,\n    maxWidth: 'none',\n  },\n  /* Styles applied to the root element if `wrapped={true}`. */\n  wrapped: {\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1.5,\n  },\n  /* Styles applied to the `icon` and `label`'s wrapper element. */\n  wrapper: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    flexDirection: 'column',\n  },\n});\n\nconst Tab = React.forwardRef(function Tab(props, ref) {\n  const {\n    classes,\n    className,\n    disabled = false,\n    disableFocusRipple = false,\n    fullWidth,\n    icon,\n    indicator,\n    label,\n    onChange,\n    onClick,\n    selected,\n    textColor = 'inherit',\n    value,\n    wrapped = false,\n    ...other\n  } = props;\n\n  const handleChange = event => {\n    if (onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    <ButtonBase\n      focusRipple={!disableFocusRipple}\n      className={clsx(\n        classes.root,\n        classes[`textColor${capitalize(textColor)}`],\n        {\n          [classes.disabled]: disabled,\n          [classes.selected]: selected,\n          [classes.labelIcon]: label && icon,\n          [classes.fullWidth]: fullWidth,\n          [classes.wrapped]: wrapped,\n        },\n        className,\n      )}\n      ref={ref}\n      role=\"tab\"\n      aria-selected={selected}\n      disabled={disabled}\n      onClick={handleChange}\n      {...other}\n    >\n      <span className={classes.wrapper}>\n        {icon}\n        {label}\n      </span>\n      {indicator}\n    </ButtonBase>\n  );\n});\n\nTab.propTypes = {\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the tab will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The icon element.\n   */\n  icon: PropTypes.node,\n  /**\n   * @ignore\n   * For server-side rendering consideration, we let the selected tab\n   * render the indicator.\n   */\n  indicator: PropTypes.node,\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  textColor: PropTypes.oneOf(['secondary', 'primary', 'inherit']),\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any,\n  /**\n   * Tab labels appear in a single row.\n   * They can use a second line if needed.\n   */\n  wrapped: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiTab' })(Tab);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/Tab/Tab.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/tabs"
      ]
    },
    "Table": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the table, normally `TableHead` and `TableBody`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'table'",
            "computed": false
          },
          "tags": []
        },
        "padding": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'checkbox'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Allows TableCells to inherit padding of the Table.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Allows TableCells to inherit size of the Table.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "stickyHeader": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set the header sticky.\n\n⚠️ It doesn't work with IE 11.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Table",
      "styles": {
        "classes": [
          "root",
          "stickyHeader"
        ],
        "name": "MuiTable",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "stickyHeader": "Styles applied to the root element if `stickyHeader={true}`."
        },
        "globalClasses": {
          "root": "MuiTable-root",
          "stickyHeader": "MuiTable-stickyHeader"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport TableContext from './TableContext';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table',\n    width: '100%',\n    borderCollapse: 'collapse',\n    borderSpacing: 0,\n    '& caption': {\n      ...theme.typography.body2,\n      padding: theme.spacing(2),\n      color: theme.palette.text.secondary,\n      textAlign: 'left',\n      captionSide: 'bottom',\n    },\n  },\n  /* Styles applied to the root element if `stickyHeader={true}`. */\n  stickyHeader: {\n    borderCollapse: 'separate',\n  },\n});\n\nconst Table = React.forwardRef(function Table(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'table',\n    padding = 'default',\n    size = 'medium',\n    stickyHeader = false,\n    ...other\n  } = props;\n  const table = React.useMemo(() => ({ padding, size, stickyHeader }), [\n    padding,\n    size,\n    stickyHeader,\n  ]);\n\n  return (\n    <TableContext.Provider value={table}>\n      <Component\n        ref={ref}\n        className={clsx(classes.root, { [classes.stickyHeader]: stickyHeader }, className)}\n        {...other}\n      />\n    </TableContext.Provider>\n  );\n});\n\nTable.propTypes = {\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   */\n  padding: PropTypes.oneOf(['default', 'checkbox', 'none']),\n  /**\n   * Allows TableCells to inherit size of the Table.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE 11.\n   */\n  stickyHeader: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiTable' })(Table);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTableElement",
      "filename": "/packages/material-ui/src/Table/Table.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableBody": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally `TableRow`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'tbody'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableBody",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTableBody",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTableBody-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-row-group',\n  },\n};\n\nconst tablelvl2 = {\n  variant: 'body',\n};\n\nconst TableBody = React.forwardRef(function TableBody(props, ref) {\n  const { classes, className, component: Component = 'tbody', ...other } = props;\n\n  return (\n    <Tablelvl2Context.Provider value={tablelvl2}>\n      <Component className={clsx(classes.root, className)} ref={ref} {...other} />\n    </Tablelvl2Context.Provider>\n  );\n});\n\nTableBody.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n};\n\nexport default withStyles(styles, { name: 'MuiTableBody' })(TableBody);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTableSectionElement",
      "filename": "/packages/material-ui/src/TableBody/TableBody.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableCell": {
      "description": "The component renders a `<th>` element when the parent context is a header\nor otherwise a `<td>` element.",
      "methods": [],
      "props": {
        "align": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'justify'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set the text-align on the table cell content.\n\nMonetary or generally number fields **should be right aligned** as that allows\nyou to add them up quickly in your head without having to worry about decimals.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The table cell contents.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "tags": []
        },
        "padding": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'checkbox'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Sets the padding applied to the cell.\nBy default, the Table parent component set the value (`default`).",
          "tags": []
        },
        "scope": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Set scope attribute.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Specify the size of the cell.\nBy default, the Table parent component set the value (`medium`).",
          "tags": []
        },
        "sortDirection": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'asc'",
                "computed": false
              },
              {
                "value": "'desc'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set aria-sort direction.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'head'",
                "computed": false
              },
              {
                "value": "'body'",
                "computed": false
              },
              {
                "value": "'footer'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Specify the cell type.\nBy default, the TableHead, TableBody or TableFooter parent component set the value.",
          "tags": []
        }
      },
      "name": "TableCell",
      "styles": {
        "classes": [
          "root",
          "head",
          "body",
          "footer",
          "sizeSmall",
          "paddingCheckbox",
          "paddingNone",
          "alignLeft",
          "alignCenter",
          "alignRight",
          "alignJustify",
          "stickyHeader"
        ],
        "name": "MuiTableCell",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "head": "Styles applied to the root element if `variant=\"head\"` or `context.table.head`.",
          "body": "Styles applied to the root element if `variant=\"body\"` or `context.table.body`.",
          "footer": "Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "paddingCheckbox": "Styles applied to the root element if `padding=\"checkbox\"`.",
          "paddingNone": "Styles applied to the root element if `padding=\"none\"`.",
          "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
          "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
          "alignRight": "Styles applied to the root element if `align=\"right\"`.",
          "alignJustify": "Styles applied to the root element if `align=\"justify\"`.",
          "stickyHeader": "Styles applied to the root element if `context.table.stickyHeader={true}`."
        },
        "globalClasses": {
          "root": "MuiTableCell-root",
          "head": "MuiTableCell-head",
          "body": "MuiTableCell-body",
          "footer": "MuiTableCell-footer",
          "sizeSmall": "MuiTableCell-sizeSmall",
          "paddingCheckbox": "MuiTableCell-paddingCheckbox",
          "paddingNone": "MuiTableCell-paddingNone",
          "alignLeft": "MuiTableCell-alignLeft",
          "alignCenter": "MuiTableCell-alignCenter",
          "alignRight": "MuiTableCell-alignRight",
          "alignJustify": "MuiTableCell-alignJustify",
          "stickyHeader": "MuiTableCell-stickyHeader"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport { darken, fade, lighten } from '../styles/colorManipulator';\nimport TableContext from '../Table/TableContext';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    ...theme.typography.body2,\n    display: 'table-cell',\n    verticalAlign: 'inherit',\n    // Workaround for a rendering bug with spanned columns in Chrome 62.0.\n    // Removes the alpha (sets it to 1), and lightens or darkens the theme color.\n    borderBottom: `1px solid\n    ${\n      theme.palette.type === 'light'\n        ? lighten(fade(theme.palette.divider, 1), 0.88)\n        : darken(fade(theme.palette.divider, 1), 0.68)\n    }`,\n    textAlign: 'left',\n    padding: 16,\n  },\n  /* Styles applied to the root element if `variant=\"head\"` or `context.table.head`. */\n  head: {\n    color: theme.palette.text.primary,\n    lineHeight: theme.typography.pxToRem(24),\n    fontWeight: theme.typography.fontWeightMedium,\n  },\n  /* Styles applied to the root element if `variant=\"body\"` or `context.table.body`. */\n  body: {\n    color: theme.palette.text.primary,\n  },\n  /* Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`. */\n  footer: {\n    color: theme.palette.text.secondary,\n    lineHeight: theme.typography.pxToRem(21),\n    fontSize: theme.typography.pxToRem(12),\n  },\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    padding: '6px 24px 6px 16px',\n    '&:last-child': {\n      paddingRight: 16,\n    },\n    '&$paddingCheckbox': {\n      width: 24, // prevent the checkbox column from growing\n      padding: '0px 12px 0 16px',\n      '&:last-child': {\n        paddingLeft: 12,\n        paddingRight: 16,\n      },\n      '& > *': {\n        padding: 0,\n      },\n    },\n  },\n  /* Styles applied to the root element if `padding=\"checkbox\"`. */\n  paddingCheckbox: {\n    width: 48, // prevent the checkbox column from growing\n    padding: '0 0 0 4px',\n    '&:last-child': {\n      paddingLeft: 0,\n      paddingRight: 4,\n    },\n  },\n  /* Styles applied to the root element if `padding=\"none\"`. */\n  paddingNone: {\n    padding: 0,\n    '&:last-child': {\n      padding: 0,\n    },\n  },\n  /* Styles applied to the root element if `align=\"left\"`. */\n  alignLeft: {\n    textAlign: 'left',\n  },\n  /* Styles applied to the root element if `align=\"center\"`. */\n  alignCenter: {\n    textAlign: 'center',\n  },\n  /* Styles applied to the root element if `align=\"right\"`. */\n  alignRight: {\n    textAlign: 'right',\n    flexDirection: 'row-reverse',\n  },\n  /* Styles applied to the root element if `align=\"justify\"`. */\n  alignJustify: {\n    textAlign: 'justify',\n  },\n  /* Styles applied to the root element if `context.table.stickyHeader={true}`. */\n  stickyHeader: {\n    position: 'sticky',\n    top: 0,\n    left: 0,\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default,\n  },\n});\n\n/**\n * The component renders a `<th>` element when the parent context is a header\n * or otherwise a `<td>` element.\n */\nconst TableCell = React.forwardRef(function TableCell(props, ref) {\n  const {\n    align = 'inherit',\n    classes,\n    className,\n    component,\n    padding: paddingProp,\n    scope: scopeProp,\n    size: sizeProp,\n    sortDirection,\n    variant: variantProp,\n    ...other\n  } = props;\n\n  const table = React.useContext(TableContext);\n  const tablelvl2 = React.useContext(Tablelvl2Context);\n\n  let Component;\n  if (component) {\n    Component = component;\n  } else {\n    Component = tablelvl2 && tablelvl2.variant === 'head' ? 'th' : 'td';\n  }\n\n  let scope = scopeProp;\n  if (!scope && tablelvl2 && tablelvl2.variant === 'head') {\n    scope = 'col';\n  }\n  const padding = paddingProp || (table && table.padding ? table.padding : 'default');\n  const size = sizeProp || (table && table.size ? table.size : 'medium');\n  const variant = variantProp || (tablelvl2 && tablelvl2.variant);\n\n  let ariaSort = null;\n  if (sortDirection) {\n    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n\n  return (\n    <Component\n      ref={ref}\n      className={clsx(\n        classes.root,\n        {\n          [classes.head]: variant === 'head',\n          [classes.stickyHeader]: variant === 'head' && table && table.stickyHeader,\n          [classes.body]: variant === 'body',\n          [classes.footer]: variant === 'footer',\n          [classes[`align${capitalize(align)}`]]: align !== 'inherit',\n          [classes[`padding${capitalize(padding)}`]]: padding !== 'default',\n          [classes[`size${capitalize(size)}`]]: size !== 'medium',\n        },\n        className,\n      )}\n      aria-sort={ariaSort}\n      scope={scope}\n      {...other}\n    />\n  );\n});\n\nTableCell.propTypes = {\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n  /**\n   * The table cell contents.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Sets the padding applied to the cell.\n   * By default, the Table parent component set the value (`default`).\n   */\n  padding: PropTypes.oneOf(['default', 'checkbox', 'none']),\n  /**\n   * Set scope attribute.\n   */\n  scope: PropTypes.string,\n  /**\n   * Specify the size of the cell.\n   * By default, the Table parent component set the value (`medium`).\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection: PropTypes.oneOf(['asc', 'desc', false]),\n  /**\n   * Specify the cell type.\n   * By default, the TableHead, TableBody or TableFooter parent component set the value.\n   */\n  variant: PropTypes.oneOf(['head', 'body', 'footer']),\n};\n\nexport default withStyles(styles, { name: 'MuiTableCell' })(TableCell);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTableCellElement",
      "filename": "/packages/material-ui/src/TableCell/TableCell.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableFooter": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally `TableRow`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'tfoot'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableFooter",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTableFooter",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTableFooter-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-footer-group',\n  },\n};\n\nconst tablelvl2 = {\n  variant: 'footer',\n};\n\nconst TableFooter = React.forwardRef(function TableFooter(props, ref) {\n  const { classes, className, component: Component = 'tfoot', ...other } = props;\n\n  return (\n    <Tablelvl2Context.Provider value={tablelvl2}>\n      <Component className={clsx(classes.root, className)} ref={ref} {...other} />\n    </Tablelvl2Context.Provider>\n  );\n});\n\nTableFooter.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n};\n\nexport default withStyles(styles, { name: 'MuiTableFooter' })(TableFooter);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTableSectionElement",
      "filename": "/packages/material-ui/src/TableFooter/TableFooter.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableHead": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component, normally `TableRow`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'thead'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableHead",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTableHead",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTableHead-root"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group',\n  },\n};\n\nconst tablelvl2 = {\n  variant: 'head',\n};\n\nconst TableHead = React.forwardRef(function TableHead(props, ref) {\n  const { classes, className, component: Component = 'thead', ...other } = props;\n\n  return (\n    <Tablelvl2Context.Provider value={tablelvl2}>\n      <Component className={clsx(classes.root, className)} ref={ref} {...other} />\n    </Tablelvl2Context.Provider>\n  );\n});\n\nTableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n};\n\nexport default withStyles(styles, { name: 'MuiTableHead' })(TableHead);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTableSectionElement",
      "filename": "/packages/material-ui/src/TableHead/TableHead.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TablePagination": {
      "description": "A `TableCell` based component for placing inside `TableFooter` for pagination.",
      "methods": [],
      "props": {
        "ActionsComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for displaying the actions.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "TablePaginationActions",
            "computed": true
          },
          "tags": []
        },
        "backIconButtonProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the back arrow [`IconButton`](/api/icon-button/) component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "TableCell",
            "computed": true
          },
          "tags": []
        },
        "count": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The total number of rows.",
          "tags": []
        },
        "labelDisplayedRows": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Customize the displayed rows label.",
          "defaultValue": {
            "value": "({ from, to, count }) =>\n`${from}-${to === -1 ? count : to} of ${count}`",
            "computed": false
          },
          "tags": []
        },
        "labelRowsPerPage": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Customize the rows per page label. Invoked with a `{ from, to, count, page }`\nobject.",
          "defaultValue": {
            "value": "'Rows per page:'",
            "computed": false
          },
          "tags": []
        },
        "nextIconButtonProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the next arrow [`IconButton`](/api/icon-button/) element.",
          "tags": []
        },
        "onChangePage": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when the page is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The page selected.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "page"
            }
          ]
        },
        "onChangeRowsPerPage": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the number of rows per page is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "page": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.number.isRequired, props => {\n  const { count, page, rowsPerPage } = props;\n  const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n  if (page < 0 || page > newLastPage) {\n    return new Error(\n      'Material-UI: the page prop of a TablePagination is out of range ' +\n        `(0 to ${newLastPage}, but page is ${page}).`,\n    );\n  }\n  return null;\n})"
          },
          "required": false,
          "description": "The zero-based index of the current page.",
          "tags": []
        },
        "rowsPerPage": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The number of rows per page.",
          "tags": []
        },
        "rowsPerPageOptions": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "Customizes the options of the rows per page select field. If less than two options are\navailable, no select field will be displayed.",
          "defaultValue": {
            "value": "[10, 25, 50, 100]",
            "computed": false
          },
          "tags": []
        },
        "SelectProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the rows per page [`Select`](/api/select/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TablePagination",
      "styles": {
        "classes": [
          "root",
          "toolbar",
          "spacer",
          "caption",
          "selectRoot",
          "select",
          "selectIcon",
          "input",
          "menuItem",
          "actions"
        ],
        "name": "MuiTablePagination",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "toolbar": "Styles applied to the Toolbar component.",
          "spacer": "Styles applied to the spacer element.",
          "caption": "Styles applied to the caption Typography components if `variant=\"caption\"`.",
          "selectRoot": "Styles applied to the Select component root element.",
          "select": "Styles applied to the Select component `select` class.",
          "selectIcon": "Styles applied to the Select component `icon` class.",
          "input": "Styles applied to the `InputBase` component.",
          "menuItem": "Styles applied to the MenuItem component.",
          "actions": "Styles applied to the internal `TablePaginationActions` component."
        },
        "globalClasses": {
          "root": "MuiTablePagination-root",
          "toolbar": "MuiTablePagination-toolbar",
          "spacer": "MuiTablePagination-spacer",
          "caption": "MuiTablePagination-caption",
          "selectRoot": "MuiTablePagination-selectRoot",
          "select": "MuiTablePagination-select",
          "selectIcon": "MuiTablePagination-selectIcon",
          "input": "MuiTablePagination-input",
          "menuItem": "MuiTablePagination-menuItem",
          "actions": "MuiTablePagination-actions"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@material-ui/utils';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport InputBase from '../InputBase';\nimport MenuItem from '../MenuItem';\nimport Select from '../Select';\nimport TableCell from '../TableCell';\nimport Toolbar from '../Toolbar';\nimport Typography from '../Typography';\nimport TablePaginationActions from './TablePaginationActions';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.pxToRem(14),\n    // Increase the specificity to override TableCell.\n    '&:last-child': {\n      padding: 0,\n    },\n  },\n  /* Styles applied to the Toolbar component. */\n  toolbar: {\n    minHeight: 52,\n    paddingRight: 2,\n  },\n  /* Styles applied to the spacer element. */\n  spacer: {\n    flex: '1 1 100%',\n  },\n  /* Styles applied to the caption Typography components if `variant=\"caption\"`. */\n  caption: {\n    flexShrink: 0,\n  },\n  /* Styles applied to the Select component root element. */\n  selectRoot: {\n    // `.selectRoot` should be merged with `.input` in v5.\n    marginRight: 32,\n    marginLeft: 8,\n  },\n  /* Styles applied to the Select component `select` class. */\n  select: {\n    paddingLeft: 8,\n    paddingRight: 24,\n    textAlign: 'right',\n    textAlignLast: 'right', // Align <select> on Chrome.\n  },\n  /* Styles applied to the Select component `icon` class. */\n  selectIcon: {\n    top: 1,\n  },\n  /* Styles applied to the `InputBase` component. */\n  input: {\n    color: 'inherit',\n    fontSize: 'inherit',\n    flexShrink: 0,\n  },\n  /* Styles applied to the MenuItem component. */\n  menuItem: {},\n  /* Styles applied to the internal `TablePaginationActions` component. */\n  actions: {\n    flexShrink: 0,\n    marginLeft: 20,\n  },\n});\n\nconst defaultLabelDisplayedRows = ({ from, to, count }) =>\n  `${from}-${to === -1 ? count : to} of ${count}`;\nconst defaultRowsPerPageOptions = [10, 25, 50, 100];\n\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n */\nconst TablePagination = React.forwardRef(function TablePagination(props, ref) {\n  const {\n    ActionsComponent = TablePaginationActions,\n    backIconButtonProps,\n    classes,\n    className,\n    colSpan: colSpanProp,\n    component: Component = TableCell,\n    count,\n    labelDisplayedRows = defaultLabelDisplayedRows,\n    labelRowsPerPage = 'Rows per page:',\n    nextIconButtonProps,\n    onChangePage,\n    onChangeRowsPerPage,\n    page,\n    rowsPerPage,\n    rowsPerPageOptions = defaultRowsPerPageOptions,\n    SelectProps = {},\n    ...other\n  } = props;\n\n  let colSpan;\n\n  if (Component === TableCell || Component === 'td') {\n    colSpan = colSpanProp || 1000; // col-span over everything\n  }\n\n  const MenuItemComponent = SelectProps.native ? 'option' : MenuItem;\n\n  return (\n    <Component className={clsx(classes.root, className)} colSpan={colSpan} ref={ref} {...other}>\n      <Toolbar className={classes.toolbar}>\n        <div className={classes.spacer} />\n        {rowsPerPageOptions.length > 1 && (\n          <Typography color=\"inherit\" variant=\"body2\" className={classes.caption}>\n            {labelRowsPerPage}\n          </Typography>\n        )}\n        {rowsPerPageOptions.length > 1 && (\n          <Select\n            classes={{\n              select: classes.select,\n              icon: classes.selectIcon,\n            }}\n            input={<InputBase className={clsx(classes.input, classes.selectRoot)} />}\n            value={rowsPerPage}\n            onChange={onChangeRowsPerPage}\n            {...SelectProps}\n          >\n            {rowsPerPageOptions.map(rowsPerPageOption => (\n              <MenuItemComponent\n                className={classes.menuItem}\n                key={rowsPerPageOption}\n                value={rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption}\n              >\n                {rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption}\n              </MenuItemComponent>\n            ))}\n          </Select>\n        )}\n        <Typography color=\"inherit\" variant=\"body2\" className={classes.caption}>\n          {labelDisplayedRows({\n            from: count === 0 ? 0 : page * rowsPerPage + 1,\n            to: Math.min(count, (page + 1) * rowsPerPage),\n            count,\n            page,\n          })}\n        </Typography>\n        <ActionsComponent\n          className={classes.actions}\n          backIconButtonProps={backIconButtonProps}\n          count={count}\n          nextIconButtonProps={nextIconButtonProps}\n          onChangePage={onChangePage}\n          page={page}\n          rowsPerPage={rowsPerPage}\n        />\n      </Toolbar>\n    </Component>\n  );\n});\n\nTablePagination.propTypes = {\n  /**\n   * The component used for displaying the actions.\n   * Either a string to use a DOM element or a component.\n   */\n  ActionsComponent: PropTypes.elementType,\n  /**\n   * Props applied to the back arrow [`IconButton`](/api/icon-button/) component.\n   */\n  backIconButtonProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  colSpan: PropTypes.number,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The total number of rows.\n   */\n  count: PropTypes.number.isRequired,\n  /**\n   * Customize the displayed rows label.\n   */\n  labelDisplayedRows: PropTypes.func,\n  /**\n   * Customize the rows per page label. Invoked with a `{ from, to, count, page }`\n   * object.\n   */\n  labelRowsPerPage: PropTypes.node,\n  /**\n   * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onChangePage: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onChangeRowsPerPage: PropTypes.func,\n  /**\n   * The zero-based index of the current page.\n   */\n  page: chainPropTypes(PropTypes.number.isRequired, props => {\n    const { count, page, rowsPerPage } = props;\n    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n    if (page < 0 || page > newLastPage) {\n      return new Error(\n        'Material-UI: the page prop of a TablePagination is out of range ' +\n          `(0 to ${newLastPage}, but page is ${page}).`,\n      );\n    }\n    return null;\n  }),\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   */\n  rowsPerPageOptions: PropTypes.array,\n  /**\n   * Props applied to the rows per page [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiTablePagination' })(TablePagination);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTableCellElement",
      "filename": "/packages/material-ui/src/TablePagination/TablePagination.js",
      "inheritance": {
        "component": "TableCell",
        "pathname": "/api/table-cell"
      },
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableRow": {
      "description": "Will automatically set dynamic row height\nbased on the material table element parent (head, body, etc).",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Should be valid <tr> children such as `TableCell`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'tr'",
            "computed": false
          },
          "tags": []
        },
        "hover": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the table row will shade on hover.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the table row will have the selected shading.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TableRow",
      "styles": {
        "classes": [
          "root",
          "selected",
          "hover",
          "head",
          "footer"
        ],
        "name": "MuiTableRow",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "selected": "Pseudo-class applied to the root element if `selected={true}`.",
          "hover": "Pseudo-class applied to the root element if `hover={true}`.",
          "head": "Styles applied to the root element if table variant=\"head\".",
          "footer": "Styles applied to the root element if table variant=\"footer\"."
        },
        "globalClasses": {
          "root": "MuiTableRow-root",
          "selected": "Mui-selected",
          "hover": "MuiTableRow-hover",
          "head": "MuiTableRow-head",
          "footer": "MuiTableRow-footer"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: 'inherit',\n    display: 'table-row',\n    verticalAlign: 'middle',\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    '&$selected': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? 'rgba(0, 0, 0, 0.04)' // grey[100]\n          : 'rgba(255, 255, 255, 0.08)',\n    },\n    '&$hover:hover': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? 'rgba(0, 0, 0, 0.07)' // grey[200]\n          : 'rgba(255, 255, 255, 0.14)',\n    },\n  },\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {},\n  /* Pseudo-class applied to the root element if `hover={true}`. */\n  hover: {},\n  /* Styles applied to the root element if table variant=\"head\". */\n  head: {},\n  /* Styles applied to the root element if table variant=\"footer\". */\n  footer: {},\n});\n\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n */\nconst TableRow = React.forwardRef(function TableRow(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'tr',\n    hover = false,\n    selected = false,\n    ...other\n  } = props;\n  const tablelvl2 = React.useContext(Tablelvl2Context);\n\n  return (\n    <Component\n      ref={ref}\n      className={clsx(\n        classes.root,\n        {\n          [classes.head]: tablelvl2 && tablelvl2.variant === 'head',\n          [classes.footer]: tablelvl2 && tablelvl2.variant === 'footer',\n          [classes.hover]: hover,\n          [classes.selected]: selected,\n        },\n        className,\n      )}\n      {...other}\n    />\n  );\n});\n\nTableRow.propTypes = {\n  /**\n   * Should be valid <tr> children such as `TableCell`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the table row will shade on hover.\n   */\n  hover: PropTypes.bool,\n  /**\n   * If `true`, the table row will have the selected shading.\n   */\n  selected: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: 'MuiTableRow' })(TableRow);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTableRowElement",
      "filename": "/packages/material-ui/src/TableRow/TableRow.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TableSortLabel": {
      "description": "A button based label for placing inside `TableCell` for column sorting.",
      "methods": [],
      "props": {
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will have the active styling (should be true for the sorted column).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Label contents, the arrow will be appended automatically.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'asc'",
                "computed": false
              },
              {
                "value": "'desc'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The current sort direction.",
          "defaultValue": {
            "value": "'desc'",
            "computed": false
          },
          "tags": []
        },
        "hideSortIcon": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Hide sort icon when active is false.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "IconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "Sort icon to use.",
          "defaultValue": {
            "value": "ArrowDownwardIcon",
            "computed": true
          },
          "tags": []
        }
      },
      "name": "TableSortLabel",
      "styles": {
        "classes": [
          "root",
          "active",
          "icon",
          "iconDirectionDesc",
          "iconDirectionAsc"
        ],
        "name": "MuiTableSortLabel",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "active": "Pseudo-class applied to the root element if `active={true}`.",
          "icon": "Styles applied to the icon component.",
          "iconDirectionDesc": "Styles applied to the icon component if `direction=\"desc\"`.",
          "iconDirectionAsc": "Styles applied to the icon component if `direction=\"asc\"`."
        },
        "globalClasses": {
          "root": "MuiTableSortLabel-root",
          "active": "MuiTableSortLabel-active",
          "icon": "MuiTableSortLabel-icon",
          "iconDirectionDesc": "MuiTableSortLabel-iconDirectionDesc",
          "iconDirectionAsc": "MuiTableSortLabel-iconDirectionAsc"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ArrowDownwardIcon from '../internal/svg-icons/ArrowDownward';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    cursor: 'pointer',\n    display: 'inline-flex',\n    justifyContent: 'flex-start',\n    flexDirection: 'inherit',\n    alignItems: 'center',\n    '&:focus': {\n      color: theme.palette.text.secondary,\n    },\n    '&:hover': {\n      color: theme.palette.text.secondary,\n      '& $icon': {\n        opacity: 1,\n      },\n    },\n    '&$active': {\n      color: theme.palette.text.primary,\n      // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045\n      '&& $icon': {\n        opacity: 1,\n        color: theme.palette.text.secondary,\n      },\n    },\n  },\n  /* Pseudo-class applied to the root element if `active={true}`. */\n  active: {},\n  /* Styles applied to the icon component. */\n  icon: {\n    marginRight: 4,\n    marginLeft: 4,\n    opacity: 0,\n    transition: theme.transitions.create(['opacity', 'transform'], {\n      duration: theme.transitions.duration.shorter,\n    }),\n    userSelect: 'none',\n  },\n  /* Styles applied to the icon component if `direction=\"desc\"`. */\n  iconDirectionDesc: {\n    transform: 'rotate(0deg)',\n  },\n  /* Styles applied to the icon component if `direction=\"asc\"`. */\n  iconDirectionAsc: {\n    transform: 'rotate(180deg)',\n  },\n});\n\n/**\n * A button based label for placing inside `TableCell` for column sorting.\n */\nconst TableSortLabel = React.forwardRef(function TableSortLabel(props, ref) {\n  const {\n    active = false,\n    children,\n    classes,\n    className,\n    direction = 'desc',\n    hideSortIcon = false,\n    IconComponent = ArrowDownwardIcon,\n    ...other\n  } = props;\n\n  return (\n    <ButtonBase\n      className={clsx(classes.root, { [classes.active]: active }, className)}\n      component=\"span\"\n      disableRipple\n      ref={ref}\n      {...other}\n    >\n      {children}\n      {hideSortIcon && !active ? null : (\n        <IconComponent\n          className={clsx(classes.icon, classes[`iconDirection${capitalize(direction)}`])}\n        />\n      )}\n    </ButtonBase>\n  );\n});\n\nTableSortLabel.propTypes = {\n  /**\n   * If `true`, the label will have the active styling (should be true for the sorted column).\n   */\n  active: PropTypes.bool,\n  /**\n   * Label contents, the arrow will be appended automatically.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The current sort direction.\n   */\n  direction: PropTypes.oneOf(['asc', 'desc']),\n  /**\n   * Hide sort icon when active is false.\n   */\n  hideSortIcon: PropTypes.bool,\n  /**\n   * Sort icon to use.\n   */\n  IconComponent: PropTypes.elementType,\n};\n\nexport default withStyles(styles, { name: 'MuiTableSortLabel' })(TableSortLabel);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/TableSortLabel/TableSortLabel.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/tables"
      ]
    },
    "TextareaAutosize": {
      "description": "",
      "methods": [],
      "props": {
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Minimum number of rows to display.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display.",
          "tags": []
        }
      },
      "name": "TextareaAutosize",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nconst styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)',\n  },\n};\n\nconst TextareaAutosize = React.forwardRef(function TextareaAutosize(props, ref) {\n  const { onChange, rows, rowsMax, style, value, ...other } = props;\n\n  const { current: isControlled } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const [state, setState] = React.useState({});\n\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const computedStyle = window.getComputedStyle(input);\n\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding =\n      getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border =\n      getStyleValue(computedStyle, 'border-bottom-width') +\n      getStyleValue(computedStyle, 'border-top-width');\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight - padding;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight - padding;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n\n    if (rows != null) {\n      outerHeight = Math.max(Number(rows) * singleRowHeight, outerHeight);\n    }\n    if (rowsMax != null) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n\n    setState(prevState => {\n      // Need a large enough different to update the height.\n      // This prevents infinite rendering loop.\n      if (\n        (outerHeightStyle > 0 &&\n          Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1) ||\n        prevState.overflow !== overflow\n      ) {\n        return {\n          overflow,\n          outerHeightStyle,\n        };\n      }\n\n      return prevState;\n    });\n  }, [rows, rowsMax, props.placeholder]);\n\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      syncHeight();\n    });\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n\n  const handleChange = event => {\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <textarea\n        value={value}\n        onChange={handleChange}\n        ref={handleRef}\n        // Apply the rows prop to get a \"correct\" first SSR paint\n        rows={rows || 1}\n        style={{\n          height: state.outerHeightStyle,\n          // Need a large enough different to allow scrolling.\n          // This prevents infinite rendering loop.\n          overflow: state.overflow ? 'hidden' : null,\n          ...style,\n        }}\n        {...other}\n      />\n      <textarea\n        aria-hidden\n        className={props.className}\n        readOnly\n        ref={shadowRef}\n        tabIndex={-1}\n        style={{ ...styles.shadow, ...style }}\n      />\n    </React.Fragment>\n  );\n});\n\nTextareaAutosize.propTypes = {\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Minimum number of rows to display.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.any,\n};\n\nexport default TextareaAutosize;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLTextAreaElement",
      "filename": "/packages/material-ui/src/TextareaAutosize/TextareaAutosize.js",
      "inheritance": null,
      "usedInPages": [
        "/components/textarea-autosize"
      ]
    },
    "TextField": {
      "description": "The `TextField` is a convenience wrapper for the most common cases (80%).\nIt cannot be all things to all people, otherwise the API would grow out of control.\n\n## Advanced Configuration\n\nIt's important to understand that the text field is a simple abstraction\non top of the following components:\n\n- [FormControl](/api/form-control/)\n- [InputLabel](/api/input-label/)\n- [FilledInput](/api/filled-input/)\n- [OutlinedInput](/api/outlined-input/)\n- [Input](/api/input/)\n- [FormHelperText](/api/form-helper-text/)\n\nIf you wish to alter the props applied to the `input` element, you can do so as follows:\n\n```jsx\nconst inputProps = {\n  step: 300,\n};\n\nreturn <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n```\n\nFor advanced cases, please look at the source of TextField by clicking on the\n\"Edit this page\" button above. Consider either:\n\n- using the upper case props for passing values directly to the components\n- using the underlying components directly as shown in the demos",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default value of the `input` element.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will be displayed in an error state.",
          "tags": []
        },
        "FormHelperTextProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "tags": []
        },
        "helperText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The helper text content.",
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
          "tags": []
        },
        "InputLabelProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
          "tags": []
        },
        "InputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the Input element.\nIt will be a [`FilledInput`](/api/filled-input/),\n[`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\ncomponent depending on the `variant` prop value.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The label content.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'none'",
                "computed": false
              },
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'normal'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered instead of an input.",
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "select": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "SelectProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Select`](/api/select/) element.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "TextField",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTextField",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTextField-root"
        }
      },
      "src": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\n\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput,\n};\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n};\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = React.forwardRef(function TextField(props, ref) {\n  const {\n    autoComplete,\n    autoFocus,\n    children,\n    classes,\n    className,\n    color = 'primary',\n    defaultValue,\n    error,\n    FormHelperTextProps,\n    fullWidth,\n    helperText,\n    hiddenLabel,\n    id,\n    InputLabelProps,\n    inputProps,\n    InputProps,\n    inputRef,\n    label,\n    multiline,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    required = false,\n    rows,\n    rowsMax,\n    select = false,\n    SelectProps,\n    type,\n    value,\n    variant = 'standard',\n    ...other\n  } = props;\n\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  const labelRef = React.useRef(null);\n  React.useEffect(() => {\n    if (variant === 'outlined') {\n      // #StrictMode ready\n      const labelNode = ReactDOM.findDOMNode(labelRef.current);\n      setLabelWidth(labelNode != null ? labelNode.offsetWidth : 0);\n    }\n  }, [variant, required, label]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error(\n        'Material-UI: `children` must be passed when using the `TextField` component with `select`.',\n      );\n    }\n  }\n\n  const InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    InputMore.labelWidth = labelWidth;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const InputElement = (\n    <InputComponent\n      aria-describedby={helperTextId}\n      autoComplete={autoComplete}\n      autoFocus={autoFocus}\n      defaultValue={defaultValue}\n      fullWidth={fullWidth}\n      multiline={multiline}\n      name={name}\n      rows={rows}\n      rowsMax={rowsMax}\n      type={type}\n      value={value}\n      id={id}\n      inputRef={inputRef}\n      onBlur={onBlur}\n      onChange={onChange}\n      onFocus={onFocus}\n      placeholder={placeholder}\n      inputProps={inputProps}\n      {...InputMore}\n      {...InputProps}\n    />\n  );\n\n  return (\n    <FormControl\n      className={clsx(classes.root, className)}\n      error={error}\n      fullWidth={fullWidth}\n      hiddenLabel={hiddenLabel}\n      ref={ref}\n      required={required}\n      color={color}\n      variant={variant}\n      {...other}\n    >\n      {label && (\n        <InputLabel htmlFor={id} ref={labelRef} id={inputLabelId} {...InputLabelProps}>\n          {label}\n        </InputLabel>\n      )}\n      {select ? (\n        <Select\n          aria-describedby={helperTextId}\n          id={id}\n          labelId={inputLabelId}\n          value={value}\n          input={InputElement}\n          {...SelectProps}\n        >\n          {children}\n        </Select>\n      ) : (\n        InputElement\n      )}\n      {helperText && (\n        <FormHelperText id={helperTextId} {...FormHelperTextProps}>\n          {helperText}\n        </FormHelperText>\n      )}\n    </FormControl>\n  );\n});\n\nTextField.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n\nexport default withStyles(styles, { name: 'MuiTextField' })(TextField);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/TextField/TextField.js",
      "inheritance": {
        "component": "FormControl",
        "pathname": "/api/form-control"
      },
      "usedInPages": [
        "/components/autocomplete",
        "/components/integrated-autocomplete",
        "/components/pickers",
        "/components/text-fields"
      ]
    },
    "Toolbar": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disableGutters": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, disables gutter padding.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'regular'",
                "computed": false
              },
              {
                "value": "'dense'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'regular'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Toolbar",
      "styles": {
        "classes": [
          "root",
          "gutters",
          "regular",
          "dense"
        ],
        "name": "MuiToolbar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "gutters": "Styles applied to the root element if `disableGutters={false}`.",
          "regular": "Styles applied to the root element if `variant=\"regular\"`.",
          "dense": "Styles applied to the root element if `variant=\"dense\"`."
        },
        "globalClasses": {
          "root": "MuiToolbar-root",
          "gutters": "MuiToolbar-gutters",
          "regular": "MuiToolbar-regular",
          "dense": "MuiToolbar-dense"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  /* Styles applied to the root element if `disableGutters={false}`. */\n  gutters: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n    },\n  },\n  /* Styles applied to the root element if `variant=\"regular\"`. */\n  regular: theme.mixins.toolbar,\n  /* Styles applied to the root element if `variant=\"dense\"`. */\n  dense: {\n    minHeight: 48,\n  },\n});\n\nconst Toolbar = React.forwardRef(function Toolbar(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    disableGutters = false,\n    variant = 'regular',\n    ...other\n  } = props;\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        classes[variant],\n        {\n          [classes.gutters]: !disableGutters,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nToolbar.propTypes = {\n  /**\n   * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, disables gutter padding.\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['regular', 'dense']),\n};\n\nexport default withStyles(styles, { name: 'MuiToolbar' })(Toolbar);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Toolbar/Toolbar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/app-bar"
      ]
    },
    "Typography": {
      "description": "",
      "methods": [],
      "props": {
        "align": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'justify'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Set the text-align on the component.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'initial'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'textPrimary'",
                "computed": false
              },
              {
                "value": "'textSecondary'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'initial'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it maps the variant to a good default headline component.",
          "tags": []
        },
        "display": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'initial'",
                "computed": false
              },
              {
                "value": "'block'",
                "computed": false
              },
              {
                "value": "'inline'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Controls the display type",
          "defaultValue": {
            "value": "'initial'",
            "computed": false
          },
          "tags": []
        },
        "gutterBottom": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the text will have a bottom margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "noWrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n\nNote that text overflow can only happen with block or inline-block level elements\n(the element needs to have a width in order to overflow).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "paragraph": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the text will have a bottom margin.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'h1'",
                "computed": false
              },
              {
                "value": "'h2'",
                "computed": false
              },
              {
                "value": "'h3'",
                "computed": false
              },
              {
                "value": "'h4'",
                "computed": false
              },
              {
                "value": "'h5'",
                "computed": false
              },
              {
                "value": "'h6'",
                "computed": false
              },
              {
                "value": "'subtitle1'",
                "computed": false
              },
              {
                "value": "'subtitle2'",
                "computed": false
              },
              {
                "value": "'body1'",
                "computed": false
              },
              {
                "value": "'body2'",
                "computed": false
              },
              {
                "value": "'caption'",
                "computed": false
              },
              {
                "value": "'button'",
                "computed": false
              },
              {
                "value": "'overline'",
                "computed": false
              },
              {
                "value": "'srOnly'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Applies the theme typography styles.",
          "defaultValue": {
            "value": "'body1'",
            "computed": false
          },
          "tags": []
        },
        "variantMapping": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "We are empirically mapping the variant prop to a range of different DOM element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` prop.",
          "defaultValue": {
            "value": "{\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Typography",
      "styles": {
        "classes": [
          "root",
          "body2",
          "body1",
          "caption",
          "button",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6",
          "subtitle1",
          "subtitle2",
          "overline",
          "srOnly",
          "alignLeft",
          "alignCenter",
          "alignRight",
          "alignJustify",
          "noWrap",
          "gutterBottom",
          "paragraph",
          "colorInherit",
          "colorPrimary",
          "colorSecondary",
          "colorTextPrimary",
          "colorTextSecondary",
          "colorError",
          "displayInline",
          "displayBlock"
        ],
        "name": "MuiTypography",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "body2": "Styles applied to the root element if `variant=\"body2\"`.",
          "body1": "Styles applied to the root element if `variant=\"body1\"`.",
          "caption": "Styles applied to the root element if `variant=\"caption\"`.",
          "button": "Styles applied to the root element if `variant=\"button\"`.",
          "h1": "Styles applied to the root element if `variant=\"h1\"`.",
          "h2": "Styles applied to the root element if `variant=\"h2\"`.",
          "h3": "Styles applied to the root element if `variant=\"h3\"`.",
          "h4": "Styles applied to the root element if `variant=\"h4\"`.",
          "h5": "Styles applied to the root element if `variant=\"h5\"`.",
          "h6": "Styles applied to the root element if `variant=\"h6\"`.",
          "subtitle1": "Styles applied to the root element if `variant=\"subtitle1\"`.",
          "subtitle2": "Styles applied to the root element if `variant=\"subtitle2\"`.",
          "overline": "Styles applied to the root element if `variant=\"overline\"`.",
          "srOnly": "Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers.",
          "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
          "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
          "alignRight": "Styles applied to the root element if `align=\"right\"`.",
          "alignJustify": "Styles applied to the root element if `align=\"justify\"`.",
          "noWrap": "Styles applied to the root element if `nowrap={true}`.",
          "gutterBottom": "Styles applied to the root element if `gutterBottom={true}`.",
          "paragraph": "Styles applied to the root element if `paragraph={true}`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "colorTextPrimary": "Styles applied to the root element if `color=\"textPrimary\"`.",
          "colorTextSecondary": "Styles applied to the root element if `color=\"textSecondary\"`.",
          "colorError": "Styles applied to the root element if `color=\"error\"`.",
          "displayInline": "Styles applied to the root element if `display=\"inline\"`.",
          "displayBlock": "Styles applied to the root element if `display=\"block\"`."
        },
        "globalClasses": {
          "root": "MuiTypography-root",
          "body2": "MuiTypography-body2",
          "body1": "MuiTypography-body1",
          "caption": "MuiTypography-caption",
          "button": "MuiTypography-button",
          "h1": "MuiTypography-h1",
          "h2": "MuiTypography-h2",
          "h3": "MuiTypography-h3",
          "h4": "MuiTypography-h4",
          "h5": "MuiTypography-h5",
          "h6": "MuiTypography-h6",
          "subtitle1": "MuiTypography-subtitle1",
          "subtitle2": "MuiTypography-subtitle2",
          "overline": "MuiTypography-overline",
          "srOnly": "MuiTypography-srOnly",
          "alignLeft": "MuiTypography-alignLeft",
          "alignCenter": "MuiTypography-alignCenter",
          "alignRight": "MuiTypography-alignRight",
          "alignJustify": "MuiTypography-alignJustify",
          "noWrap": "MuiTypography-noWrap",
          "gutterBottom": "MuiTypography-gutterBottom",
          "paragraph": "MuiTypography-paragraph",
          "colorInherit": "MuiTypography-colorInherit",
          "colorPrimary": "MuiTypography-colorPrimary",
          "colorSecondary": "MuiTypography-colorSecondary",
          "colorTextPrimary": "MuiTypography-colorTextPrimary",
          "colorTextSecondary": "MuiTypography-colorTextSecondary",
          "colorError": "MuiTypography-colorError",
          "displayInline": "MuiTypography-displayInline",
          "displayBlock": "MuiTypography-displayBlock"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n  },\n  /* Styles applied to the root element if `variant=\"body2\"`. */\n  body2: theme.typography.body2,\n  /* Styles applied to the root element if `variant=\"body1\"`. */\n  body1: theme.typography.body1,\n  /* Styles applied to the root element if `variant=\"caption\"`. */\n  caption: theme.typography.caption,\n  /* Styles applied to the root element if `variant=\"button\"`. */\n  button: theme.typography.button,\n  /* Styles applied to the root element if `variant=\"h1\"`. */\n  h1: theme.typography.h1,\n  /* Styles applied to the root element if `variant=\"h2\"`. */\n  h2: theme.typography.h2,\n  /* Styles applied to the root element if `variant=\"h3\"`. */\n  h3: theme.typography.h3,\n  /* Styles applied to the root element if `variant=\"h4\"`. */\n  h4: theme.typography.h4,\n  /* Styles applied to the root element if `variant=\"h5\"`. */\n  h5: theme.typography.h5,\n  /* Styles applied to the root element if `variant=\"h6\"`. */\n  h6: theme.typography.h6,\n  /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n  subtitle1: theme.typography.subtitle1,\n  /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n  subtitle2: theme.typography.subtitle2,\n  /* Styles applied to the root element if `variant=\"overline\"`. */\n  overline: theme.typography.overline,\n  /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n  srOnly: {\n    position: 'absolute',\n    height: 1,\n    width: 1,\n    overflow: 'hidden',\n  },\n  /* Styles applied to the root element if `align=\"left\"`. */\n  alignLeft: {\n    textAlign: 'left',\n  },\n  /* Styles applied to the root element if `align=\"center\"`. */\n  alignCenter: {\n    textAlign: 'center',\n  },\n  /* Styles applied to the root element if `align=\"right\"`. */\n  alignRight: {\n    textAlign: 'right',\n  },\n  /* Styles applied to the root element if `align=\"justify\"`. */\n  alignJustify: {\n    textAlign: 'justify',\n  },\n  /* Styles applied to the root element if `nowrap={true}`. */\n  noWrap: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  },\n  /* Styles applied to the root element if `gutterBottom={true}`. */\n  gutterBottom: {\n    marginBottom: '0.35em',\n  },\n  /* Styles applied to the root element if `paragraph={true}`. */\n  paragraph: {\n    marginBottom: 16,\n  },\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit',\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main,\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the root element if `color=\"textPrimary\"`. */\n  colorTextPrimary: {\n    color: theme.palette.text.primary,\n  },\n  /* Styles applied to the root element if `color=\"textSecondary\"`. */\n  colorTextSecondary: {\n    color: theme.palette.text.secondary,\n  },\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main,\n  },\n  /* Styles applied to the root element if `display=\"inline\"`. */\n  displayInline: {\n    display: 'inline',\n  },\n  /* Styles applied to the root element if `display=\"block\"`. */\n  displayBlock: {\n    display: 'block',\n  },\n});\n\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n};\n\nconst Typography = React.forwardRef(function Typography(props, ref) {\n  const {\n    align = 'inherit',\n    classes,\n    className,\n    color = 'initial',\n    component,\n    display = 'initial',\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping,\n    ...other\n  } = props;\n\n  const Component =\n    component ||\n    (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) ||\n    'span';\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes[variant]]: variant !== 'inherit',\n          [classes[`color${capitalize(color)}`]]: color !== 'initial',\n          [classes.noWrap]: noWrap,\n          [classes.gutterBottom]: gutterBottom,\n          [classes.paragraph]: paragraph,\n          [classes[`align${capitalize(align)}`]]: align !== 'inherit',\n          [classes[`display${capitalize(display)}`]]: display !== 'initial',\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nTypography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf([\n    'initial',\n    'inherit',\n    'primary',\n    'secondary',\n    'textPrimary',\n    'textSecondary',\n    'error',\n  ]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * By default, it maps the variant to a good default headline component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf([\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'subtitle1',\n    'subtitle2',\n    'body1',\n    'body2',\n    'caption',\n    'button',\n    'overline',\n    'srOnly',\n    'inherit',\n  ]),\n  /**\n   * We are empirically mapping the variant prop to a range of different DOM element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiTypography' })(Typography);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLParagraphElement",
      "filename": "/packages/material-ui/src/Typography/Typography.js",
      "inheritance": null,
      "usedInPages": [
        "/components/breadcrumbs",
        "/components/typography"
      ]
    },
    "Zoom": {
      "description": "The Zoom transition can be used for the floating variant of the\n[Button](/components/buttons/#floating-action-buttons) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will transition in.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Zoom",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nimport useForkRef from '../utils/useForkRef';\n\nconst styles = {\n  entering: {\n    transform: 'none',\n  },\n  entered: {\n    transform: 'none',\n  },\n};\n\nconst defaultTimeout = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n};\n\n/**\n * The Zoom transition can be used for the floating variant of the\n * [Button](/components/buttons/#floating-action-buttons) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\nconst Zoom = React.forwardRef(function Zoom(props, ref) {\n  const {\n    children,\n    in: inProp,\n    onEnter,\n    onExit,\n    style,\n    timeout = defaultTimeout,\n    ...other\n  } = props;\n\n  const theme = useTheme();\n  const handleRef = useForkRef(children.ref, ref);\n\n  const handleEnter = (node, isAppearing) => {\n    reflow(node); // So the animation always start from the start.\n\n    const transitionProps = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'enter',\n      },\n    );\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleExit = node => {\n    const transitionProps = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'exit',\n      },\n    );\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  return (\n    <Transition\n      appear\n      in={inProp}\n      onEnter={handleEnter}\n      onExit={handleExit}\n      timeout={timeout}\n      {...other}\n    >\n      {(state, childProps) => {\n        return React.cloneElement(children, {\n          style: {\n            transform: 'scale(0)',\n            visibility: state === 'exited' && !inProp ? 'hidden' : undefined,\n            ...styles[state],\n            ...style,\n            ...children.props.style,\n          },\n          ref: handleRef,\n          ...childProps,\n        });\n      }}\n    </Transition>\n  );\n});\n\nZoom.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.element,\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n};\n\nexport default Zoom;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Zoom/Zoom.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/buttons",
        "/components/transitions"
      ]
    },
    "Autocomplete": {
      "description": "",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the portion of the selected suggestion that has not been typed by the user,\nknown as the completion string, appears inline after the input cursor in the textbox.\nThe inline completion string is visually highlighted and has a selected state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "autoHighlight": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the first option is automatically highlighted.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "autoSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the selected option becomes the value of the input\nwhen the Autocomplete loses focus unless the user chooses\na different option or changes the character string in the input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "clearOnEscape": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, clear all values when the user presses escape and the popup is closed.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "debug": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the popup will ignore the blur event if the input if filled.\nYou can inspect the popup markup with your browser tools.\nConsider this option when you need to customize the component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default input value. Use when the component is not controlled.",
          "tags": []
        },
        "disableClearable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input can't be cleared.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableCloseOnSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the popup won't close when a value is selected.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableListWrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the list box in the popup will not wrap focus.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableOpenOnFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the popup won't open on input focus.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "filterOptions": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A filter function that determines the options that are eligible.",
          "tags": [
            {
              "title": "param",
              "description": "The options to render.",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "any"
                  }
                ]
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "The state of the component.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "state"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "any"
                  }
                ]
              }
            }
          ]
        },
        "filterSelectedOptions": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hide the selected options from the list box.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "freeSolo": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "getOptionDisabled": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Used to determine the disabled state for a given option.",
          "tags": []
        },
        "getOptionLabel": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Used to determine the string value for a given option.\nIt's used to fill the input (and the list box options if `renderOption` is not provided).",
          "defaultValue": {
            "value": "x => x",
            "computed": false
          },
          "tags": []
        },
        "groupBy": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "If provided, the options will be grouped under the returned string.\nThe groupBy value is also used as the text for group headings when `renderGroup` is not provided.",
          "tags": [
            {
              "title": "param",
              "description": "The option to group.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "options"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
          "tags": []
        },
        "includeInputInList": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the highlight can move to the input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "ListboxComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the listbox.",
          "defaultValue": {
            "value": "'ul'",
            "computed": false
          },
          "tags": []
        },
        "loading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component is in a loading state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "loadingText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Text to display when in a loading state.",
          "defaultValue": {
            "value": "'Loading…'",
            "computed": false
          },
          "tags": []
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, `value` must be an array and the menu will support multiple selections.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "noOptionsText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Text to display when there are no options.",
          "defaultValue": {
            "value": "'No options'",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the popup requests to be closed.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the popup requests to be opened.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Control the popup` open state.",
          "tags": []
        },
        "options": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "Array of options.",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "tags": []
        },
        "PaperComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the body of the popup.",
          "defaultValue": {
            "value": "Paper",
            "computed": true
          },
          "tags": []
        },
        "PopupComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the popup.",
          "defaultValue": {
            "value": "Popper",
            "computed": true
          },
          "tags": []
        },
        "renderGroup": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the group.",
          "tags": [
            {
              "title": "param",
              "description": "The group to render.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "option"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "renderInput": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Render the input.",
          "tags": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "params"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "renderOption": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the option, use `getOptionLabel` by default.",
          "tags": [
            {
              "title": "param",
              "description": "The option to render.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "option"
            },
            {
              "title": "param",
              "description": "The state of the component.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "state"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "renderTags": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the selected value.",
          "tags": [
            {
              "title": "param",
              "description": "The `value` provided to the component.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The input value.",
          "tags": []
        }
      },
      "name": "Autocomplete",
      "styles": {
        "classes": [
          "root",
          "focused",
          "tag",
          "inputRoot",
          "input",
          "inputFocused",
          "clearIndicator",
          "clearIndicatorDirty",
          "popupIndicator",
          "popupIndicatorOpen",
          "popup",
          "paper",
          "listbox",
          "loading",
          "noOptions",
          "option",
          "groupLabel",
          "groupUl"
        ],
        "name": "MuiAutocomplete",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "focused": "Pseudo-class applied to the root element if focused.",
          "tag": "Styles applied to the tag elements, e.g. the chips.",
          "inputRoot": "Styles applied to the Input element.",
          "input": "Styles applied to the input element.",
          "inputFocused": "Styles applied to the input element if tag focused.",
          "clearIndicator": "Styles applied to the clear indictator.",
          "clearIndicatorDirty": "Styles applied to the clear indictator if the input is dirty.",
          "popupIndicator": "Styles applied to the popup indictator.",
          "popupIndicatorOpen": "Styles applied to the popup indictator if the popup is open.",
          "popup": "Styles applied to the popup element.",
          "paper": "Styles applied to the `Paper` component.",
          "listbox": "Styles applied to the `listbox` component.",
          "loading": "Styles applied to the loading wrapper.",
          "noOptions": "Styles applied to the no option wrapper.",
          "option": "Styles applied to the option elements.",
          "groupLabel": "Styles applied to the group's label elements.",
          "groupUl": "Styles applied to the group's ul elements.",
          "const": "eslint-enable no-unused-vars"
        },
        "globalClasses": {
          "root": "MuiAutocomplete-root",
          "focused": "Mui-focused",
          "tag": "MuiAutocomplete-tag",
          "inputRoot": "MuiAutocomplete-inputRoot",
          "input": "MuiAutocomplete-input",
          "inputFocused": "MuiAutocomplete-inputFocused",
          "clearIndicator": "MuiAutocomplete-clearIndicator",
          "clearIndicatorDirty": "MuiAutocomplete-clearIndicatorDirty",
          "popupIndicator": "MuiAutocomplete-popupIndicator",
          "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
          "popup": "MuiAutocomplete-popup",
          "paper": "MuiAutocomplete-paper",
          "listbox": "MuiAutocomplete-listbox",
          "loading": "MuiAutocomplete-loading",
          "noOptions": "MuiAutocomplete-noOptions",
          "option": "MuiAutocomplete-option",
          "groupLabel": "MuiAutocomplete-groupLabel",
          "groupUl": "MuiAutocomplete-groupUl"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\n\nexport { createFilterOptions };\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '&:hover $clearIndicatorDirty, &$focused $clearIndicatorDirty': {\n      visibility: 'visible',\n    },\n  },\n  /* Pseudo-class applied to the root element if focused. */\n  focused: {},\n  /* Styles applied to the tag elements, e.g. the chips. */\n  tag: {\n    margin: theme.spacing(0.5),\n  },\n  /* Styles applied to the Input element. */\n  inputRoot: {\n    flexWrap: 'wrap',\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      padding: 8,\n      '& $input': {\n        padding: '10.5px 6px',\n      },\n    },\n    '&[class*=\"MuiFilledInput-root\"]': {\n      paddingTop: 21,\n      '& $input': {\n        paddingTop: 10,\n      },\n    },\n  },\n  /* Styles applied to the input element. */\n  input: {\n    width: 0,\n    minWidth: 30,\n    flexGrow: 1,\n    opacity: 0,\n    textOverflow: 'ellipsis',\n  },\n  /* Styles applied to the input element if tag focused. */\n  inputFocused: {\n    opacity: 1,\n  },\n  /* Styles applied to the clear indictator. */\n  clearIndicator: {\n    marginRight: -2,\n    padding: 4,\n    color: theme.palette.action.active,\n    visibility: 'hidden',\n  },\n  /* Styles applied to the clear indictator if the input is dirty. */\n  clearIndicatorDirty: {},\n  /* Styles applied to the popup indictator. */\n  popupIndicator: {\n    padding: 2,\n    marginRight: -2,\n    color: theme.palette.action.active,\n  },\n  /* Styles applied to the popup indictator if the popup is open. */\n  popupIndicatorOpen: {\n    transform: 'rotate(180deg)',\n  },\n  /* Styles applied to the popup element. */\n  popup: {\n    zIndex: 1,\n  },\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    ...theme.typography.body1,\n    margin: '4px 0',\n    '& > ul': {\n      maxHeight: '40vh',\n      overflow: 'auto',\n    },\n  },\n  /* Styles applied to the `listbox` component. */\n  listbox: {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0px',\n    position: 'relative',\n  },\n  /* Styles applied to the loading wrapper. */\n  loading: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px',\n  },\n  /* Styles applied to the no option wrapper. */\n  noOptions: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px',\n  },\n  /* Styles applied to the option elements. */\n  option: {\n    minHeight: 48,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    outline: 'none',\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto',\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.palette.action.selected,\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover,\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: 0.5,\n      pointerEvents: 'none',\n    },\n    '&:active': {\n      backgroundColor: theme.palette.action.selected,\n    },\n  },\n  /* Styles applied to the group's label elements. */\n  groupLabel: {\n    backgroundColor: theme.palette.background.paper,\n    top: -8,\n  },\n  /* Styles applied to the group's ul elements. */\n  groupUl: {\n    padding: 0,\n  },\n});\n\nconst Autocomplete = React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    classes,\n    className,\n    clearOnEscape = false,\n    debug = false,\n    defaultValue,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disableListWrap = false,\n    disableOpenOnFocus = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel = x => x,\n    groupBy,\n    id: idProp,\n    includeInputInList = false,\n    ListboxComponent = 'ul',\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onOpen,\n    open,\n    options = [],\n    PaperComponent = Paper,\n    PopupComponent = Popper,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    value: valueProp,\n    ...other\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const popperRef = React.useRef(null);\n  React.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getPopupProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions,\n  } = useAutocomplete(props);\n\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const tagProps = {\n      ...getTagProps(),\n      className: classes.tag,\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, tagProps);\n    } else {\n      startAdornment = value.map((option, index) => (\n        <Chip\n          key={index}\n          data-tag-index={index}\n          tabIndex={-1}\n          label={getOptionLabel(option)}\n          {...tagProps}\n        />\n      ));\n    }\n  }\n\n  const defaultRenderGroup = params => (\n    <li key={params.key}>\n      <ListSubheader className={classes.groupLabel} component=\"div\">\n        {params.key}\n      </ListSubheader>\n      <ul className={classes.groupUl}>{params.children}</ul>\n    </li>\n  );\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const renderOption = renderOptionProp || getOptionLabel;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({ option, index });\n\n    return (\n      <li {...optionProps} className={classes.option}>\n        {renderOption(option, {\n          selected: optionProps['aria-selected'],\n          inputValue,\n        })}\n      </li>\n    );\n  };\n\n  return (\n    <div\n      ref={ref}\n      className={clsx(\n        classes.root,\n        {\n          [classes.focused]: focused,\n        },\n        className,\n      )}\n      {...getRootProps()}\n      {...other}\n    >\n      {renderInput({\n        ref: setAnchorEl,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: (\n            <React.Fragment>\n              {disableClearable ? null : (\n                <IconButton\n                  {...getClearProps()}\n                  title=\"Clear\"\n                  className={clsx(classes.clearIndicator, {\n                    [classes.clearIndicatorDirty]: dirty,\n                  })}\n                >\n                  <CloseIcon fontSize=\"small\" />\n                </IconButton>\n              )}\n\n              {freeSolo ? null : (\n                <IconButton\n                  {...getPopupIndicatorProps()}\n                  title={popupOpen ? 'Close popup' : 'Open popup'}\n                  className={clsx(classes.popupIndicator, {\n                    [classes.popupIndicatorOpen]: popupOpen,\n                  })}\n                >\n                  <ArrowDropDownIcon />\n                </IconButton>\n              )}\n            </React.Fragment>\n          ),\n        },\n        inputProps: {\n          className: clsx(classes.input, {\n            [classes.inputFocused]: focusedTag === -1,\n          }),\n          ...getInputProps(),\n        },\n      })}\n\n      {popupOpen && anchorEl ? (\n        <PopupComponent\n          className={classes.popup}\n          style={{\n            width: anchorEl ? anchorEl.clientWidth : null,\n          }}\n          popperRef={popperRef}\n          anchorEl={anchorEl}\n          open\n          {...getPopupProps()}\n        >\n          <PaperComponent className={classes.paper}>\n            {loading ? <div className={classes.loading}>{loadingText}</div> : null}\n            {groupedOptions.length === 0 && !freeSolo && !loading ? (\n              <div className={classes.noOptions}>{noOptionsText}</div>\n            ) : null}\n            {groupedOptions.length > 0 ? (\n              <ListboxComponent className={classes.listbox} {...getListboxProps()}>\n                {groupedOptions.map((option, index) => {\n                  if (groupBy) {\n                    return renderGroup({\n                      key: option.key,\n                      children: option.options.map((option2, index2) =>\n                        renderListOption(option2, option.index + index2),\n                      ),\n                    });\n                  }\n                  return renderListOption(option, index);\n                })}\n              </ListboxComponent>\n            ) : null}\n          </PaperComponent>\n        </PopupComponent>\n      ) : null}\n    </div>\n  );\n});\n\nAutocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * If `true`, the popup will ignore the blur event if the input if filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   */\n  debug: PropTypes.bool,\n  /**\n   * The default input value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the input can't be cleared.\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the popup won't open on input focus.\n   */\n  disableOpenOnFocus: PropTypes.bool,\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {any[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {any[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * Used to determine the disabled state for a given option.\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {any} options The option to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The component used to render the listbox.\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * If `true`, the component is in a loading state.\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {any} value\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array,\n  /**\n   * The component used to render the body of the popup.\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to render the popup.\n   */\n  PopupComponent: PropTypes.elementType,\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {any} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * The input value.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiAutocomplete' })(Autocomplete);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/Autocomplete/Autocomplete.js",
      "inheritance": null,
      "usedInPages": [
        "/components/autocomplete"
      ]
    },
    "Rating": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the rating will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "emptyIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display when empty.",
          "tags": []
        },
        "getLabelText": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.",
          "defaultValue": {
            "value": "function defaultLabelText(value) {\n  return `${value} Star${value !== 1 ? 's' : ''}`;\n}",
            "computed": false
          },
          "tags": [
            {
              "title": "param",
              "description": "The rating label's value to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display.",
          "defaultValue": {
            "value": "<Star fontSize=\"inherit\" />",
            "computed": false
          },
          "tags": []
        },
        "IconContainerComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component containing the icon.",
          "defaultValue": {
            "value": "function IconContainer(props) {\n  const { value, ...other } = props;\n  return <span {...other} />;\n}",
            "computed": false
          },
          "tags": []
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Maximum rating.",
          "defaultValue": {
            "value": "5",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.string, props => {\n  if (!props.readOnly && !props.name) {\n    return new Error(\n      [\n        'Material-UI: the prop `name` is required (when `readOnly` is false).',\n        'Additionally, the input name should be unique within the parent form.',\n      ].join('\\n'),\n    );\n  }\n  return null;\n})"
          },
          "required": false,
          "description": "The name attribute of the radio `input` elements.\nIf `readOnly` is false, the prop is required,\nthis input name`should be unique within the parent form.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            }
          ]
        },
        "onChangeActive": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function that is fired when the hover state changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            }
          ]
        },
        "precision": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The minimum increment value change allowed.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Removes all hover effects and pointer events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the rating.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The rating value.",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Rating",
      "styles": {
        "classes": [
          "root",
          "sizeSmall",
          "sizeLarge",
          "readOnly",
          "disabled",
          "focusVisible",
          "visuallyhidden",
          "pristine",
          "label",
          "icon",
          "iconEmpty",
          "iconFilled",
          "iconHover",
          "iconFocus",
          "iconActive",
          "decimal"
        ],
        "name": "MuiRating",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
          "readOnly": "Styles applied to the root element if `readOnly={true}`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "focusVisible": "Pseudo-class applied to the root element if keyboard focused.",
          "visuallyhidden": "Visually hide an element.",
          "pristine": "Styles applied to the pristine label.",
          "label": "Styles applied to the label elements.",
          "icon": "Styles applied to the icon wrapping elements.",
          "iconEmpty": "Styles applied to the icon wrapping elements when empty.",
          "iconFilled": "Styles applied to the icon wrapping elements when filled.",
          "iconHover": "Styles applied to the icon wrapping elements when hover.",
          "iconFocus": "Styles applied to the icon wrapping elements when focus.",
          "iconActive": "Styles applied to the icon wrapping elements when active.",
          "decimal": "Styles applied to the icon wrapping elements when decimals are necessary."
        },
        "globalClasses": {
          "root": "MuiRating-root",
          "sizeSmall": "MuiRating-sizeSmall",
          "sizeLarge": "MuiRating-sizeLarge",
          "readOnly": "MuiRating-readOnly",
          "disabled": "Mui-disabled",
          "focusVisible": "Mui-focusVisible",
          "visuallyhidden": "MuiRating-visuallyhidden",
          "pristine": "MuiRating-pristine",
          "label": "MuiRating-label",
          "icon": "MuiRating-icon",
          "iconEmpty": "MuiRating-iconEmpty",
          "iconFilled": "MuiRating-iconFilled",
          "iconHover": "MuiRating-iconHover",
          "iconFocus": "MuiRating-iconFocus",
          "iconActive": "MuiRating-iconActive",
          "decimal": "MuiRating-decimal"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport { useTheme, withStyles } from '@material-ui/core/styles';\nimport { capitalize, useForkRef, useIsFocusVisible } from '@material-ui/core/utils';\nimport Star from '../internal/svg-icons/Star';\n\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nfunction getDecimalPrecision(num) {\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n}\n\nfunction roundValueToPrecision(value, precision) {\n  const nearest = Math.round(value / precision) * precision;\n  return Number(nearest.toFixed(getDecimalPrecision(precision)));\n}\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    position: 'relative',\n    fontSize: theme.typography.pxToRem(24),\n    color: '#ffb400',\n    cursor: 'pointer',\n    '&$disabled': {\n      opacity: 0.5,\n      pointerEvents: 'none',\n    },\n    '&$focusVisible $iconActive': {\n      outline: '1px solid #999',\n    },\n  },\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    fontSize: theme.typography.pxToRem(18),\n  },\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    fontSize: theme.typography.pxToRem(30),\n  },\n  /* Styles applied to the root element if `readOnly={true}`. */\n  readOnly: {\n    pointerEvents: 'none',\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if keyboard focused. */\n  focusVisible: {},\n  /* Visually hide an element. */\n  visuallyhidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n  /* Styles applied to the pristine label. */\n  pristine: {\n    'input:focus ~ &': {\n      top: 0,\n      bottom: 0,\n      position: 'absolute',\n      outline: '1px solid #999',\n      width: '100%',\n    },\n  },\n  /* Styles applied to the label elements. */\n  label: {\n    cursor: 'inherit',\n  },\n  /* Styles applied to the icon wrapping elements. */\n  icon: {\n    display: 'flex',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  /* Styles applied to the icon wrapping elements when empty. */\n  iconEmpty: {\n    color: theme.palette.action.disabled,\n  },\n  /* Styles applied to the icon wrapping elements when filled. */\n  iconFilled: {},\n  /* Styles applied to the icon wrapping elements when hover. */\n  iconHover: {},\n  /* Styles applied to the icon wrapping elements when focus. */\n  iconFocus: {},\n  /* Styles applied to the icon wrapping elements when active. */\n  iconActive: {\n    transform: 'scale(1.2)',\n  },\n  /* Styles applied to the icon wrapping elements when decimals are necessary. */\n  decimal: {\n    position: 'relative',\n  },\n});\n\nfunction IconContainer(props) {\n  const { value, ...other } = props;\n  return <span {...other} />;\n}\n\nIconContainer.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nconst defaultIcon = <Star fontSize=\"inherit\" />;\n\nfunction defaultLabelText(value) {\n  return `${value} Star${value !== 1 ? 's' : ''}`;\n}\n\nconst Rating = React.forwardRef(function Rating(props, ref) {\n  const {\n    classes,\n    className,\n    disabled = false,\n    emptyIcon,\n    getLabelText = defaultLabelText,\n    icon = defaultIcon,\n    IconContainerComponent = IconContainer,\n    max = 5,\n    name,\n    onChange,\n    onChangeActive,\n    onMouseLeave,\n    onMouseMove,\n    precision = 1,\n    readOnly = false,\n    size = 'medium',\n    value: valueProp2 = null,\n    ...other\n  } = props;\n\n  const valueProp = roundValueToPrecision(valueProp2, precision);\n  const theme = useTheme();\n  const [{ hover, focus }, setState] = React.useState({\n    hover: -1,\n    focus: -1,\n  });\n\n  let value = valueProp;\n  if (hover !== -1) {\n    value = hover;\n  }\n  if (focus !== -1) {\n    value = focus;\n  }\n\n  const { isFocusVisible, onBlurVisible, ref: focusVisibleRef } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n\n  const rootRef = React.useRef();\n  const handleFocusRef = useForkRef(focusVisibleRef, rootRef);\n  const handleRef = useForkRef(handleFocusRef, ref);\n\n  const handleMouseMove = event => {\n    if (onMouseMove) {\n      onMouseMove(event);\n    }\n\n    const rootNode = rootRef.current;\n    const { right, left } = rootNode.getBoundingClientRect();\n    const { width } = rootNode.firstChild.getBoundingClientRect();\n    let percent;\n\n    if (theme.direction === 'rtl') {\n      percent = (right - event.clientX) / (width * max);\n    } else {\n      percent = (event.clientX - left) / (width * max);\n    }\n\n    let newHover = roundValueToPrecision(max * percent + precision / 2, precision);\n    newHover = clamp(newHover, precision, max);\n\n    setState(prev =>\n      prev.hover === newHover && prev.focus === newHover\n        ? prev\n        : {\n            hover: newHover,\n            focus: newHover,\n          },\n    );\n\n    setFocusVisible(false);\n\n    if (onChangeActive && hover !== newHover) {\n      onChangeActive(event, newHover);\n    }\n  };\n\n  const handleMouseLeave = event => {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    const newHover = -1;\n    setState({\n      hover: newHover,\n      focus: newHover,\n    });\n\n    if (onChangeActive && hover !== newHover) {\n      onChangeActive(event, newHover);\n    }\n  };\n\n  const handleChange = event => {\n    if (onChange) {\n      onChange(event, parseFloat(event.target.value));\n    }\n  };\n\n  const handleFocus = event => {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    const newFocus = parseFloat(event.target.value);\n    setState(prev => ({\n      hover: prev.hover,\n      focus: newFocus,\n    }));\n\n    if (onChangeActive && focus !== newFocus) {\n      onChangeActive(event, newFocus);\n    }\n  };\n\n  const handleBlur = event => {\n    if (hover !== -1) {\n      return;\n    }\n\n    if (focusVisible !== false) {\n      setFocusVisible(false);\n      onBlurVisible();\n    }\n\n    const newFocus = -1;\n    setState(prev => ({\n      hover: prev.hover,\n      focus: newFocus,\n    }));\n\n    if (onChangeActive && focus !== newFocus) {\n      onChangeActive(event, newFocus);\n    }\n  };\n\n  const item = (propsItem, state) => {\n    const id = `${name}-${String(propsItem.value).replace('.', '-')}`;\n    const container = (\n      <IconContainerComponent\n        {...propsItem}\n        className={clsx(classes.icon, {\n          [classes.iconEmpty]: !state.filled,\n          [classes.iconFilled]: state.filled,\n          [classes.iconHover]: state.hover,\n          [classes.iconFocus]: state.focus,\n          [classes.iconActive]: state.active,\n        })}\n      >\n        {emptyIcon && !state.filled ? emptyIcon : icon}\n      </IconContainerComponent>\n    );\n\n    if (readOnly || disabled) {\n      return <React.Fragment key={propsItem.value}>{container}</React.Fragment>;\n    }\n\n    return (\n      <React.Fragment key={propsItem.value}>\n        <label className={classes.label} htmlFor={id}>\n          {container}\n          <span className={classes.visuallyhidden}>{getLabelText(propsItem.value)}</span>\n        </label>\n        <input\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          value={propsItem.value}\n          id={id}\n          type=\"radio\"\n          name={name}\n          checked={state.checked}\n          className={classes.visuallyhidden}\n        />\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <span\n      ref={handleRef}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      className={clsx(\n        classes.root,\n        {\n          [classes[`size${capitalize(size)}`]]: size !== 'medium',\n          [classes.disabled]: disabled,\n          [classes.focusVisible]: focusVisible,\n          [classes.readOnly]: readOnly,\n        },\n        className,\n      )}\n      role={readOnly ? 'img' : null}\n      aria-label={readOnly ? getLabelText(value) : null}\n      {...other}\n    >\n      {!readOnly && !disabled && value == null && (\n        <React.Fragment>\n          <input\n            value=\"0\"\n            id={`${name}-0`}\n            type=\"radio\"\n            name={name}\n            defaultChecked\n            className={classes.visuallyhidden}\n          />\n          <label htmlFor={`${name}-0`} className={classes.pristine}>\n            <span className={classes.visuallyhidden}>{getLabelText(0)}</span>\n          </label>\n        </React.Fragment>\n      )}\n      {Array.from(new Array(max)).map((_, index) => {\n        const itemValue = index + 1;\n\n        if (precision < 1) {\n          const items = Array.from(new Array(1 / precision));\n          return (\n            <span\n              key={itemValue}\n              className={clsx(classes.decimal, {\n                [classes.iconActive]:\n                  itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1),\n              })}\n            >\n              {items.map(($, indexDecimal) => {\n                const itemDecimalValue = roundValueToPrecision(\n                  itemValue - 1 + (indexDecimal + 1) * precision,\n                  precision,\n                );\n\n                return item(\n                  {\n                    value: itemDecimalValue,\n                    style:\n                      items.length - 1 === indexDecimal\n                        ? {}\n                        : {\n                            width:\n                              itemDecimalValue === value\n                                ? `${(indexDecimal + 1) * precision * 100}%`\n                                : '0%',\n                            overflow: 'hidden',\n                            zIndex: 1,\n                            position: 'absolute',\n                          },\n                  },\n                  {\n                    filled: itemDecimalValue <= value,\n                    hover: itemDecimalValue <= hover,\n                    focus: itemDecimalValue <= focus,\n                    checked: itemDecimalValue === valueProp,\n                  },\n                );\n              })}\n            </span>\n          );\n        }\n\n        return item(\n          {\n            value: itemValue,\n          },\n          {\n            active: itemValue === value && (hover !== -1 || focus !== -1),\n            filled: itemValue <= value,\n            hover: itemValue <= hover,\n            focus: itemValue <= focus,\n            checked: itemValue === valueProp,\n          },\n        );\n      })}\n    </span>\n  );\n});\n\nRating.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the rating will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The icon to display when empty.\n   */\n  emptyIcon: PropTypes.node,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.\n   *\n   * @param {number} value The rating label's value to format.\n   * @returns {string}\n   */\n  getLabelText: PropTypes.func,\n  /**\n   * The icon to display.\n   */\n  icon: PropTypes.node,\n  /**\n   * The component containing the icon.\n   */\n  IconContainerComponent: PropTypes.elementType,\n  /**\n   * Maximum rating.\n   */\n  max: PropTypes.number,\n  /**\n   * The name attribute of the radio `input` elements.\n   * If `readOnly` is false, the prop is required,\n   * this input name`should be unique within the parent form.\n   */\n  name: chainPropTypes(PropTypes.string, props => {\n    if (!props.readOnly && !props.name) {\n      return new Error(\n        [\n          'Material-UI: the prop `name` is required (when `readOnly` is false).',\n          'Additionally, the input name should be unique within the parent form.',\n        ].join('\\n'),\n      );\n    }\n    return null;\n  }),\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {number} value The new value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback function that is fired when the hover state changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {number} value The new value.\n   */\n  onChangeActive: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseMove: PropTypes.func,\n  /**\n   * The minimum increment value change allowed.\n   */\n  precision: PropTypes.number,\n  /**\n   * Removes all hover effects and pointer events.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * The size of the rating.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The rating value.\n   */\n  value: PropTypes.number,\n};\n\nexport default withStyles(styles, { name: 'MuiRating' })(Rating);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui-lab/src/Rating/Rating.js",
      "inheritance": null,
      "usedInPages": [
        "/components/rating"
      ]
    },
    "Skeleton": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disableAnimate": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true` the animation effect is disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "height": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Height of the skeleton.\nUseful when you don't want to adapt the skeleton to a text element but for instance a card.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'rect'",
                "computed": false
              },
              {
                "value": "'circle'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The type of content that will be rendered.",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "width": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Width of the skeleton.\nUseful when the skeleton is inside an inline element with no width of its own.",
          "tags": []
        }
      },
      "name": "Skeleton",
      "styles": {
        "classes": [
          "root",
          "text",
          "rect",
          "circle",
          "animate"
        ],
        "name": "MuiSkeleton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "text": "Styles applied to the root element if `variant=\"text\"`.",
          "rect": "Styles applied to the root element if `variant=\"rect\"`.",
          "circle": "Styles applied to the root element if `variant=\"circle\"`.",
          "animate": "Styles applied to the root element if `disabledAnimate={false}`."
        },
        "globalClasses": {
          "root": "MuiSkeleton-root",
          "text": "MuiSkeleton-text",
          "rect": "MuiSkeleton-rect",
          "circle": "MuiSkeleton-circle",
          "animate": "MuiSkeleton-animate"
        }
      },
      "src": "import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    backgroundColor: theme.palette.action.hover,\n    height: '1.2em',\n  },\n  /* Styles applied to the root element if `variant=\"text\"`. */\n  text: {\n    marginTop: '0.8em',\n    marginBottom: '0.8em',\n    borderRadius: theme.shape.borderRadius,\n  },\n  /* Styles applied to the root element if `variant=\"rect\"`. */\n  rect: {},\n  /* Styles applied to the root element if `variant=\"circle\"`. */\n  circle: {\n    borderRadius: '50%',\n  },\n  /* Styles applied to the root element if `disabledAnimate={false}`. */\n  animate: {\n    animation: '$animate 1.5s ease-in-out infinite',\n  },\n  '@keyframes animate': {\n    '0%': {\n      opacity: 1,\n    },\n    '50%': {\n      opacity: 0.4,\n    },\n    '100%': {\n      opacity: 1,\n    },\n  },\n});\n\nconst Skeleton = React.forwardRef(function Skeleton(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    disableAnimate = false,\n    height,\n    variant = 'text',\n    width,\n    ...other\n  } = props;\n\n  return (\n    <Component\n      ref={ref}\n      className={clsx(\n        classes.root,\n        classes[variant],\n        {\n          [classes.animate]: !disableAnimate,\n        },\n        className,\n      )}\n      {...other}\n      style={{\n        width,\n        height,\n        ...other.style,\n      }}\n    />\n  );\n});\n\nSkeleton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true` the animation effect is disabled.\n   */\n  disableAnimate: PropTypes.bool,\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The type of content that will be rendered.\n   */\n  variant: PropTypes.oneOf(['text', 'rect', 'circle']),\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nexport default withStyles(styles, { name: 'MuiSkeleton' })(Skeleton);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/Skeleton/Skeleton.js",
      "inheritance": null,
      "usedInPages": [
        "/components/skeleton"
      ]
    },
    "SpeedDialAction": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "delay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Adds a transition delay, to allow a series of SpeedDialActions to be animated.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "FabProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Fab`](/api/fab/) component.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The Icon to display in the SpeedDial Fab.",
          "tags": []
        },
        "TooltipClasses": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Classes applied to the [`Tooltip`](/api/tooltip/) element.",
          "tags": []
        },
        "tooltipOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Make the tooltip always visible when the SpeedDial is open.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "tooltipPlacement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom-end'",
                "computed": false
              },
              {
                "value": "'bottom-start'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left-end'",
                "computed": false
              },
              {
                "value": "'left-start'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right-end'",
                "computed": false
              },
              {
                "value": "'right-start'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top-end'",
                "computed": false
              },
              {
                "value": "'top-start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Placement of the tooltip.",
          "defaultValue": {
            "value": "'left'",
            "computed": false
          },
          "tags": []
        },
        "tooltipTitle": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Label to display in the tooltip.",
          "tags": []
        }
      },
      "name": "SpeedDialAction",
      "styles": {
        "classes": [
          "fab",
          "fabClosed",
          "staticTooltip",
          "staticTooltipClosed",
          "staticTooltipLabel",
          "tooltipPlacementLeft",
          "tooltipPlacementRight"
        ],
        "name": "MuiSpeedDialAction",
        "descriptions": {
          "fab": "Styles applied to the Fab component.",
          "fabClosed": "Styles applied to the Fab component if `open={false}`.",
          "staticTooltip": "Styles applied to the root element if `tooltipOpen={true}`.",
          "staticTooltipClosed": "Styles applied to the root element if `tooltipOpen={true}` and `open={false}`.",
          "staticTooltipLabel": "Styles applied to the static tooltip label if `tooltipOpen={true}`.",
          "tooltipPlacementLeft": "Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"left\"``",
          "tooltipPlacementRight": "Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"right\"``"
        },
        "globalClasses": {
          "fab": "MuiSpeedDialAction-fab",
          "fabClosed": "MuiSpeedDialAction-fabClosed",
          "staticTooltip": "MuiSpeedDialAction-staticTooltip",
          "staticTooltipClosed": "MuiSpeedDialAction-staticTooltipClosed",
          "staticTooltipLabel": "MuiSpeedDialAction-staticTooltipLabel",
          "tooltipPlacementLeft": "MuiSpeedDialAction-tooltipPlacementLeft",
          "tooltipPlacementRight": "MuiSpeedDialAction-tooltipPlacementRight"
        }
      },
      "src": "// @inheritedComponent Tooltip\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { emphasize, withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { capitalize } from '@material-ui/core/utils';\n\nexport const styles = theme => ({\n  /* Styles applied to the Fab component. */\n  fab: {\n    margin: 8,\n    color: theme.palette.text.secondary,\n    backgroundColor: theme.palette.background.paper,\n    '&:hover': {\n      backgroundColor: emphasize(theme.palette.background.paper, 0.15),\n    },\n    transition: `${theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shorter,\n    })}, opacity 0.8s`,\n    opacity: 1,\n  },\n  /* Styles applied to the Fab component if `open={false}`. */\n  fabClosed: {\n    opacity: 0,\n    transform: 'scale(0)',\n  },\n  /* Styles applied to the root element if `tooltipOpen={true}`. */\n  staticTooltip: {\n    position: 'relative',\n    display: 'flex',\n    '& $staticTooltipLabel': {\n      transition: theme.transitions.create(['transform', 'opacity'], {\n        duration: theme.transitions.duration.shorter,\n      }),\n      opacity: 1,\n    },\n  },\n  /* Styles applied to the root element if `tooltipOpen={true}` and `open={false}`. */\n  staticTooltipClosed: {\n    '& $staticTooltipLabel': {\n      opacity: 0,\n      transform: 'scale(0.5)',\n    },\n  },\n  /* Styles applied to the static tooltip label if `tooltipOpen={true}`. */\n  staticTooltipLabel: {\n    position: 'absolute',\n    ...theme.typography.body1,\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: theme.shape.borderRadius,\n    boxShadow: theme.shadows[1],\n    color: theme.palette.text.secondary,\n    padding: '4px 16px',\n  },\n  /* Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"left\"`` */\n  tooltipPlacementLeft: {\n    alignItems: 'center',\n    '& $staticTooltipLabel': {\n      transformOrigin: '100% 50%',\n      right: '100%',\n      marginRight: 8,\n    },\n  },\n  /* Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"right\"`` */\n  tooltipPlacementRight: {\n    alignItems: 'center',\n    '& $staticTooltipLabel': {\n      transformOrigin: '0% 50%',\n      left: '100%',\n      marginLeft: 8,\n    },\n  },\n});\n\nconst SpeedDialAction = React.forwardRef(function SpeedDialAction(props, ref) {\n  const {\n    classes,\n    className,\n    delay = 0,\n    FabProps,\n    icon,\n    id,\n    open,\n    TooltipClasses,\n    tooltipOpen: tooltipOpenProp = false,\n    tooltipPlacement = 'left',\n    tooltipTitle,\n    ...other\n  } = props;\n\n  const [tooltipOpen, setTooltipOpen] = React.useState(tooltipOpenProp);\n\n  const handleTooltipClose = () => {\n    setTooltipOpen(false);\n  };\n\n  const handleTooltipOpen = () => {\n    setTooltipOpen(true);\n  };\n\n  const transitionStyle = { transitionDelay: `${delay}ms` };\n\n  if (FabProps && FabProps.style) {\n    FabProps.style.transitionDelay = `${delay}ms`;\n  }\n\n  const fab = (\n    <Fab\n      size=\"small\"\n      className={clsx(classes.fab, !open && classes.fabClosed, className)}\n      tabIndex={-1}\n      role=\"menuitem\"\n      style={transitionStyle}\n      aria-describedby={`${id}-label`}\n      {...FabProps}\n    >\n      {icon}\n    </Fab>\n  );\n\n  if (tooltipOpenProp) {\n    return (\n      <span\n        id={id}\n        ref={ref}\n        className={clsx(\n          classes.staticTooltip,\n          !open && classes.staticTooltipClosed,\n          classes[`tooltipPlacement${capitalize(tooltipPlacement)}`],\n        )}\n        {...other}\n      >\n        <span style={transitionStyle} id={`${id}-label`} className={classes.staticTooltipLabel}>\n          {tooltipTitle}\n        </span>\n        {fab}\n      </span>\n    );\n  }\n\n  return (\n    <Tooltip\n      id={id}\n      ref={ref}\n      title={tooltipTitle}\n      placement={tooltipPlacement}\n      onClose={handleTooltipClose}\n      onOpen={handleTooltipOpen}\n      open={open && tooltipOpen}\n      classes={TooltipClasses}\n      {...other}\n    >\n      {fab}\n    </Tooltip>\n  );\n});\n\nSpeedDialAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.\n   */\n  delay: PropTypes.number,\n  /**\n   * Props applied to the [`Fab`](/api/fab/) component.\n   */\n  FabProps: PropTypes.object,\n  /**\n   * The Icon to display in the SpeedDial Fab.\n   */\n  icon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * @ignore\n   */\n  open: PropTypes.bool,\n  /**\n   * Classes applied to the [`Tooltip`](/api/tooltip/) element.\n   */\n  TooltipClasses: PropTypes.object,\n  /**\n   * Make the tooltip always visible when the SpeedDial is open.\n   */\n  tooltipOpen: PropTypes.bool,\n  /**\n   * Placement of the tooltip.\n   */\n  tooltipPlacement: PropTypes.oneOf([\n    'bottom-end',\n    'bottom-start',\n    'bottom',\n    'left-end',\n    'left-start',\n    'left',\n    'right-end',\n    'right-start',\n    'right',\n    'top-end',\n    'top-start',\n    'top',\n  ]),\n  /**\n   * Label to display in the tooltip.\n   */\n  tooltipTitle: PropTypes.node,\n};\n\nexport default withStyles(styles, { name: 'MuiSpeedDialAction' })(SpeedDialAction);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui-lab/src/SpeedDialAction/SpeedDialAction.js",
      "inheritance": {
        "component": "Tooltip",
        "pathname": "/api/tooltip"
      },
      "usedInPages": [
        "/components/speed-dial"
      ]
    },
    "SpeedDialIcon": {
      "description": "",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Floating Action Button.",
          "tags": []
        },
        "openIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.",
          "tags": []
        }
      },
      "name": "SpeedDialIcon",
      "styles": {
        "classes": [
          "root",
          "icon",
          "iconOpen",
          "iconWithOpenIconOpen",
          "openIcon",
          "openIconOpen"
        ],
        "name": "MuiSpeedDialIcon",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "icon": "Styles applied to the icon component.",
          "iconOpen": "Styles applied to the icon component if `open={true}`.",
          "iconWithOpenIconOpen": "Styles applied to the icon when and `openIcon` is provided and if `open={true}`.",
          "openIcon": "Styles applied to the `openIcon` if provided.",
          "openIconOpen": "Styles applied to the `openIcon` if provided and if `open={true}`."
        },
        "globalClasses": {
          "root": "MuiSpeedDialIcon-root",
          "icon": "MuiSpeedDialIcon-icon",
          "iconOpen": "MuiSpeedDialIcon-iconOpen",
          "iconWithOpenIconOpen": "MuiSpeedDialIcon-iconWithOpenIconOpen",
          "openIcon": "MuiSpeedDialIcon-openIcon",
          "openIconOpen": "MuiSpeedDialIcon-openIconOpen"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport AddIcon from '../internal/svg-icons/Add';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    height: 24,\n  },\n  /* Styles applied to the icon component. */\n  icon: {\n    transition: theme.transitions.create(['transform', 'opacity'], {\n      duration: theme.transitions.duration.short,\n    }),\n  },\n  /* Styles applied to the icon component if `open={true}`. */\n  iconOpen: {\n    transform: 'rotate(45deg)',\n  },\n  /* Styles applied to the icon when and `openIcon` is provided and if `open={true}`. */\n  iconWithOpenIconOpen: {\n    opacity: 0,\n  },\n  /* Styles applied to the `openIcon` if provided. */\n  openIcon: {\n    position: 'absolute',\n    transition: theme.transitions.create(['transform', 'opacity'], {\n      duration: theme.transitions.duration.short,\n    }),\n    opacity: 0,\n    transform: 'rotate(-45deg)',\n  },\n  /* Styles applied to the `openIcon` if provided and if `open={true}`. */\n  openIconOpen: {\n    transform: 'rotate(0deg)',\n    opacity: 1,\n  },\n});\n\nconst SpeedDialIcon = React.forwardRef(function SpeedDialIcon(props, ref) {\n  const { className, classes, icon: iconProp, open, openIcon: openIconProp, ...other } = props;\n\n  const iconClassName = clsx(classes.icon, {\n    [classes.iconOpen]: open,\n    [classes.iconWithOpenIconOpen]: openIconProp && open,\n  });\n\n  const openIconClassName = clsx(classes.openIcon, { [classes.openIconOpen]: open });\n\n  function formatIcon(icon, newClassName) {\n    if (React.isValidElement(icon)) {\n      return React.cloneElement(icon, { className: newClassName });\n    }\n\n    return icon;\n  }\n\n  return (\n    <span className={clsx(classes.root, className)} ref={ref} {...other}>\n      {openIconProp ? formatIcon(openIconProp, openIconClassName) : null}\n      {iconProp ? formatIcon(iconProp, iconClassName) : <AddIcon className={iconClassName} />}\n    </span>\n  );\n});\n\nSpeedDialIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in the SpeedDial Floating Action Button.\n   */\n  icon: PropTypes.node,\n  /**\n   * @ignore\n   * If `true`, the SpeedDial is open.\n   */\n  open: PropTypes.bool,\n  /**\n   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.\n   */\n  openIcon: PropTypes.node,\n};\n\nSpeedDialIcon.muiName = 'SpeedDialIcon';\n\nexport default withStyles(styles, { name: 'MuiSpeedDialIcon' })(SpeedDialIcon);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui-lab/src/SpeedDialIcon/SpeedDialIcon.js",
      "inheritance": null,
      "usedInPages": [
        "/components/speed-dial"
      ]
    },
    "ToggleButton": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be rendered in an active state.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": true,
          "description": "The value to associate with the button when selected in a\nToggleButtonGroup.",
          "tags": []
        }
      },
      "name": "ToggleButton",
      "styles": {
        "classes": [
          "root",
          "disabled",
          "selected",
          "label",
          "sizeSmall",
          "sizeLarge"
        ],
        "name": "MuiToggleButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "selected": "Pseudo-class applied to the root element if `selected={true}`.",
          "label": "Styles applied to the `label` wrapper element.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "sizeLarge": "Styles applied to the root element if `size=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiToggleButton-root",
          "disabled": "Mui-disabled",
          "selected": "Mui-selected",
          "label": "MuiToggleButton-label",
          "sizeSmall": "MuiToggleButton-sizeSmall",
          "sizeLarge": "MuiToggleButton-sizeLarge"
        }
      },
      "src": "// @inheritedComponent ButtonBase\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, withStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { capitalize } from '@material-ui/core/utils';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    ...theme.typography.button,\n    boxSizing: 'border-box',\n    borderRadius: theme.shape.borderRadius,\n    height: 48,\n    padding: '0px 12px',\n    border: `1px solid ${fade(theme.palette.action.active, 0.12)}`,\n    color: fade(theme.palette.action.active, 0.38),\n    '&$selected': {\n      color: theme.palette.action.active,\n      backgroundColor: fade(theme.palette.action.active, 0.12),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, 0.15),\n      },\n      '& + &': {\n        borderLeft: 0,\n        marginLeft: 0,\n      },\n    },\n    '&$disabled': {\n      color: fade(theme.palette.action.disabled, 0.12),\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: fade(theme.palette.text.primary, 0.05),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n      '&$disabled': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {},\n  /* Styles applied to the `label` wrapper element. */\n  label: {\n    width: '100%', // Ensure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit',\n  },\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    height: 40,\n    padding: '0px 8px',\n    fontSize: theme.typography.pxToRem(13),\n  },\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    height: 56,\n    padding: '0px 16px',\n    fontSize: theme.typography.pxToRem(15),\n  },\n});\n\nconst ToggleButton = React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disabled = false,\n    disableFocusRipple = false,\n    disableRipple = false,\n    onChange,\n    onClick,\n    selected,\n    size = 'medium',\n    value,\n    ...other\n  } = props;\n\n  const handleChange = event => {\n    if (onClick) {\n      onClick(event, value);\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return (\n    <ButtonBase\n      className={clsx(\n        classes.root,\n        {\n          [classes.disabled]: disabled,\n          [classes.selected]: selected,\n          [classes[`size${capitalize(size)}`]]: size !== 'medium',\n        },\n        className,\n      )}\n      disabled={disabled}\n      focusRipple={!disableFocusRipple}\n      ref={ref}\n      onClick={handleChange}\n      onChange={onChange}\n      value={value}\n      disableRipple={disableRipple}\n      aria-pressed={selected}\n      {...other}\n    >\n      <span className={classes.label}>{children}</span>\n    </ButtonBase>\n  );\n});\n\nToggleButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * If `true`, the button will be rendered in an active state.\n   */\n  selected: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes.any.isRequired,\n};\n\nexport default withStyles(styles, { name: 'MuiToggleButton' })(ToggleButton);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui-lab/src/ToggleButton/ToggleButton.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/toggle-button"
      ]
    },
    "ToggleButtonGroup": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "exclusive": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, only allow one of the child ToggleButton values to be selected.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "of the selected buttons. When `exclusive` is true\nthis is a single value; when false an array of selected values. If no value\nis selected and `exclusive` is true the value is null; when false an empty array.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'large'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the buttons.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The currently selected value within the group or an array of selected\nvalues when `exclusive` is false.",
          "tags": []
        }
      },
      "name": "ToggleButtonGroup",
      "styles": {
        "classes": [
          "root",
          "grouped",
          "groupedSizeSmall",
          "groupedSizeLarge"
        ],
        "name": "MuiToggleButtonGroup",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "grouped": "Styles applied to the children.",
          "groupedSizeSmall": "Styles applied to the children if `size=\"small\"`.",
          "groupedSizeLarge": "Styles applied to the children if `size=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiToggleButtonGroup-root",
          "grouped": "MuiToggleButtonGroup-grouped",
          "groupedSizeSmall": "MuiToggleButtonGroup-groupedSizeSmall",
          "groupedSizeLarge": "MuiToggleButtonGroup-groupedSizeLarge"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport isValueSelected from './isValueSelected';\nimport { withStyles } from '@material-ui/core/styles';\nimport { capitalize } from '@material-ui/core/utils';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: theme.shape.borderRadius,\n    display: 'inline-flex',\n  },\n  /* Styles applied to the children. */\n  grouped: {\n    padding: '0px 11px 0px 12px',\n    '&:not(:first-child)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    },\n    '&:not(:last-child)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n  },\n  /* Styles applied to the children if `size=\"small\"`. */\n  groupedSizeSmall: {\n    padding: '0px 7px 0px 8px',\n  },\n  /* Styles applied to the children if `size=\"large\"`. */\n  groupedSizeLarge: {\n    padding: '0px 15px 0px 16px',\n  },\n});\n\nconst ToggleButtonGroup = React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    exclusive = false,\n    onChange,\n    size = 'medium',\n    value,\n    ...other\n  } = props;\n\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n\n    if (value && index >= 0) {\n      newValue = [...value];\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? [...value, buttonValue] : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} ref={ref} role=\"group\" {...other}>\n      {React.Children.map(children, child => {\n        if (!React.isValidElement(child)) {\n          return null;\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (child.type === React.Fragment) {\n            console.error(\n              [\n                \"Material-UI: the ToggleButtonGroup component doesn't accept a Fragment as a child.\",\n                'Consider providing an array instead.',\n              ].join('\\n'),\n            );\n          }\n        }\n\n        const { selected: buttonSelected, value: buttonValue } = child.props;\n        const selected =\n          buttonSelected === undefined ? isValueSelected(buttonValue, value) : buttonSelected;\n\n        return React.cloneElement(child, {\n          className: clsx(\n            classes.grouped,\n            {\n              [classes[`groupedSize${capitalize(size)}`]]: size !== 'medium',\n            },\n            child.props.className,\n          ),\n          selected,\n          onChange: exclusive ? handleExclusiveChange : handleChange,\n          size,\n        });\n      })}\n    </div>\n  );\n});\n\nToggleButtonGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   */\n  exclusive: PropTypes.bool,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The size of the buttons.\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiToggleButtonGroup' })(ToggleButtonGroup);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/ToggleButtonGroup/ToggleButtonGroup.js",
      "inheritance": null,
      "usedInPages": [
        "/components/toggle-button"
      ]
    },
    "TreeView": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "defaultCollapseIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon used to collapse the node.",
          "tags": []
        },
        "defaultEndIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon displayed next to a end node. This is applied to all\ntree nodes and can be overridden by the TreeItem `icon` prop.",
          "tags": []
        },
        "defaultExpanded": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "Expanded node ids.",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "tags": []
        },
        "defaultExpandIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon used to expand the node.",
          "tags": []
        },
        "defaultParentIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The default icon displayed next to a parent node. This is applied to all\nparent nodes and can be overridden by the TreeItem `icon` prop.",
          "tags": []
        },
        "onNodeToggle": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when a `TreeItem` is expanded/collapsed.",
          "tags": [
            {
              "title": "param",
              "description": "The id of the toggled node.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "nodeId"
            },
            {
              "title": "param",
              "description": "The node status - If `true` the node was expanded. If `false` the node was collapsed.",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "expanded"
            }
          ]
        }
      },
      "name": "TreeView",
      "styles": {
        "classes": [
          "root"
        ],
        "name": "MuiTreeView",
        "descriptions": {
          "root": "Styles applied to the root element."
        },
        "globalClasses": {
          "root": "MuiTreeView-root"
        }
      },
      "src": "import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport TreeViewContext from './TreeViewContext';\nimport { withStyles } from '@material-ui/core/styles';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none',\n  },\n};\n\nconst defaultExpandedDefault = [];\n\nconst TreeView = React.forwardRef(function TreeView(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    defaultCollapseIcon,\n    defaultEndIcon,\n    defaultExpanded = defaultExpandedDefault,\n    defaultExpandIcon,\n    defaultParentIcon,\n    onNodeToggle,\n    ...other\n  } = props;\n  const [expanded, setExpanded] = React.useState(defaultExpanded);\n  const [tabable, setTabable] = React.useState(null);\n  const [focused, setFocused] = React.useState(null);\n  const firstNode = React.useRef(null);\n\n  const nodeMap = React.useRef({});\n  const firstCharMap = React.useRef({});\n\n  const isExpanded = React.useCallback(id => expanded.indexOf(id) !== -1, [expanded]);\n  const isTabable = id => tabable === id;\n  const isFocused = id => focused === id;\n\n  React.useEffect(() => {\n    nodeMap.current = {};\n    const childIds = React.Children.map(children, child => child.props.nodeId);\n    nodeMap.current[-1] = { parent: null, children: childIds };\n\n    (childIds || []).forEach((id, index) => {\n      if (index === 0) {\n        firstNode.current = id;\n        setTabable(id);\n      }\n      nodeMap.current[id] = { parent: null };\n    });\n  }, [children]);\n\n  const getLastNode = React.useCallback(\n    id => {\n      const map = nodeMap.current[id];\n      if (isExpanded(id) && map.children && map.children.length > 0) {\n        return getLastNode(map.children[map.children.length - 1]);\n      }\n      return id;\n    },\n    [isExpanded],\n  );\n\n  const focus = id => {\n    if (id) {\n      setTabable(id);\n    }\n    setFocused(id);\n  };\n\n  const getNextNode = (id, end) => {\n    const map = nodeMap.current[id];\n    const parent = nodeMap.current[map.parent];\n\n    if (!end) {\n      if (isExpanded(id)) {\n        return map.children[0];\n      }\n    }\n    if (parent) {\n      const nodeIndex = parent.children.indexOf(id);\n      const nextIndex = nodeIndex + 1;\n      if (parent.children.length > nextIndex) {\n        return parent.children[nextIndex];\n      }\n      return getNextNode(parent.id, true);\n    }\n    const topLevelNodes = nodeMap.current[-1].children;\n    const topLevelNodeIndex = topLevelNodes.indexOf(id);\n    if (topLevelNodeIndex !== -1 && topLevelNodeIndex !== topLevelNodes.length - 1) {\n      return topLevelNodes[topLevelNodeIndex + 1];\n    }\n\n    return null;\n  };\n\n  const getPreviousNode = id => {\n    const map = nodeMap.current[id];\n    const parent = nodeMap.current[map.parent];\n\n    if (parent) {\n      const nodeIndex = parent.children.indexOf(id);\n      if (nodeIndex !== 0) {\n        const nextIndex = nodeIndex - 1;\n        return getLastNode(parent.children[nextIndex]);\n      }\n      return parent.id;\n    }\n    const topLevelNodes = nodeMap.current[-1].children;\n    const topLevelNodeIndex = topLevelNodes.indexOf(id);\n    if (topLevelNodeIndex > 0) {\n      return getLastNode(topLevelNodes[topLevelNodeIndex - 1]);\n    }\n\n    return null;\n  };\n\n  const focusNextNode = id => {\n    const nextNode = getNextNode(id);\n    if (nextNode) {\n      focus(nextNode);\n    }\n  };\n  const focusPreviousNode = id => {\n    const previousNode = getPreviousNode(id);\n    if (previousNode) {\n      focus(previousNode);\n    }\n  };\n  const focusFirstNode = () => {\n    if (firstNode.current) {\n      focus(firstNode.current);\n    }\n  };\n\n  const focusLastNode = () => {\n    const topLevelNodes = nodeMap.current[-1].children;\n    const lastNode = getLastNode(topLevelNodes[topLevelNodes.length - 1]);\n    focus(lastNode);\n  };\n\n  const toggle = (value = focused) => {\n    setExpanded(prevExpanded => {\n      let newExpanded;\n\n      if (prevExpanded.indexOf(value) !== -1) {\n        newExpanded = prevExpanded.filter(id => id !== value);\n        setTabable(oldTabable => {\n          const map = nodeMap.current[oldTabable];\n          if (oldTabable && (map && map.parent ? map.parent.id : null) === value) {\n            return value;\n          }\n          return oldTabable;\n        });\n      } else {\n        newExpanded = [value, ...prevExpanded];\n      }\n\n      if (onNodeToggle) {\n        onNodeToggle(value, newExpanded.indexOf(value) !== -1);\n      }\n\n      return newExpanded;\n    });\n  };\n\n  const expandAllSiblings = id => {\n    const map = nodeMap.current[id];\n    const parent = nodeMap.current[map.parent];\n\n    let diff;\n    if (parent) {\n      diff = parent.children.filter(child => !isExpanded(child));\n    } else {\n      const topLevelNodes = nodeMap.current[-1].children;\n      diff = topLevelNodes.filter(node => !isExpanded(node));\n    }\n    setExpanded(oldExpanded => [...oldExpanded, ...diff]);\n  };\n\n  const handleLeftArrow = (id, event) => {\n    let flag = false;\n    if (isExpanded(id)) {\n      toggle(id);\n      flag = true;\n    } else {\n      const parent = nodeMap.current[id].parent;\n      if (parent) {\n        focus(parent);\n        flag = true;\n      }\n    }\n\n    if (flag && event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  const getIndexFirstChars = (firstChars, startIndex, char) => {\n    for (let i = startIndex; i < firstChars.length; i += 1) {\n      if (char === firstChars[i]) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  const setFocusByFirstCharacter = (id, char) => {\n    let start;\n    let index;\n    const lowercaseChar = char.toLowerCase();\n\n    const firstCharIds = [];\n    const firstChars = [];\n    // This really only works since the ids are strings\n    Object.entries(firstCharMap.current).forEach(([nodeId, firstChar]) => {\n      const map = nodeMap.current[nodeId];\n      const visible = map.parent ? isExpanded(map.parent) : true;\n\n      if (visible) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    });\n\n    // Get start index for search based on position of currentItem\n    start = firstCharIds.indexOf(id) + 1;\n    if (start === nodeMap.current.length) {\n      start = 0;\n    }\n\n    // Check remaining slots in the menu\n    index = getIndexFirstChars(firstChars, start, lowercaseChar);\n\n    // If not found in remaining slots, check from beginning\n    if (index === -1) {\n      index = getIndexFirstChars(firstChars, 0, lowercaseChar);\n    }\n\n    // If match was found...\n    if (index > -1) {\n      focus(firstCharIds[index]);\n    }\n  };\n\n  const handleNodeMap = (id, childrenIds) => {\n    const currentMap = nodeMap.current[id];\n    nodeMap.current[id] = { ...currentMap, children: childrenIds, id };\n    (childrenIds || []).forEach(childId => {\n      const currentChildMap = nodeMap.current[childId];\n      nodeMap.current[childId] = { ...currentChildMap, parent: id, id: childId };\n    });\n  };\n\n  const handleFirstChars = (id, firstChar) => {\n    firstCharMap.current[id] = firstChar;\n  };\n\n  return (\n    <TreeViewContext.Provider\n      value={{\n        expandAllSiblings,\n        focus,\n        focusFirstNode,\n        focusLastNode,\n        focusNextNode,\n        focusPreviousNode,\n        handleFirstChars,\n        handleLeftArrow,\n        handleNodeMap,\n        icons: { defaultCollapseIcon, defaultExpandIcon, defaultParentIcon, defaultEndIcon },\n        isExpanded,\n        isFocused,\n        isTabable,\n        setFocusByFirstCharacter,\n        toggle,\n      }}\n    >\n      <ul role=\"tree\" className={clsx(classes.root, className)} ref={ref} {...other}>\n        {children}\n      </ul>\n    </TreeViewContext.Provider>\n  );\n});\n\nTreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n  /**\n   * Expanded node ids.\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n  /**\n   * Callback fired when a `TreeItem` is expanded/collapsed.\n   *\n   * @param {string} nodeId The id of the toggled node.\n   * @param {boolean} expanded The node status - If `true` the node was expanded. If `false` the node was collapsed.\n   */\n  onNodeToggle: PropTypes.func,\n};\n\nexport default withStyles(styles, { name: 'MuiTreeView' })(TreeView);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLUListElement",
      "filename": "/packages/material-ui-lab/src/TreeView/TreeView.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tree-view"
      ]
    },
    "Button": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The content of the button.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableFocusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
          "tags": []
        },
        "endIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Element placed after the children.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the button will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "href": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "startIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Element placed before the children.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'contained'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Button",
      "styles": {
        "classes": [
          "root",
          "label",
          "text",
          "textPrimary",
          "textSecondary",
          "outlined",
          "outlinedPrimary",
          "outlinedSecondary",
          "contained",
          "containedPrimary",
          "containedSecondary",
          "focusVisible",
          "disabled",
          "colorInherit",
          "textSizeSmall",
          "textSizeLarge",
          "outlinedSizeSmall",
          "outlinedSizeLarge",
          "containedSizeSmall",
          "containedSizeLarge",
          "sizeSmall",
          "sizeLarge",
          "fullWidth",
          "startIcon",
          "endIcon",
          "iconSizeSmall",
          "iconSizeMedium",
          "iconSizeLarge"
        ],
        "name": "MuiButton",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "label": "Styles applied to the span element that wraps the children.",
          "text": "Styles applied to the root element if `variant=\"text\"`.",
          "textPrimary": "Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.",
          "textSecondary": "Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.",
          "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
          "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
          "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
          "contained": "Styles applied to the root element if `variant=\"contained\"`.",
          "containedPrimary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`.",
          "containedSecondary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`.",
          "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
          "textSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`.",
          "textSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`.",
          "outlinedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`.",
          "outlinedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`.",
          "containedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`.",
          "containedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "startIcon": "Styles applied to the startIcon element if supplied.",
          "endIcon": "Styles applied to the endIcon element if supplied.",
          "iconSizeSmall": "Styles applied to the icon element if supplied and `size=\"small\"`.",
          "iconSizeMedium": "Styles applied to the icon element if supplied and `size=\"medium\"`.",
          "iconSizeLarge": "Styles applied to the icon element if supplied and `size=\"large\"`."
        },
        "globalClasses": {
          "root": "MuiButton-root",
          "label": "MuiButton-label",
          "text": "MuiButton-text",
          "textPrimary": "MuiButton-textPrimary",
          "textSecondary": "MuiButton-textSecondary",
          "outlined": "MuiButton-outlined",
          "outlinedPrimary": "MuiButton-outlinedPrimary",
          "outlinedSecondary": "MuiButton-outlinedSecondary",
          "contained": "MuiButton-contained",
          "containedPrimary": "MuiButton-containedPrimary",
          "containedSecondary": "MuiButton-containedSecondary",
          "focusVisible": "Mui-focusVisible",
          "disabled": "Mui-disabled",
          "colorInherit": "MuiButton-colorInherit",
          "textSizeSmall": "MuiButton-textSizeSmall",
          "textSizeLarge": "MuiButton-textSizeLarge",
          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
          "containedSizeSmall": "MuiButton-containedSizeSmall",
          "containedSizeLarge": "MuiButton-containedSizeLarge",
          "sizeSmall": "MuiButton-sizeSmall",
          "sizeLarge": "MuiButton-sizeLarge",
          "fullWidth": "MuiButton-fullWidth",
          "startIcon": "MuiButton-startIcon",
          "endIcon": "MuiButton-endIcon",
          "iconSizeSmall": "MuiButton-iconSizeSmall",
          "iconSizeMedium": "MuiButton-iconSizeMedium",
          "iconSizeLarge": "MuiButton-iconSizeLarge"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    ...theme.typography.button,\n    boxSizing: 'border-box',\n    minWidth: 64,\n    padding: '6px 16px',\n    borderRadius: theme.shape.borderRadius,\n    color: theme.palette.text.primary,\n    transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n      duration: theme.transitions.duration.short,\n    }),\n    '&:hover': {\n      textDecoration: 'none',\n      backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n      '&$disabled': {\n        backgroundColor: 'transparent',\n      },\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n    },\n  },\n  /* Styles applied to the span element that wraps the children. */\n  label: {\n    width: '100%', // Ensure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit',\n  },\n  /* Styles applied to the root element if `variant=\"text\"`. */\n  text: {\n    padding: '6px 8px',\n  },\n  /* Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`. */\n  textPrimary: {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`. */\n  textSecondary: {\n    color: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Styles applied to the root element if `variant=\"outlined\"`. */\n  outlined: {\n    padding: '5px 15px',\n    border: `1px solid ${\n      theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'\n    }`,\n    '&$disabled': {\n      border: `1px solid ${theme.palette.action.disabled}`,\n    },\n  },\n  /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n  outlinedPrimary: {\n    color: theme.palette.primary.main,\n    border: `1px solid ${fade(theme.palette.primary.main, 0.5)}`,\n    '&:hover': {\n      border: `1px solid ${theme.palette.primary.main}`,\n      backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n  },\n  /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n  outlinedSecondary: {\n    color: theme.palette.secondary.main,\n    border: `1px solid ${fade(theme.palette.secondary.main, 0.5)}`,\n    '&:hover': {\n      border: `1px solid ${theme.palette.secondary.main}`,\n      backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent',\n      },\n    },\n    '&$disabled': {\n      border: `1px solid ${theme.palette.action.disabled}`,\n    },\n  },\n  /* Styles applied to the root element if `variant=\"contained\"`. */\n  contained: {\n    color: theme.palette.getContrastText(theme.palette.grey[300]),\n    backgroundColor: theme.palette.grey[300],\n    boxShadow: theme.shadows[2],\n    '&:hover': {\n      backgroundColor: theme.palette.grey.A100,\n      boxShadow: theme.shadows[4],\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        boxShadow: theme.shadows[2],\n        backgroundColor: theme.palette.grey[300],\n      },\n      '&$disabled': {\n        backgroundColor: theme.palette.action.disabledBackground,\n      },\n    },\n    '&$focusVisible': {\n      boxShadow: theme.shadows[6],\n    },\n    '&:active': {\n      boxShadow: theme.shadows[8],\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n      boxShadow: theme.shadows[0],\n      backgroundColor: theme.palette.action.disabledBackground,\n    },\n  },\n  /* Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`. */\n  containedPrimary: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.primary.main,\n      },\n    },\n  },\n  /* Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`. */\n  containedSecondary: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.secondary.main,\n      },\n    },\n  },\n  /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n  focusVisible: {},\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit',\n    borderColor: 'currentColor',\n  },\n  /* Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`. */\n  textSizeSmall: {\n    padding: '4px 5px',\n    fontSize: theme.typography.pxToRem(13),\n  },\n  /* Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`. */\n  textSizeLarge: {\n    padding: '8px 11px',\n    fontSize: theme.typography.pxToRem(15),\n  },\n  /* Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`. */\n  outlinedSizeSmall: {\n    padding: '3px 9px',\n    fontSize: theme.typography.pxToRem(13),\n  },\n  /* Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`. */\n  outlinedSizeLarge: {\n    padding: '7px 21px',\n    fontSize: theme.typography.pxToRem(15),\n  },\n  /* Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`. */\n  containedSizeSmall: {\n    padding: '4px 10px',\n    fontSize: theme.typography.pxToRem(13),\n  },\n  /* Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`. */\n  containedSizeLarge: {\n    padding: '8px 22px',\n    fontSize: theme.typography.pxToRem(15),\n  },\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {},\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {},\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%',\n  },\n  /* Styles applied to the startIcon element if supplied. */\n  startIcon: {\n    display: 'inherit',\n    marginRight: 8,\n    marginLeft: -4,\n    '&$iconSizeSmall': {\n      marginLeft: -2,\n    },\n  },\n  /* Styles applied to the endIcon element if supplied. */\n  endIcon: {\n    display: 'inherit',\n    marginRight: -4,\n    marginLeft: 8,\n    '&$iconSizeSmall': {\n      marginRight: -2,\n    },\n  },\n  /* Styles applied to the icon element if supplied and `size=\"small\"`. */\n  iconSizeSmall: {\n    '& > *:first-child': {\n      fontSize: 18,\n    },\n  },\n  /* Styles applied to the icon element if supplied and `size=\"medium\"`. */\n  iconSizeMedium: {\n    '& > *:first-child': {\n      fontSize: 20,\n    },\n  },\n  /* Styles applied to the icon element if supplied and `size=\"large\"`. */\n  iconSizeLarge: {\n    '& > *:first-child': {\n      fontSize: 22,\n    },\n  },\n});\n\nconst Button = React.forwardRef(function Button(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'default',\n    component = 'button',\n    disabled = false,\n    disableFocusRipple = false,\n    endIcon: endIconProp,\n    focusVisibleClassName,\n    fullWidth = false,\n    size = 'medium',\n    startIcon: startIconProp,\n    type = 'button',\n    variant = 'text',\n    ...other\n  } = props;\n\n  const startIcon = startIconProp && (\n    <span className={clsx(classes.startIcon, classes[`iconSize${capitalize(size)}`])}>\n      {startIconProp}\n    </span>\n  );\n  const endIcon = endIconProp && (\n    <span className={clsx(classes.endIcon, classes[`iconSize${capitalize(size)}`])}>\n      {endIconProp}\n    </span>\n  );\n\n  return (\n    <ButtonBase\n      className={clsx(\n        classes.root,\n        classes[variant],\n        {\n          [classes[`${variant}${capitalize(color)}`]]: color !== 'default' && color !== 'inherit',\n          [classes[`${variant}Size${capitalize(size)}`]]: size !== 'medium',\n          [classes[`size${capitalize(size)}`]]: size !== 'medium',\n          [classes.disabled]: disabled,\n          [classes.fullWidth]: fullWidth,\n          [classes.colorInherit]: color === 'inherit',\n        },\n        className,\n      )}\n      component={component}\n      disabled={disabled}\n      focusRipple={!disableFocusRipple}\n      focusVisibleClassName={clsx(classes.focusVisible, focusVisibleClassName)}\n      ref={ref}\n      type={type}\n      {...other}\n    >\n      <span className={classes.label}>\n        {startIcon}\n        {children}\n        {endIcon}\n      </span>\n    </ButtonBase>\n  );\n});\n\nButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `focusVisibleClassName`.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * Element placed after the children.\n   */\n  endIcon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * Element placed before the children.\n   */\n  startIcon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained']),\n};\n\nexport default withStyles(styles, { name: 'MuiButton' })(Button);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/Button/Button.js",
      "inheritance": {
        "component": "ButtonBase",
        "pathname": "/api/button-base"
      },
      "usedInPages": [
        "/components/buttons"
      ]
    },
    "Collapse": {
      "description": "The Collapse transition is used by the\n[Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content node to be collapsed.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "collapsedHeight": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The height of the container when collapsed.",
          "defaultValue": {
            "value": "'0px'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will transition in.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "duration.standard",
            "computed": true
          },
          "tags": []
        }
      },
      "name": "Collapse",
      "styles": {
        "classes": [
          "container",
          "entered",
          "hidden",
          "wrapper",
          "wrapperInner"
        ],
        "name": "MuiCollapse",
        "descriptions": {
          "container": "Styles applied to the container element.",
          "entered": "Styles applied to the container element when the transition has entered.",
          "hidden": "Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px.",
          "wrapper": "Styles applied to the outer wrapper element.",
          "wrapperInner": "Styles applied to the inner wrapper element."
        },
        "globalClasses": {
          "container": "MuiCollapse-container",
          "entered": "MuiCollapse-entered",
          "hidden": "MuiCollapse-hidden",
          "wrapper": "MuiCollapse-wrapper",
          "wrapperInner": "MuiCollapse-wrapperInner"
        }
      },
      "src": "import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport { getTransitionProps } from '../transitions/utils';\nimport useTheme from '../styles/useTheme';\n\nexport const styles = theme => ({\n  /* Styles applied to the container element. */\n  container: {\n    height: 0,\n    overflow: 'hidden',\n    transition: theme.transitions.create('height'),\n  },\n  /* Styles applied to the container element when the transition has entered. */\n  entered: {\n    height: 'auto',\n    overflow: 'visible',\n  },\n  /* Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px. */\n  hidden: {\n    visibility: 'hidden',\n  },\n  /* Styles applied to the outer wrapper element. */\n  wrapper: {\n    // Hack to get children with a negative margin to not falsify the height computation.\n    display: 'flex',\n  },\n  /* Styles applied to the inner wrapper element. */\n  wrapperInner: {\n    width: '100%',\n  },\n});\n\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\nconst Collapse = React.forwardRef(function Collapse(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    collapsedHeight = '0px',\n    component: Component = 'div',\n    in: inProp,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExiting,\n    style,\n    timeout = duration.standard,\n    ...other\n  } = props;\n  const theme = useTheme();\n  const timer = React.useRef();\n  const wrapperRef = React.useRef(null);\n  const autoTransitionDuration = React.useRef();\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  const handleEnter = (node, isAppearing) => {\n    node.style.height = collapsedHeight;\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleEntering = (node, isAppearing) => {\n    const wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n\n    const { duration: transitionDuration } = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'enter',\n      },\n    );\n\n    if (timeout === 'auto') {\n      const duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = `${duration2}ms`;\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration =\n        typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;\n    }\n\n    node.style.height = `${wrapperHeight}px`;\n\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  };\n\n  const handleEntered = (node, isAppearing) => {\n    node.style.height = 'auto';\n\n    if (onEntered) {\n      onEntered(node, isAppearing);\n    }\n  };\n\n  const handleExit = node => {\n    const wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n    node.style.height = `${wrapperHeight}px`;\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  const handleExiting = node => {\n    const wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n\n    const { duration: transitionDuration } = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'exit',\n      },\n    );\n\n    if (timeout === 'auto') {\n      const duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = `${duration2}ms`;\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration =\n        typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;\n    }\n\n    node.style.height = collapsedHeight;\n\n    if (onExiting) {\n      onExiting(node);\n    }\n  };\n\n  const addEndListener = (_, next) => {\n    if (timeout === 'auto') {\n      timer.current = setTimeout(next, autoTransitionDuration.current || 0);\n    }\n  };\n\n  return (\n    <Transition\n      in={inProp}\n      onEnter={handleEnter}\n      onEntered={handleEntered}\n      onEntering={handleEntering}\n      onExit={handleExit}\n      onExiting={handleExiting}\n      addEndListener={addEndListener}\n      timeout={timeout === 'auto' ? null : timeout}\n      {...other}\n    >\n      {(state, childProps) => (\n        <Component\n          className={clsx(\n            classes.container,\n            {\n              [classes.entered]: state === 'entered',\n              [classes.hidden]: state === 'exited' && !inProp && collapsedHeight === '0px',\n            },\n            className,\n          )}\n          style={{\n            minHeight: collapsedHeight,\n            ...style,\n          }}\n          ref={ref}\n          {...childProps}\n        >\n          <div className={classes.wrapper} ref={wrapperRef}>\n            <div className={classes.wrapperInner}>{children}</div>\n          </div>\n        </Component>\n      )}\n    </Transition>\n  );\n});\n\nCollapse.propTypes = {\n  /**\n   * The content node to be collapsed.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The height of the container when collapsed.\n   */\n  collapsedHeight: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  timeout: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n    PropTypes.oneOf(['auto']),\n  ]),\n};\n\nCollapse.muiSupportAuto = true;\n\nexport default withStyles(styles, { name: 'MuiCollapse' })(Collapse);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Collapse/Collapse.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/cards",
        "/components/lists",
        "/components/transitions"
      ]
    },
    "Drawer": {
      "description": "The props of the [Modal](/api/modal/) component are available\nwhen `variant=\"temporary\"` is set.",
      "methods": [],
      "props": {
        "anchor": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Side from which the drawer will appear.",
          "defaultValue": {
            "value": "'left'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The contents of the drawer.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "elevation": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The elevation of the drawer.",
          "defaultValue": {
            "value": "16",
            "computed": false
          },
          "tags": []
        },
        "ModalProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Modal`](/api/modal/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the drawer is open.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "PaperProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Paper`](/api/paper/) element.",
          "tags": []
        },
        "SlideProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Slide`](/api/slide/) element.",
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'permanent'",
                "computed": false
              },
              {
                "value": "'persistent'",
                "computed": false
              },
              {
                "value": "'temporary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'temporary'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Drawer",
      "styles": {
        "classes": [
          "root",
          "docked",
          "paper",
          "paperAnchorLeft",
          "paperAnchorRight",
          "paperAnchorTop",
          "paperAnchorBottom",
          "paperAnchorDockedLeft",
          "paperAnchorDockedTop",
          "paperAnchorDockedRight",
          "paperAnchorDockedBottom",
          "modal"
        ],
        "name": "MuiDrawer",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "docked": "Styles applied to the root element if `variant=\"permanent or persistent\"`.",
          "paper": "Styles applied to the `Paper` component.",
          "paperAnchorLeft": "Styles applied to the `Paper` component if `anchor=\"left\"`.",
          "paperAnchorRight": "Styles applied to the `Paper` component if `anchor=\"right\"`.",
          "paperAnchorTop": "Styles applied to the `Paper` component if `anchor=\"top\"`.",
          "paperAnchorBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"`.",
          "paperAnchorDockedLeft": "Styles applied to the `Paper` component if `anchor=\"left\"` and `variant` is not \"temporary\".",
          "paperAnchorDockedTop": "Styles applied to the `Paper` component if `anchor=\"top\"` and `variant` is not \"temporary\".",
          "paperAnchorDockedRight": "Styles applied to the `Paper` component if `anchor=\"right\"` and `variant` is not \"temporary\".",
          "paperAnchorDockedBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"` and `variant` is not \"temporary\".",
          "modal": "Styles applied to the `Modal` component."
        },
        "globalClasses": {
          "root": "MuiDrawer-root",
          "docked": "MuiDrawer-docked",
          "paper": "MuiDrawer-paper",
          "paperAnchorLeft": "MuiDrawer-paperAnchorLeft",
          "paperAnchorRight": "MuiDrawer-paperAnchorRight",
          "paperAnchorTop": "MuiDrawer-paperAnchorTop",
          "paperAnchorBottom": "MuiDrawer-paperAnchorBottom",
          "paperAnchorDockedLeft": "MuiDrawer-paperAnchorDockedLeft",
          "paperAnchorDockedTop": "MuiDrawer-paperAnchorDockedTop",
          "paperAnchorDockedRight": "MuiDrawer-paperAnchorDockedRight",
          "paperAnchorDockedBottom": "MuiDrawer-paperAnchorDockedBottom",
          "modal": "MuiDrawer-modal"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Modal from '../Modal';\nimport Backdrop from '../Backdrop';\nimport withStyles from '../styles/withStyles';\nimport Slide from '../Slide';\nimport Paper from '../Paper';\nimport capitalize from '../utils/capitalize';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the root element if `variant=\"permanent or persistent\"`. */\n  docked: {\n    flex: '0 0 auto',\n  },\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    overflowY: 'auto',\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    flex: '1 0 auto',\n    zIndex: theme.zIndex.drawer,\n    WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.\n    // temporary style\n    position: 'fixed',\n    top: 0,\n    // We disable the focus ring for mouse, touch and keyboard users.\n    // At some point, it would be better to keep it for keyboard users.\n    // :focus-ring CSS pseudo-class will help.\n    outline: 0,\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"left\"`. */\n  paperAnchorLeft: {\n    left: 0,\n    right: 'auto',\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"right\"`. */\n  paperAnchorRight: {\n    left: 'auto',\n    right: 0,\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"top\"`. */\n  paperAnchorTop: {\n    top: 0,\n    left: 0,\n    bottom: 'auto',\n    right: 0,\n    height: 'auto',\n    maxHeight: '100%',\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"bottom\"`. */\n  paperAnchorBottom: {\n    top: 'auto',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 'auto',\n    maxHeight: '100%',\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"left\"` and `variant` is not \"temporary\". */\n  paperAnchorDockedLeft: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"top\"` and `variant` is not \"temporary\". */\n  paperAnchorDockedTop: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"right\"` and `variant` is not \"temporary\". */\n  paperAnchorDockedRight: {\n    borderLeft: `1px solid ${theme.palette.divider}`,\n  },\n  /* Styles applied to the `Paper` component if `anchor=\"bottom\"` and `variant` is not \"temporary\". */\n  paperAnchorDockedBottom: {\n    borderTop: `1px solid ${theme.palette.divider}`,\n  },\n  /* Styles applied to the `Modal` component. */\n  modal: {},\n});\n\nconst oppositeDirection = {\n  left: 'right',\n  right: 'left',\n  top: 'down',\n  bottom: 'up',\n};\n\nexport function isHorizontal(anchor) {\n  return ['left', 'right'].indexOf(anchor) !== -1;\n}\n\nexport function getAnchor(theme, anchor) {\n  return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;\n}\n\nconst defaultTransitionDuration = { enter: duration.enteringScreen, exit: duration.leavingScreen };\n/**\n * The props of the [Modal](/api/modal/) component are available\n * when `variant=\"temporary\"` is set.\n */\nconst Drawer = React.forwardRef(function Drawer(props, ref) {\n  const {\n    anchor: anchorProp = 'left',\n    BackdropProps,\n    children,\n    classes,\n    className,\n    elevation = 16,\n    ModalProps: { BackdropProps: BackdropPropsProp, ...ModalProps } = {},\n    onClose,\n    open = false,\n    PaperProps,\n    SlideProps,\n    transitionDuration = defaultTransitionDuration,\n    variant = 'temporary',\n    ...other\n  } = props;\n  const theme = useTheme();\n\n  // Let's assume that the Drawer will always be rendered on user space.\n  // We use this state is order to skip the appear transition during the\n  // initial mount of the component.\n  const mounted = React.useRef(false);\n  React.useEffect(() => {\n    mounted.current = true;\n  }, []);\n\n  const anchor = getAnchor(theme, anchorProp);\n  const drawer = (\n    <Paper\n      elevation={variant === 'temporary' ? elevation : 0}\n      square\n      className={clsx(classes.paper, classes[`paperAnchor${capitalize(anchor)}`], {\n        [classes[`paperAnchorDocked${capitalize(anchor)}`]]: variant !== 'temporary',\n      })}\n      {...PaperProps}\n    >\n      {children}\n    </Paper>\n  );\n\n  if (variant === 'permanent') {\n    return (\n      <div className={clsx(classes.root, classes.docked, className)} ref={ref} {...other}>\n        {drawer}\n      </div>\n    );\n  }\n\n  const slidingDrawer = (\n    <Slide\n      in={open}\n      direction={oppositeDirection[anchor]}\n      timeout={transitionDuration}\n      appear={mounted.current}\n      {...SlideProps}\n    >\n      {drawer}\n    </Slide>\n  );\n\n  if (variant === 'persistent') {\n    return (\n      <div className={clsx(classes.root, classes.docked, className)} ref={ref} {...other}>\n        {slidingDrawer}\n      </div>\n    );\n  }\n\n  // variant === temporary\n  return (\n    <Modal\n      BackdropProps={{\n        ...BackdropProps,\n        ...BackdropPropsProp,\n        transitionDuration,\n      }}\n      BackdropComponent={Backdrop}\n      className={clsx(classes.root, classes.modal, className)}\n      open={open}\n      onClose={onClose}\n      ref={ref}\n      {...other}\n      {...ModalProps}\n    >\n      {slidingDrawer}\n    </Modal>\n  );\n});\n\nDrawer.propTypes = {\n  /**\n   * Side from which the drawer will appear.\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']),\n  /**\n   * @ignore\n   */\n  BackdropProps: PropTypes.object,\n  /**\n   * The contents of the drawer.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The elevation of the drawer.\n   */\n  elevation: PropTypes.number,\n  /**\n   * Props applied to the [`Modal`](/api/modal/) element.\n   */\n  ModalProps: PropTypes.object,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: PropTypes.bool,\n  /**\n   * Props applied to the [`Paper`](/api/paper/) element.\n   */\n  PaperProps: PropTypes.object,\n  /**\n   * Props applied to the [`Slide`](/api/slide/) element.\n   */\n  SlideProps: PropTypes.object,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary']),\n};\n\nexport default withStyles(styles, { name: 'MuiDrawer', flip: false })(Drawer);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Drawer/Drawer.js",
      "inheritance": null,
      "usedInPages": [
        "/components/drawers"
      ]
    },
    "FormControl": {
      "description": "Provides context such as filled/focused/error/required for form inputs.\nRelying on the context provides high flexibility and ensures that the state always stays\nconsistent across the children of the `FormControl`.\nThis context is used by the following components:\n\n - FormLabel\n - FormHelperText\n - Input\n - InputLabel\n\nYou can find one composition example below and more going to [the demos](/components/text-fields/#components).\n\n```jsx\n<FormControl>\n  <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n  <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n  <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n</FormControl>\n```\n\n⚠️Only one input can be used within a FormControl.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The contents of the form control.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label, input and helper text should be displayed in a disabled state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label should be displayed in an error state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "hiddenLabel": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will be hidden.\nThis is used to increase density for a `FilledInput`.\nBe sure to add `aria-label` to the `input` element.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'none'",
                "computed": false
              },
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'normal'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
          "defaultValue": {
            "value": "'none'",
            "computed": false
          },
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the label will indicate that the input is required.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "FormControl",
      "styles": {
        "classes": [
          "root",
          "marginNormal",
          "marginDense",
          "fullWidth"
        ],
        "name": "MuiFormControl",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "marginNormal": "Styles applied to the root element if `margin=\"normal\"`.",
          "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`."
        },
        "globalClasses": {
          "root": "MuiFormControl-root",
          "marginNormal": "MuiFormControl-marginNormal",
          "marginDense": "MuiFormControl-marginDense",
          "fullWidth": "MuiFormControl-fullWidth"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top', // Fix alignment issue on Safari.\n  },\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4,\n  },\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%',\n  },\n};\n\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️Only one input can be used within a FormControl.\n */\nconst FormControl = React.forwardRef(function FormControl(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'div',\n    disabled = false,\n    error = false,\n    fullWidth = false,\n    hiddenLabel = false,\n    margin = 'none',\n    color = 'primary',\n    required = false,\n    variant = 'standard',\n    ...other\n  } = props;\n\n  const [adornedStart, setAdornedStart] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n    return initialAdornedStart;\n  });\n\n  const [filled, setFilled] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  });\n\n  const [focused, setFocused] = React.useState(false);\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  let registerEffect;\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(\n          [\n            'Material-UI: there are multiple InputBase components inside a FormControl.',\n            'This is not supported. It might cause infinite rendering loops.',\n            'Only use one InputBase.',\n          ].join('\\n'),\n        );\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const onFilled = React.useCallback(() => {\n    setFilled(true);\n  }, []);\n\n  const onEmpty = React.useCallback(() => {\n    setFilled(false);\n  }, []);\n\n  const childContext = {\n    adornedStart,\n    setAdornedStart,\n    color,\n    disabled,\n    error,\n    filled,\n    focused,\n    hiddenLabel,\n    margin,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onEmpty,\n    onFilled,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    variant,\n  };\n\n  return (\n    <FormControlContext.Provider value={childContext}>\n      <Component\n        className={clsx(\n          classes.root,\n          {\n            [classes[`margin${capitalize(margin)}`]]: margin !== 'none',\n            [classes.fullWidth]: fullWidth,\n          },\n          className,\n        )}\n        ref={ref}\n        {...other}\n      >\n        {children}\n      </Component>\n    </FormControlContext.Provider>\n  );\n});\n\nFormControl.propTypes = {\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the component will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   */\n  hiddenLabel: PropTypes.bool,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n\nexport default withStyles(styles, { name: 'MuiFormControl' })(FormControl);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/FormControl/FormControl.js",
      "inheritance": null,
      "usedInPages": [
        "/components/checkboxes",
        "/components/radio-buttons",
        "/components/switches",
        "/components/text-fields"
      ]
    },
    "Grow": {
      "description": "The Grow transition is used by the [Tooltip](/components/tooltips/) and\n[Popover](/components/popover/) components.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, show the component; triggers the enter or exit animation.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Grow",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport useTheme from '../styles/useTheme';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getScale(value) {\n  return `scale(${value}, ${value ** 2})`;\n}\n\nconst styles = {\n  entering: {\n    opacity: 1,\n    transform: getScale(1),\n  },\n  entered: {\n    opacity: 1,\n    transform: 'none',\n  },\n};\n\n/**\n * The Grow transition is used by the [Tooltip](/components/tooltips/) and\n * [Popover](/components/popover/) components.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\nconst Grow = React.forwardRef(function Grow(props, ref) {\n  const { children, in: inProp, onEnter, onExit, style, timeout = 'auto', ...other } = props;\n  const timer = React.useRef();\n  const autoTimeout = React.useRef();\n  const handleRef = useForkRef(children.ref, ref);\n  const theme = useTheme();\n\n  const handleEnter = (node, isAppearing) => {\n    reflow(node); // So the animation always start from the start.\n\n    const { duration: transitionDuration, delay } = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'enter',\n      },\n    );\n\n    let duration;\n    if (timeout === 'auto') {\n      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);\n      autoTimeout.current = duration;\n    } else {\n      duration = transitionDuration;\n    }\n\n    node.style.transition = [\n      theme.transitions.create('opacity', {\n        duration,\n        delay,\n      }),\n      theme.transitions.create('transform', {\n        duration: duration * 0.666,\n        delay,\n      }),\n    ].join(',');\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleExit = node => {\n    const { duration: transitionDuration, delay } = getTransitionProps(\n      { style, timeout },\n      {\n        mode: 'exit',\n      },\n    );\n\n    let duration;\n    if (timeout === 'auto') {\n      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);\n      autoTimeout.current = duration;\n    } else {\n      duration = transitionDuration;\n    }\n\n    node.style.transition = [\n      theme.transitions.create('opacity', {\n        duration,\n        delay,\n      }),\n      theme.transitions.create('transform', {\n        duration: duration * 0.666,\n        delay: delay || duration * 0.333,\n      }),\n    ].join(',');\n\n    node.style.opacity = '0';\n    node.style.transform = getScale(0.75);\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  const addEndListener = (_, next) => {\n    if (timeout === 'auto') {\n      timer.current = setTimeout(next, autoTimeout.current || 0);\n    }\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  return (\n    <Transition\n      appear\n      in={inProp}\n      onEnter={handleEnter}\n      onExit={handleExit}\n      addEndListener={addEndListener}\n      timeout={timeout === 'auto' ? null : timeout}\n      {...other}\n    >\n      {(state, childProps) => {\n        return React.cloneElement(children, {\n          style: {\n            opacity: 0,\n            transform: getScale(0.75),\n            visibility: state === 'exited' && !inProp ? 'hidden' : undefined,\n            ...styles[state],\n            ...style,\n            ...children.props.style,\n          },\n          ref: handleRef,\n          ...childProps,\n        });\n      }}\n    </Transition>\n  );\n});\n\nGrow.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.element,\n  /**\n   * If `true`, show the component; triggers the enter or exit animation.\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  timeout: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n    PropTypes.oneOf(['auto']),\n  ]),\n};\n\nGrow.muiSupportAuto = true;\n\nexport default Grow;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Grow/Grow.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/popover",
        "/components/transitions"
      ]
    },
    "LinearProgress": {
      "description": "## ARIA\n\nIf the progress bar is describing the loading progress of a particular region of a page,\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\nattribute to `true` on that region until it has finished loading.",
      "methods": [],
      "props": {
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The value of the progress indicator for the determinate and buffer variants.\nValue between 0 and 100.",
          "tags": []
        },
        "valueBuffer": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The value for the buffer variant.\nValue between 0 and 100.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'determinate'",
                "computed": false
              },
              {
                "value": "'indeterminate'",
                "computed": false
              },
              {
                "value": "'buffer'",
                "computed": false
              },
              {
                "value": "'query'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.\nUse indeterminate or query when there is no progress value.",
          "defaultValue": {
            "value": "'indeterminate'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "LinearProgress",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "determinate",
          "indeterminate",
          "buffer",
          "query",
          "dashed",
          "dashedColorPrimary",
          "dashedColorSecondary",
          "bar",
          "barColorPrimary",
          "barColorSecondary",
          "bar1Indeterminate",
          "bar1Determinate",
          "bar1Buffer",
          "bar2Indeterminate",
          "bar2Buffer"
        ],
        "name": "MuiLinearProgress",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root and bar2 element if `color=\"primary\"`; bar2 if `variant-\"buffer\"`.",
          "colorSecondary": "Styles applied to the root and bar2 elements if `color=\"secondary\"`; bar2 if `variant=\"buffer\"`.",
          "determinate": "Styles applied to the root element if `variant=\"determinate\"`.",
          "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
          "buffer": "Styles applied to the root element if `variant=\"buffer\"`.",
          "query": "Styles applied to the root element if `variant=\"query\"`.",
          "dashed": "Styles applied to the additional bar element if `variant=\"buffer\"`.",
          "dashedColorPrimary": "Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"primary\"`.",
          "dashedColorSecondary": "Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"secondary\"`.",
          "bar": "Styles applied to the layered bar1 and bar2 elements.",
          "barColorPrimary": "Styles applied to the bar elements if `color=\"primary\"`; bar2 if `variant` not \"buffer\".",
          "barColorSecondary": "Styles applied to the bar elements if `color=\"secondary\"`; bar2 if `variant` not \"buffer\".",
          "bar1Indeterminate": "Styles applied to the bar1 element if `variant=\"indeterminate or query\"`.",
          "bar1Determinate": "Styles applied to the bar1 element if `variant=\"determinate\"`.",
          "bar1Buffer": "Styles applied to the bar1 element if `variant=\"buffer\"`.",
          "bar2Indeterminate": "Styles applied to the bar2 element if `variant=\"indeterminate or query\"`.",
          "bar2Buffer": "Styles applied to the bar2 element if `variant=\"buffer\"`."
        },
        "globalClasses": {
          "root": "MuiLinearProgress-root",
          "colorPrimary": "MuiLinearProgress-colorPrimary",
          "colorSecondary": "MuiLinearProgress-colorSecondary",
          "determinate": "MuiLinearProgress-determinate",
          "indeterminate": "MuiLinearProgress-indeterminate",
          "buffer": "MuiLinearProgress-buffer",
          "query": "MuiLinearProgress-query",
          "dashed": "MuiLinearProgress-dashed",
          "dashedColorPrimary": "MuiLinearProgress-dashedColorPrimary",
          "dashedColorSecondary": "MuiLinearProgress-dashedColorSecondary",
          "bar": "MuiLinearProgress-bar",
          "barColorPrimary": "MuiLinearProgress-barColorPrimary",
          "barColorSecondary": "MuiLinearProgress-barColorSecondary",
          "bar1Indeterminate": "MuiLinearProgress-bar1Indeterminate",
          "bar1Determinate": "MuiLinearProgress-bar1Determinate",
          "bar1Buffer": "MuiLinearProgress-bar1Buffer",
          "bar2Indeterminate": "MuiLinearProgress-bar2Indeterminate",
          "bar2Buffer": "MuiLinearProgress-bar2Buffer"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { darken, lighten } from '../styles/colorManipulator';\nimport useTheme from '../styles/useTheme';\n\nconst TRANSITION_DURATION = 4; // seconds\n\nexport const styles = theme => {\n  const getColor = color =>\n    theme.palette.type === 'light' ? lighten(color, 0.62) : darken(color, 0.5);\n\n  const backgroundPrimary = getColor(theme.palette.primary.main);\n  const backgroundSecondary = getColor(theme.palette.secondary.main);\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      overflow: 'hidden',\n      height: 4,\n    },\n    /* Styles applied to the root and bar2 element if `color=\"primary\"`; bar2 if `variant-\"buffer\"`. */\n    colorPrimary: {\n      backgroundColor: backgroundPrimary,\n    },\n    /* Styles applied to the root and bar2 elements if `color=\"secondary\"`; bar2 if `variant=\"buffer\"`. */\n    colorSecondary: {\n      backgroundColor: backgroundSecondary,\n    },\n    /* Styles applied to the root element if `variant=\"determinate\"`. */\n    determinate: {},\n    /* Styles applied to the root element if `variant=\"indeterminate\"`. */\n    indeterminate: {},\n    /* Styles applied to the root element if `variant=\"buffer\"`. */\n    buffer: {\n      backgroundColor: 'transparent',\n    },\n    /* Styles applied to the root element if `variant=\"query\"`. */\n    query: {\n      transform: 'rotate(180deg)',\n    },\n    /* Styles applied to the additional bar element if `variant=\"buffer\"`. */\n    dashed: {\n      position: 'absolute',\n      marginTop: 0,\n      height: '100%',\n      width: '100%',\n      animation: '$buffer 3s infinite linear',\n    },\n    /* Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"primary\"`. */\n    dashedColorPrimary: {\n      backgroundImage: `radial-gradient(${backgroundPrimary} 0%, ${backgroundPrimary} 16%, transparent 42%)`,\n      backgroundSize: '10px 10px',\n      backgroundPosition: '0px -23px',\n    },\n    /* Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"secondary\"`. */\n    dashedColorSecondary: {\n      backgroundImage: `radial-gradient(${backgroundSecondary} 0%, ${backgroundSecondary} 16%, transparent 42%)`,\n      backgroundSize: '10px 10px',\n      backgroundPosition: '0px -23px',\n    },\n    /* Styles applied to the layered bar1 and bar2 elements. */\n    bar: {\n      width: '100%',\n      position: 'absolute',\n      left: 0,\n      bottom: 0,\n      top: 0,\n      transition: 'transform 0.2s linear',\n      transformOrigin: 'left',\n    },\n    /* Styles applied to the bar elements if `color=\"primary\"`; bar2 if `variant` not \"buffer\". */\n    barColorPrimary: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    /* Styles applied to the bar elements if `color=\"secondary\"`; bar2 if `variant` not \"buffer\". */\n    barColorSecondary: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    /* Styles applied to the bar1 element if `variant=\"indeterminate or query\"`. */\n    bar1Indeterminate: {\n      width: 'auto',\n      animation: '$indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite',\n    },\n    /* Styles applied to the bar1 element if `variant=\"determinate\"`. */\n    bar1Determinate: {\n      transition: `transform .${TRANSITION_DURATION}s linear`,\n    },\n    /* Styles applied to the bar1 element if `variant=\"buffer\"`. */\n    bar1Buffer: {\n      zIndex: 1,\n      transition: `transform .${TRANSITION_DURATION}s linear`,\n    },\n    /* Styles applied to the bar2 element if `variant=\"indeterminate or query\"`. */\n    bar2Indeterminate: {\n      width: 'auto',\n      animation: '$indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite',\n      animationDelay: '1.15s',\n    },\n    /* Styles applied to the bar2 element if `variant=\"buffer\"`. */\n    bar2Buffer: {\n      transition: `transform .${TRANSITION_DURATION}s linear`,\n    },\n    // Legends:\n    // || represents the viewport\n    // -  represents a light background\n    // x  represents a dark background\n    '@keyframes indeterminate1': {\n      //  |-----|---x-||-----||-----|\n      '0%': {\n        left: '-35%',\n        right: '100%',\n      },\n      //  |-----|-----||-----||xxxx-|\n      '60%': {\n        left: '100%',\n        right: '-90%',\n      },\n      '100%': {\n        left: '100%',\n        right: '-90%',\n      },\n    },\n    '@keyframes indeterminate2': {\n      //  |xxxxx|xxxxx||-----||-----|\n      '0%': {\n        left: '-200%',\n        right: '100%',\n      },\n      //  |-----|-----||-----||-x----|\n      '60%': {\n        left: '107%',\n        right: '-8%',\n      },\n      '100%': {\n        left: '107%',\n        right: '-8%',\n      },\n    },\n    '@keyframes buffer': {\n      '0%': {\n        opacity: 1,\n        backgroundPosition: '0px -23px',\n      },\n      '50%': {\n        opacity: 0,\n        backgroundPosition: '0px -23px',\n      },\n      '100%': {\n        opacity: 1,\n        backgroundPosition: '-200px -23px',\n      },\n    },\n  };\n};\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\nconst LinearProgress = React.forwardRef(function LinearProgress(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'primary',\n    value,\n    valueBuffer,\n    variant = 'indeterminate',\n    ...other\n  } = props;\n  const theme = useTheme();\n\n  const rootProps = {};\n  const inlineStyles = { bar1: {}, bar2: {} };\n\n  if (variant === 'determinate' || variant === 'buffer') {\n    if (value !== undefined) {\n      rootProps['aria-valuenow'] = Math.round(value);\n      let transform = value - 100;\n      if (theme.direction === 'rtl') {\n        transform = -transform;\n      }\n      inlineStyles.bar1.transform = `translateX(${transform}%)`;\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        'Material-UI: you need to provide a value prop ' +\n          'when using the determinate or buffer variant of LinearProgress .',\n      );\n    }\n  }\n  if (variant === 'buffer') {\n    if (valueBuffer !== undefined) {\n      let transform = (valueBuffer || 0) - 100;\n      if (theme.direction === 'rtl') {\n        transform = -transform;\n      }\n      inlineStyles.bar2.transform = `translateX(${transform}%)`;\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        'Material-UI: you need to provide a valueBuffer prop ' +\n          'when using the buffer variant of LinearProgress.',\n      );\n    }\n  }\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        classes[`color${capitalize(color)}`],\n        {\n          [classes.determinate]: variant === 'determinate',\n          [classes.indeterminate]: variant === 'indeterminate',\n          [classes.buffer]: variant === 'buffer',\n          [classes.query]: variant === 'query',\n        },\n        className,\n      )}\n      role=\"progressbar\"\n      {...rootProps}\n      ref={ref}\n      {...other}\n    >\n      {variant === 'buffer' ? (\n        <div className={clsx(classes.dashed, classes[`dashedColor${capitalize(color)}`])} />\n      ) : null}\n      <div\n        className={clsx(classes.bar, classes[`barColor${capitalize(color)}`], {\n          [classes.bar1Indeterminate]: variant === 'indeterminate' || variant === 'query',\n          [classes.bar1Determinate]: variant === 'determinate',\n          [classes.bar1Buffer]: variant === 'buffer',\n        })}\n        style={inlineStyles.bar1}\n      />\n      {variant === 'determinate' ? null : (\n        <div\n          className={clsx(classes.bar, {\n            [classes[`barColor${capitalize(color)}`]]: variant !== 'buffer',\n            [classes[`color${capitalize(color)}`]]: variant === 'buffer',\n            [classes.bar2Indeterminate]: variant === 'indeterminate' || variant === 'query',\n            [classes.bar2Buffer]: variant === 'buffer',\n          })}\n          style={inlineStyles.bar2}\n        />\n      )}\n    </div>\n  );\n});\n\nLinearProgress.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number,\n  /**\n   * The value for the buffer variant.\n   * Value between 0 and 100.\n   */\n  valueBuffer: PropTypes.number,\n  /**\n   * The variant to use.\n   * Use indeterminate or query when there is no progress value.\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate', 'buffer', 'query']),\n};\n\nexport default withStyles(styles, { name: 'MuiLinearProgress' })(LinearProgress);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/LinearProgress/LinearProgress.js",
      "inheritance": null,
      "usedInPages": [
        "/components/progress"
      ]
    },
    "Popper": {
      "description": "Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.",
      "methods": [],
      "props": {
        "anchorEl": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n  if (props.open) {\n    const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n    const containerWindow = ownerWindow(resolvedAnchorEl);\n\n    if (resolvedAnchorEl instanceof containerWindow.Element) {\n      const box = resolvedAnchorEl.getBoundingClientRect();\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        box.top === 0 &&\n        box.left === 0 &&\n        box.right === 0 &&\n        box.bottom === 0\n      ) {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            'The anchor element should be part of the document layout.',\n            \"Make sure the element is present in the document or that it's not display none.\",\n          ].join('\\n'),\n        );\n      }\n    } else if (\n      !resolvedAnchorEl ||\n      typeof resolvedAnchorEl.clientWidth !== 'number' ||\n      typeof resolvedAnchorEl.clientHeight !== 'number' ||\n      typeof resolvedAnchorEl.getBoundingClientRect !== 'function'\n    ) {\n      return new Error(\n        [\n          'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n          'It should be an HTML Element instance or a referenceObject:',\n          'https://popper.js.org/popper-documentation.html#referenceObject.',\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "This is the reference element, or a function that returns the reference element,\nthat may be used to set the position of the popover.\nThe return value will passed as the reference object of the Popper\ninstance.\n\nThe reference element should be an HTML Element instance or a referenceObject:\nhttps://popper.js.org/popper-documentation.html#referenceObject.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "node"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": true,
          "description": "Popper render function or node.",
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time.",
          "tags": []
        },
        "disablePortal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "keepMounted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Popper.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "modifiers": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Popper.js is based on a \"plugin-like\" architecture,\nmost of its features are fully encapsulated \"modifiers\".\n\nA modifier is a function that is called each time Popper.js needs to\ncompute the position of the popper.\nFor this reason, modifiers should be very performant to avoid bottlenecks.\nTo learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object).",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the popper is visible.",
          "tags": []
        },
        "placement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom-end'",
                "computed": false
              },
              {
                "value": "'bottom-start'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left-end'",
                "computed": false
              },
              {
                "value": "'left-start'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right-end'",
                "computed": false
              },
              {
                "value": "'right-start'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top-end'",
                "computed": false
              },
              {
                "value": "'top-start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Popper placement.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        },
        "popperOptions": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "popperRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "A ref that points to the used popper instance.",
          "tags": []
        },
        "transition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Help supporting a react-transition-group/Transition component.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Popper",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport PopperJS from 'popper.js';\nimport { chainPropTypes, refType } from '@material-ui/utils';\nimport Portal from '../Portal';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\nimport ownerWindow from '../utils/ownerWindow';\n\n/**\n * Flips placement if in <body dir=\"rtl\" />\n * @param {string} placement\n */\nfunction flipPlacement(placement) {\n  const direction = (typeof window !== 'undefined' && document.body.getAttribute('dir')) || 'ltr';\n\n  if (direction !== 'rtl') {\n    return placement;\n  }\n\n  switch (placement) {\n    case 'bottom-end':\n      return 'bottom-start';\n    case 'bottom-start':\n      return 'bottom-end';\n    case 'top-end':\n      return 'top-start';\n    case 'top-start':\n      return 'top-end';\n    default:\n      return placement;\n  }\n}\n\nfunction getAnchorEl(anchorEl) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nconst defaultPopperOptions = {};\n\n/**\n * Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.\n */\nconst Popper = React.forwardRef(function Popper(props, ref) {\n  const {\n    anchorEl,\n    children,\n    container,\n    disablePortal = false,\n    keepMounted = false,\n    modifiers,\n    open,\n    placement: initialPlacement = 'bottom',\n    popperOptions = defaultPopperOptions,\n    popperRef: popperRefProp,\n    transition = false,\n    ...other\n  } = props;\n  const tooltipRef = React.useRef(null);\n  const ownRef = useForkRef(tooltipRef, ref);\n\n  const popperRef = React.useRef(null);\n  const handlePopperRef = useForkRef(popperRef, popperRefProp);\n  const handlePopperRefRef = React.useRef(handlePopperRef);\n  useEnhancedEffect(() => {\n    handlePopperRefRef.current = handlePopperRef;\n  }, [handlePopperRef]);\n  React.useImperativeHandle(popperRefProp, () => popperRef.current, []);\n\n  const [exited, setExited] = React.useState(true);\n\n  const rtlPlacement = flipPlacement(initialPlacement);\n  /**\n   * placement initialized from prop but can change during lifetime if modifiers.flip.\n   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior\n   */\n  const [placement, setPlacement] = React.useState(rtlPlacement);\n\n  const handleOpen = React.useCallback(() => {\n    if (!tooltipRef.current || !anchorEl || !open) {\n      return;\n    }\n\n    if (popperRef.current) {\n      popperRef.current.destroy();\n      handlePopperRefRef.current(null);\n    }\n\n    const handlePopperUpdate = data => {\n      setPlacement(data.placement);\n    };\n\n    const resolvedAnchorEl = getAnchorEl(anchorEl);\n\n    if (process.env.NODE_ENV !== 'production') {\n      const containerWindow = ownerWindow(resolvedAnchorEl);\n\n      if (resolvedAnchorEl instanceof containerWindow.Element) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n\n        if (\n          process.env.NODE_ENV !== 'test' &&\n          box.top === 0 &&\n          box.left === 0 &&\n          box.right === 0 &&\n          box.bottom === 0\n        ) {\n          console.warn(\n            [\n              'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n              'The anchor element should be part of the document layout.',\n              \"Make sure the element is present in the document or that it's not display none.\",\n            ].join('\\n'),\n          );\n        }\n      }\n    }\n\n    const popper = new PopperJS(getAnchorEl(anchorEl), tooltipRef.current, {\n      placement: rtlPlacement,\n      ...popperOptions,\n      modifiers: {\n        ...(disablePortal\n          ? {}\n          : {\n              // It's using scrollParent by default, we can use the viewport when using a portal.\n              preventOverflow: {\n                boundariesElement: 'window',\n              },\n            }),\n        ...modifiers,\n        ...popperOptions.modifiers,\n      },\n      // We could have been using a custom modifier like react-popper is doing.\n      // But it seems this is the best public API for this use case.\n      onCreate: createChainedFunction(handlePopperUpdate, popperOptions.onCreate),\n      onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate),\n    });\n    handlePopperRefRef.current(popper);\n  }, [anchorEl, disablePortal, modifiers, open, rtlPlacement, popperOptions]);\n\n  const handleRef = React.useCallback(\n    node => {\n      setRef(ownRef, node);\n      handleOpen();\n    },\n    [ownRef, handleOpen],\n  );\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  const handleClose = () => {\n    if (!popperRef.current) {\n      return;\n    }\n\n    popperRef.current.destroy();\n    handlePopperRefRef.current(null);\n  };\n\n  const handleExited = () => {\n    setExited(true);\n    handleClose();\n  };\n\n  React.useEffect(() => {\n    // Let's update the popper position.\n    handleOpen();\n  }, [handleOpen]);\n\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (!open && !transition) {\n      // Otherwise handleExited will call this.\n      handleClose();\n    }\n  }, [open, transition]);\n\n  if (!keepMounted && !open && (!transition || exited)) {\n    return null;\n  }\n\n  const childProps = { placement };\n\n  if (transition) {\n    childProps.TransitionProps = {\n      in: open,\n      onEnter: handleEnter,\n      onExited: handleExited,\n    };\n  }\n\n  return (\n    <Portal disablePortal={disablePortal} container={container}>\n      <div\n        ref={handleRef}\n        role=\"tooltip\"\n        {...other}\n        style={{\n          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.\n          position: 'fixed',\n          // Fix Popper.js display issue\n          top: 0,\n          left: 0,\n          ...other.style,\n        }}\n      >\n        {typeof children === 'function' ? children(childProps) : children}\n      </div>\n    </Portal>\n  );\n});\n\nPopper.propTypes = {\n  /**\n   * This is the reference element, or a function that returns the reference element,\n   * that may be used to set the position of the popover.\n   * The return value will passed as the reference object of the Popper\n   * instance.\n   *\n   * The reference element should be an HTML Element instance or a referenceObject:\n   * https://popper.js.org/popper-documentation.html#referenceObject.\n   */\n  anchorEl: chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n    if (props.open) {\n      const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n      const containerWindow = ownerWindow(resolvedAnchorEl);\n\n      if (resolvedAnchorEl instanceof containerWindow.Element) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n\n        if (\n          process.env.NODE_ENV !== 'test' &&\n          box.top === 0 &&\n          box.left === 0 &&\n          box.right === 0 &&\n          box.bottom === 0\n        ) {\n          return new Error(\n            [\n              'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n              'The anchor element should be part of the document layout.',\n              \"Make sure the element is present in the document or that it's not display none.\",\n            ].join('\\n'),\n          );\n        }\n      } else if (\n        !resolvedAnchorEl ||\n        typeof resolvedAnchorEl.clientWidth !== 'number' ||\n        typeof resolvedAnchorEl.clientHeight !== 'number' ||\n        typeof resolvedAnchorEl.getBoundingClientRect !== 'function'\n      ) {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            'It should be an HTML Element instance or a referenceObject:',\n            'https://popper.js.org/popper-documentation.html#referenceObject.',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    return null;\n  }),\n  /**\n   * Popper render function or node.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will passed to the Modal component.\n   * By default, it uses the body of the anchorEl's top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Popper.\n   */\n  keepMounted: PropTypes.bool,\n  /**\n   * Popper.js is based on a \"plugin-like\" architecture,\n   * most of its features are fully encapsulated \"modifiers\".\n   *\n   * A modifier is a function that is called each time Popper.js needs to\n   * compute the position of the popper.\n   * For this reason, modifiers should be very performant to avoid bottlenecks.\n   * To learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object).\n   */\n  modifiers: PropTypes.object,\n  /**\n   * If `true`, the popper is visible.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * Popper placement.\n   */\n  placement: PropTypes.oneOf([\n    'bottom-end',\n    'bottom-start',\n    'bottom',\n    'left-end',\n    'left-start',\n    'left',\n    'right-end',\n    'right-start',\n    'right',\n    'top-end',\n    'top-start',\n    'top',\n  ]),\n  /**\n   * Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance.\n   */\n  popperOptions: PropTypes.object,\n  /**\n   * A ref that points to the used popper instance.\n   */\n  popperRef: refType,\n  /**\n   * Help supporting a react-transition-group/Transition component.\n   */\n  transition: PropTypes.bool,\n};\n\nexport default Popper;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Popper/Popper.js",
      "inheritance": null,
      "usedInPages": [
        "/components/autocomplete",
        "/components/integrated-autocomplete",
        "/components/menus",
        "/components/popper"
      ]
    },
    "RadioGroup": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The name used to reference the value of the control.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when a radio button is selected.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "Value of the selected radio button. The DOM API casts this to a string.",
          "tags": []
        }
      },
      "name": "RadioGroup",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport RadioGroupContext from './RadioGroupContext';\n\nconst RadioGroup = React.forwardRef(function RadioGroup(props, ref) {\n  const { actions, children, name, value: valueProp, onChange, ...other } = props;\n  const rootRef = React.useRef(null);\n  const { current: isControlled } = React.useRef(valueProp != null);\n  const [valueState, setValue] = React.useState(() => {\n    return !isControlled ? props.defaultValue : null;\n  });\n\n  React.useImperativeHandle(\n    actions,\n    () => ({\n      focus: () => {\n        let input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n        if (!input) {\n          input = rootRef.current.querySelector('input:not(:disabled)');\n        }\n\n        if (input) {\n          input.focus();\n        }\n      },\n    }),\n    [],\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled !== (valueProp != null)) {\n        console.error(\n          [\n            `Material-UI: A component is changing ${\n              isControlled ? 'a ' : 'an un'\n            }controlled RadioGroup to be ${isControlled ? 'un' : ''}controlled.`,\n            'Elements should not switch from uncontrolled to controlled (or vice versa).',\n            'Decide between using a controlled or uncontrolled RadioGroup ' +\n              'element for the lifetime of the component.',\n            'More info: https://fb.me/react-controlled-components',\n          ].join('\\n'),\n        );\n      }\n    }, [valueProp, isControlled]);\n  }\n\n  const value = isControlled ? valueProp : valueState;\n\n  const handleChange = event => {\n    if (!isControlled) {\n      setValue(event.target.value);\n    }\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n  const context = { name, onChange: handleChange, value };\n\n  const handleRef = useForkRef(ref, rootRef);\n\n  return (\n    <FormGroup role=\"radiogroup\" ref={handleRef} {...other}>\n      <RadioGroupContext.Provider value={context}>{children}</RadioGroupContext.Provider>\n    </FormGroup>\n  );\n});\n\nRadioGroup.propTypes = {\n  /**\n   * @ignore\n   */\n  actions: PropTypes.shape({ current: PropTypes.object }),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * The name used to reference the value of the control.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n};\n\nexport default RadioGroup;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/RadioGroup/RadioGroup.js",
      "inheritance": {
        "component": "FormGroup",
        "pathname": "/api/form-group"
      },
      "usedInPages": [
        "/components/radio-buttons"
      ]
    },
    "Slide": {
      "description": "The Slide transition is used by the [Drawer](/components/drawers/) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'up'",
                "computed": false
              },
              {
                "value": "'down'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Direction the child node will enter from.",
          "defaultValue": {
            "value": "'down'",
            "computed": false
          },
          "tags": []
        },
        "in": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, show the component; triggers the enter or exit animation.",
          "tags": []
        },
        "timeout": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Slide",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport debounce from '../utils/debounce';\nimport { Transition } from 'react-transition-group';\nimport { elementAcceptingRef } from '@material-ui/utils';\nimport useForkRef from '../utils/useForkRef';\nimport useTheme from '../styles/useTheme';\nimport { duration } from '../styles/transitions';\nimport { reflow, getTransitionProps } from '../transitions/utils';\n\n// Translate the node so he can't be seen on the screen.\n// Later, we gonna translate back the node to his original location\n// with `none`.`\nfunction getTranslateValue(direction, node) {\n  const rect = node.getBoundingClientRect();\n\n  let transform;\n\n  if (node.fakeTransform) {\n    transform = node.fakeTransform;\n  } else {\n    const computedStyle = window.getComputedStyle(node);\n    transform =\n      computedStyle.getPropertyValue('-webkit-transform') ||\n      computedStyle.getPropertyValue('transform');\n  }\n\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (transform && transform !== 'none' && typeof transform === 'string') {\n    const transformValues = transform\n      .split('(')[1]\n      .split(')')[0]\n      .split(',');\n    offsetX = parseInt(transformValues[4], 10);\n    offsetY = parseInt(transformValues[5], 10);\n  }\n\n  if (direction === 'left') {\n    return `translateX(${window.innerWidth}px) translateX(-${rect.left - offsetX}px)`;\n  }\n\n  if (direction === 'right') {\n    return `translateX(-${rect.left + rect.width - offsetX}px)`;\n  }\n\n  if (direction === 'up') {\n    return `translateY(${window.innerHeight}px) translateY(-${rect.top - offsetY}px)`;\n  }\n\n  // direction === 'down'\n  return `translateY(-${rect.top + rect.height - offsetY}px)`;\n}\n\nexport function setTranslateValue(direction, node) {\n  const transform = getTranslateValue(direction, node);\n\n  if (transform) {\n    node.style.webkitTransform = transform;\n    node.style.transform = transform;\n  }\n}\n\nconst defaultTimeout = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n};\n\n/**\n * The Slide transition is used by the [Drawer](/components/drawers/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\nconst Slide = React.forwardRef(function Slide(props, ref) {\n  const {\n    children,\n    direction = 'down',\n    in: inProp,\n    onEnter,\n    onEntering,\n    onExit,\n    onExited,\n    style,\n    timeout = defaultTimeout,\n    ...other\n  } = props;\n\n  const theme = useTheme();\n  const childrenRef = React.useRef(null);\n  /**\n   * used in cloneElement(children, { ref: handleRef })\n   */\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    childrenRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRefIntermediary = useForkRef(children.ref, handleOwnRef);\n  const handleRef = useForkRef(handleRefIntermediary, ref);\n\n  const handleEnter = (_, isAppearing) => {\n    const node = childrenRef.current;\n    setTranslateValue(direction, node);\n    reflow(node);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleEntering = (_, isAppearing) => {\n    const node = childrenRef.current;\n    const transitionProps = getTransitionProps(\n      { timeout, style },\n      {\n        mode: 'enter',\n      },\n    );\n    node.style.webkitTransition = theme.transitions.create('-webkit-transform', {\n      ...transitionProps,\n      easing: theme.transitions.easing.easeOut,\n    });\n    node.style.transition = theme.transitions.create('transform', {\n      ...transitionProps,\n      easing: theme.transitions.easing.easeOut,\n    });\n    node.style.webkitTransform = 'none';\n    node.style.transform = 'none';\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  };\n\n  const handleExit = () => {\n    const node = childrenRef.current;\n    const transitionProps = getTransitionProps(\n      { timeout, style },\n      {\n        mode: 'exit',\n      },\n    );\n    node.style.webkitTransition = theme.transitions.create('-webkit-transform', {\n      ...transitionProps,\n      easing: theme.transitions.easing.sharp,\n    });\n    node.style.transition = theme.transitions.create('transform', {\n      ...transitionProps,\n      easing: theme.transitions.easing.sharp,\n    });\n    setTranslateValue(direction, node);\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  const handleExited = () => {\n    const node = childrenRef.current;\n    // No need for transitions when the component is hidden\n    node.style.webkitTransition = '';\n    node.style.transition = '';\n\n    if (onExited) {\n      onExited(node);\n    }\n  };\n\n  const updatePosition = React.useCallback(() => {\n    if (childrenRef.current) {\n      setTranslateValue(direction, childrenRef.current);\n    }\n  }, [direction]);\n\n  React.useEffect(() => {\n    // Skip configuration where the position is screen size invariant.\n    if (!inProp && direction !== 'down' && direction !== 'right') {\n      const handleResize = debounce(() => {\n        if (childrenRef.current) {\n          setTranslateValue(direction, childrenRef.current);\n        }\n      });\n\n      window.addEventListener('resize', handleResize);\n\n      return () => {\n        handleResize.clear();\n        window.removeEventListener('resize', handleResize);\n      };\n    }\n\n    return undefined;\n  }, [direction, inProp]);\n\n  React.useEffect(() => {\n    if (!inProp) {\n      // We need to update the position of the drawer when the direction change and\n      // when it's hidden.\n      updatePosition();\n    }\n  }, [inProp, updatePosition]);\n\n  return (\n    <Transition\n      onEnter={handleEnter}\n      onEntering={handleEntering}\n      onExit={handleExit}\n      onExited={handleExited}\n      appear\n      in={inProp}\n      timeout={timeout}\n      {...other}\n    >\n      {(state, childProps) => {\n        return React.cloneElement(children, {\n          ref: handleRef,\n          style: {\n            visibility: state === 'exited' && !inProp ? 'hidden' : undefined,\n            ...style,\n            ...children.props.style,\n          },\n          ...childProps,\n        });\n      }}\n    </Transition>\n  );\n});\n\nSlide.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n  /**\n   * Direction the child node will enter from.\n   */\n  direction: PropTypes.oneOf(['left', 'right', 'up', 'down']),\n  /**\n   * If `true`, show the component; triggers the enter or exit animation.\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n};\n\nexport default Slide;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Slide/Slide.js",
      "inheritance": {
        "component": "Transition",
        "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
      },
      "usedInPages": [
        "/components/dialogs",
        "/components/transitions"
      ]
    },
    "Snackbar": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The action to display.",
          "tags": []
        },
        "anchorOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "enum",
                "value": [
                  {
                    "value": "'left'",
                    "computed": false
                  },
                  {
                    "value": "'center'",
                    "computed": false
                  },
                  {
                    "value": "'right'",
                    "computed": false
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "enum",
                "value": [
                  {
                    "value": "'top'",
                    "computed": false
                  },
                  {
                    "value": "'bottom'",
                    "computed": false
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "The anchor of the `Snackbar`.",
          "defaultValue": {
            "value": "{ vertical: 'bottom', horizontal: 'center' }",
            "computed": false
          },
          "tags": []
        },
        "autoHideDuration": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before automatically calling the\n`onClose` function. `onClose` should then set the state of the `open`\nprop to hide the Snackbar. This behavior is disabled by default with\nthe `null` value.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Replace the `SnackbarContent` component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "ClickAwayListenerProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `ClickAwayListener` element.",
          "tags": []
        },
        "ContentProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.",
          "tags": []
        },
        "disableWindowBlurListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "key": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "When displaying multiple consecutive Snackbars from a parent rendering a single\n<Snackbar/>, add the key prop to ensure independent treatment of each message.\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\nfeatures such as autoHideDuration may be canceled.",
          "tags": []
        },
        "message": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The message to display.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.\nTypically `onClose` is used to set state in the parent component,\nwhich is used to control the `Snackbar` `open` prop.\nThe `reason` parameter can optionally be used to control the response to `onClose`,\nfor example ignoring `clickaway`.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the transition is entering.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition is entering.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the transition is exiting.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the transition is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, `Snackbar` is open.",
          "tags": []
        },
        "resumeHideDuration": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before dismissing after user interaction.\nIf `autoHideDuration` prop isn't specified, it does nothing.\nIf `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\nwe default to `autoHideDuration / 2` ms.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.",
          "defaultValue": {
            "value": "Grow",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `Transition` element.",
          "tags": []
        }
      },
      "name": "Snackbar",
      "styles": {
        "classes": [
          "root",
          "anchorOriginTopCenter",
          "anchorOriginBottomCenter",
          "anchorOriginTopRight",
          "anchorOriginBottomRight",
          "anchorOriginTopLeft",
          "anchorOriginBottomLeft"
        ],
        "name": "MuiSnackbar",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "anchorOriginTopCenter": "Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`.",
          "anchorOriginBottomCenter": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`.",
          "anchorOriginTopRight": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`.",
          "anchorOriginBottomRight": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`.",
          "anchorOriginTopLeft": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`.",
          "anchorOriginBottomLeft": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`."
        },
        "globalClasses": {
          "root": "MuiSnackbar-root",
          "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
          "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
          "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
          "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
          "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
          "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport ClickAwayListener from '../ClickAwayListener';\nimport capitalize from '../utils/capitalize';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport Grow from '../Grow';\nimport SnackbarContent from '../SnackbarContent';\n\nexport const styles = theme => {\n  const top1 = { top: 8 };\n  const bottom1 = { bottom: 8 };\n  const right = { justifyContent: 'flex-end' };\n  const left = { justifyContent: 'flex-start' };\n  const top3 = { top: 24 };\n  const bottom3 = { bottom: 24 };\n  const right3 = { right: 24 };\n  const left3 = { left: 24 };\n  const center = {\n    left: '50%',\n    right: 'auto',\n    transform: 'translateX(-50%)',\n  };\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      zIndex: theme.zIndex.snackbar,\n      position: 'fixed',\n      display: 'flex',\n      left: 8,\n      right: 8,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */\n    anchorOriginTopCenter: {\n      ...top1,\n      [theme.breakpoints.up('sm')]: {\n        ...top3,\n        ...center,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */\n    anchorOriginBottomCenter: {\n      ...bottom1,\n      [theme.breakpoints.up('sm')]: {\n        ...bottom3,\n        ...center,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */\n    anchorOriginTopRight: {\n      ...top1,\n      ...right,\n      [theme.breakpoints.up('sm')]: {\n        left: 'auto',\n        ...top3,\n        ...right3,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */\n    anchorOriginBottomRight: {\n      ...bottom1,\n      ...right,\n      [theme.breakpoints.up('sm')]: {\n        left: 'auto',\n        ...bottom3,\n        ...right3,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */\n    anchorOriginTopLeft: {\n      ...top1,\n      ...left,\n      [theme.breakpoints.up('sm')]: {\n        right: 'auto',\n        ...top3,\n        ...left3,\n      },\n    },\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */\n    anchorOriginBottomLeft: {\n      ...bottom1,\n      ...left,\n      [theme.breakpoints.up('sm')]: {\n        right: 'auto',\n        ...bottom3,\n        ...left3,\n      },\n    },\n  };\n};\n\nconst Snackbar = React.forwardRef(function Snackbar(props, ref) {\n  const {\n    action,\n    anchorOrigin: { vertical, horizontal } = { vertical: 'bottom', horizontal: 'center' },\n    autoHideDuration,\n    children,\n    classes,\n    className,\n    ClickAwayListenerProps,\n    ContentProps,\n    disableWindowBlurListener = false,\n    message,\n    onClose,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExited,\n    onExiting,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    TransitionComponent = Grow,\n    transitionDuration = {\n      enter: duration.enteringScreen,\n      exit: duration.leavingScreen,\n    },\n    TransitionProps,\n    ...other\n  } = props;\n\n  const timerAutoHide = React.useRef();\n  const [exited, setExited] = React.useState(true);\n\n  // Timer that controls delay before snackbar auto hides\n  const setAutoHideTimer = React.useCallback(\n    autoHideDurationParam => {\n      const autoHideDurationBefore =\n        autoHideDurationParam != null ? autoHideDurationParam : autoHideDuration;\n\n      if (!onClose || autoHideDurationBefore == null) {\n        return;\n      }\n\n      clearTimeout(timerAutoHide.current);\n      timerAutoHide.current = setTimeout(() => {\n        const autoHideDurationAfter =\n          autoHideDurationParam != null ? autoHideDurationParam : autoHideDuration;\n        if (!onClose || autoHideDurationAfter == null) {\n          return;\n        }\n        onClose(null, 'timeout');\n      }, autoHideDurationBefore);\n    },\n    [autoHideDuration, onClose],\n  );\n\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer();\n    }\n\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, setAutoHideTimer]);\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  };\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      if (resumeHideDuration != null) {\n        setAutoHideTimer(resumeHideDuration);\n        return;\n      }\n      setAutoHideTimer(autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  const handleMouseEnter = event => {\n    if (onMouseEnter) {\n      onMouseEnter(event);\n    }\n    handlePause();\n  };\n\n  const handleMouseLeave = event => {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n    handleResume();\n  };\n\n  const handleClickAway = event => {\n    if (onClose) {\n      onClose(event, 'clickaway');\n    }\n  };\n\n  const handleExited = () => {\n    setExited(true);\n  };\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  React.useEffect(() => {\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n\n  // So we only render active snackbars.\n  if (!open && exited) {\n    return null;\n  }\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway} {...ClickAwayListenerProps}>\n      <div\n        className={clsx(\n          classes.root,\n          classes[`anchorOrigin${capitalize(vertical)}${capitalize(horizontal)}`],\n          className,\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        ref={ref}\n        {...other}\n      >\n        <TransitionComponent\n          appear\n          in={open}\n          onEnter={createChainedFunction(handleEnter, onEnter)}\n          onEntered={onEntered}\n          onEntering={onEntering}\n          onExit={onExit}\n          onExited={createChainedFunction(handleExited, onExited)}\n          onExiting={onExiting}\n          timeout={transitionDuration}\n          direction={vertical === 'top' ? 'down' : 'up'}\n          {...TransitionProps}\n        >\n          {children || <SnackbarContent message={message} action={action} {...ContentProps} />}\n        </TransitionComponent>\n      </div>\n    </ClickAwayListener>\n  );\n});\n\nSnackbar.propTypes = {\n  /**\n   * The action to display.\n   */\n  action: PropTypes.node,\n  /**\n   * The anchor of the `Snackbar`.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['top', 'bottom']).isRequired,\n  }),\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   */\n  autoHideDuration: PropTypes.number,\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children: PropTypes.element,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps: PropTypes.object,\n  /**\n   * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.\n   */\n  ContentProps: PropTypes.object,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   */\n  disableWindowBlurListener: PropTypes.bool,\n  /**\n   * When displaying multiple consecutive Snackbars from a parent rendering a single\n   * <Snackbar/>, add the key prop to ensure independent treatment of each message.\n   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\n   * features such as autoHideDuration may be canceled.\n   */\n  key: PropTypes.any,\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired before the transition is entering.\n   */\n  onEnter: PropTypes.func,\n  /**\n   * Callback fired when the transition has entered.\n   */\n  onEntered: PropTypes.func,\n  /**\n   * Callback fired when the transition is entering.\n   */\n  onEntering: PropTypes.func,\n  /**\n   * Callback fired before the transition is exiting.\n   */\n  onExit: PropTypes.func,\n  /**\n   * Callback fired when the transition has exited.\n   */\n  onExited: PropTypes.func,\n  /**\n   * Callback fired when the transition is exiting.\n   */\n  onExiting: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n  /**\n   * If true, `Snackbar` is open.\n   */\n  open: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n  /**\n   * Props applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { flip: false, name: 'MuiSnackbar' })(Snackbar);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Snackbar/Snackbar.js",
      "inheritance": null,
      "usedInPages": [
        "/components/snackbars"
      ]
    },
    "Tooltip": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef.isRequired"
          },
          "required": false,
          "description": "Tooltip reference element.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "disableFocusListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Do not respond to focus events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableHoverListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Do not respond to hover events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableTouchListener": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Do not respond to long press touch events.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "enterDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before showing the tooltip.\nThis prop won't impact the enter touch delay (`enterTouchDelay`).",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "enterTouchDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds a user must touch the element before showing the tooltip.",
          "defaultValue": {
            "value": "700",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
          "tags": []
        },
        "interactive": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Makes a tooltip interactive, i.e. will not close when the user\nhovers over the tooltip before the `leaveDelay` is expired.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "leaveDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds to wait before hiding the tooltip.\nThis prop won't impact the leave touch delay (`leaveTouchDelay`).",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "leaveTouchDelay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
          "defaultValue": {
            "value": "1500",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be open.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the tooltip is shown.",
          "tags": []
        },
        "placement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bottom-end'",
                "computed": false
              },
              {
                "value": "'bottom-start'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left-end'",
                "computed": false
              },
              {
                "value": "'left-start'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right-end'",
                "computed": false
              },
              {
                "value": "'right-start'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'top-end'",
                "computed": false
              },
              {
                "value": "'top-start'",
                "computed": false
              },
              {
                "value": "'top'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Tooltip placement.",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          },
          "tags": []
        },
        "PopperProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Popper`](/api/popper/) element.",
          "tags": []
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Tooltip title. Zero-length titles string are never displayed.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.",
          "defaultValue": {
            "value": "Grow",
            "computed": true
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `Transition` element.",
          "tags": []
        }
      },
      "name": "Tooltip",
      "styles": {
        "classes": [
          "popper",
          "popperInteractive",
          "tooltip",
          "touch",
          "tooltipPlacementLeft",
          "tooltipPlacementRight",
          "tooltipPlacementTop",
          "tooltipPlacementBottom"
        ],
        "name": "MuiTooltip",
        "descriptions": {
          "popper": "Styles applied to the Popper component.",
          "popperInteractive": "Styles applied to the Popper component if `interactive={true}`.",
          "tooltip": "Styles applied to the tooltip (label wrapper) element.",
          "touch": "Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch.",
          "tooltipPlacementLeft": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"left\".",
          "tooltipPlacementRight": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"right\".",
          "tooltipPlacementTop": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"top\".",
          "tooltipPlacementBottom": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"bottom\"."
        },
        "globalClasses": {
          "popper": "MuiTooltip-popper",
          "popperInteractive": "MuiTooltip-popperInteractive",
          "tooltip": "MuiTooltip-tooltip",
          "touch": "MuiTooltip-touch",
          "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
          "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
          "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
          "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom"
        }
      },
      "src": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementAcceptingRef } from '@material-ui/utils';\nimport { fade } from '../styles/colorManipulator';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport Grow from '../Grow';\nimport Popper from '../Popper';\nimport useForkRef from '../utils/useForkRef';\nimport setRef from '../utils/setRef';\nimport { useIsFocusVisible } from '../utils/focusVisible';\nimport useTheme from '../styles/useTheme';\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nexport const styles = theme => ({\n  /* Styles applied to the Popper component. */\n  popper: {\n    zIndex: theme.zIndex.tooltip,\n    pointerEvents: 'none',\n    flip: false, // disable jss-rtl plugin\n  },\n  /* Styles applied to the Popper component if `interactive={true}`. */\n  popperInteractive: {\n    pointerEvents: 'auto',\n  },\n  /* Styles applied to the tooltip (label wrapper) element. */\n  tooltip: {\n    backgroundColor: fade(theme.palette.grey[700], 0.9),\n    borderRadius: theme.shape.borderRadius,\n    color: theme.palette.common.white,\n    fontFamily: theme.typography.fontFamily,\n    padding: '4px 8px',\n    fontSize: theme.typography.pxToRem(10),\n    lineHeight: `${round(14 / 10)}em`,\n    maxWidth: 300,\n    wordWrap: 'break-word',\n    fontWeight: theme.typography.fontWeightMedium,\n  },\n  /* Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */\n  touch: {\n    padding: '8px 16px',\n    fontSize: theme.typography.pxToRem(14),\n    lineHeight: `${round(16 / 14)}em`,\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"left\". */\n  tooltipPlacementLeft: {\n    transformOrigin: 'right center',\n    margin: '0 24px ',\n    [theme.breakpoints.up('sm')]: {\n      margin: '0 14px',\n    },\n  },\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"right\". */\n  tooltipPlacementRight: {\n    transformOrigin: 'left center',\n    margin: '0 24px',\n    [theme.breakpoints.up('sm')]: {\n      margin: '0 14px',\n    },\n  },\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"top\". */\n  tooltipPlacementTop: {\n    transformOrigin: 'center bottom',\n    margin: '24px 0',\n    [theme.breakpoints.up('sm')]: {\n      margin: '14px 0',\n    },\n  },\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"bottom\". */\n  tooltipPlacementBottom: {\n    transformOrigin: 'center top',\n    margin: '24px 0',\n    [theme.breakpoints.up('sm')]: {\n      margin: '14px 0',\n    },\n  },\n});\n\nconst Tooltip = React.forwardRef(function Tooltip(props, ref) {\n  const {\n    children,\n    classes,\n    disableFocusListener = false,\n    disableHoverListener = false,\n    disableTouchListener = false,\n    enterDelay = 0,\n    enterTouchDelay = 700,\n    id,\n    interactive = false,\n    leaveDelay = 0,\n    leaveTouchDelay = 1500,\n    onClose,\n    onOpen,\n    open: openProp,\n    placement = 'bottom',\n    PopperProps,\n    title,\n    TransitionComponent = Grow,\n    TransitionProps,\n    ...other\n  } = props;\n  const theme = useTheme();\n\n  const [openState, setOpenState] = React.useState(false);\n  const [, forceUpdate] = React.useState(0);\n  const [childNode, setChildNode] = React.useState();\n  const ignoreNonTouchEvents = React.useRef(false);\n  const { current: isControlled } = React.useRef(openProp != null);\n  const defaultId = React.useRef();\n  const closeTimer = React.useRef();\n  const enterTimer = React.useRef();\n  const leaveTimer = React.useRef();\n  const touchTimer = React.useRef();\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (\n        childNode &&\n        childNode.disabled &&\n        !isControlled &&\n        title !== '' &&\n        childNode.tagName.toLowerCase() === 'button'\n      ) {\n        console.error(\n          [\n            'Material-UI: you are providing a disabled `button` child to the Tooltip component.',\n            'A disabled element does not fire events.',\n            \"Tooltip needs to listen to the child element's events to display the title.\",\n            '',\n            'Add a simple wrapper element, such as a `span`.',\n          ].join('\\n'),\n        );\n      }\n    }, [isControlled, title, childNode]);\n  }\n\n  React.useEffect(() => {\n    // Fallback to this default id when possible.\n    // Use the random value for client-side rendering only.\n    // We can't use it server-side.\n    if (!defaultId.current) {\n      defaultId.current = `mui-tooltip-${Math.round(Math.random() * 1e5)}`;\n    }\n\n    // Rerender with defaultId and childNode.\n    if (openProp) {\n      forceUpdate(n => !n);\n    }\n  }, [openProp]);\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(closeTimer.current);\n      clearTimeout(enterTimer.current);\n      clearTimeout(leaveTimer.current);\n      clearTimeout(touchTimer.current);\n    };\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled !== (openProp != null)) {\n        console.error(\n          [\n            `Material-UI: A component is changing ${\n              isControlled ? 'a ' : 'an un'\n            }controlled Tooltip to be ${isControlled ? 'un' : ''}controlled.`,\n            'Elements should not switch from uncontrolled to controlled (or vice versa).',\n            'Decide between using a controlled or uncontrolled Tooltip ' +\n              'element for the lifetime of the component.',\n            'More info: https://fb.me/react-controlled-components',\n          ].join('\\n'),\n        );\n      }\n    }, [openProp, isControlled]);\n  }\n\n  const handleOpen = event => {\n    // The mouseover event will trigger for every nested element in the tooltip.\n    // We can skip rerendering when the tooltip is already open.\n    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.\n    if (!isControlled && !openState) {\n      setOpenState(true);\n    }\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleEnter = event => {\n    const childrenProps = children.props;\n\n    if (event.type === 'mouseover' && childrenProps.onMouseOver) {\n      childrenProps.onMouseOver(event);\n    }\n\n    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {\n      return;\n    }\n\n    // Remove the title ahead of time.\n    // We don't want to wait for the next render commit.\n    // We would risk displaying two tooltips at the same time (native + this one).\n    if (childNode) {\n      childNode.removeAttribute('title');\n    }\n\n    clearTimeout(enterTimer.current);\n    clearTimeout(leaveTimer.current);\n    if (enterDelay) {\n      event.persist();\n      enterTimer.current = setTimeout(() => {\n        handleOpen(event);\n      }, enterDelay);\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const { isFocusVisible, onBlurVisible, ref: focusVisibleRef } = useIsFocusVisible();\n  const [childIsFocusVisible, setChildIsFocusVisible] = React.useState(false);\n  const handleBlur = () => {\n    if (childIsFocusVisible) {\n      setChildIsFocusVisible(false);\n      onBlurVisible();\n    }\n  };\n\n  const handleFocus = event => {\n    // Workaround for https://github.com/facebook/react/issues/7769\n    // The autoFocus of React might trigger the event before the componentDidMount.\n    // We need to account for this eventuality.\n    if (!childNode) {\n      setChildNode(event.currentTarget);\n    }\n\n    if (isFocusVisible(event)) {\n      setChildIsFocusVisible(true);\n      handleEnter(event);\n    }\n\n    const childrenProps = children.props;\n    if (childrenProps.onFocus) {\n      childrenProps.onFocus(event);\n    }\n  };\n\n  const handleClose = event => {\n    if (!isControlled) {\n      setOpenState(false);\n    }\n\n    if (onClose) {\n      onClose(event);\n    }\n\n    clearTimeout(closeTimer.current);\n    closeTimer.current = setTimeout(() => {\n      ignoreNonTouchEvents.current = false;\n    }, theme.transitions.duration.shortest);\n  };\n\n  const handleLeave = event => {\n    const childrenProps = children.props;\n\n    if (event.type === 'blur') {\n      if (childrenProps.onBlur) {\n        childrenProps.onBlur(event);\n      }\n      handleBlur(event);\n    }\n\n    if (event.type === 'mouseleave' && childrenProps.onMouseLeave) {\n      childrenProps.onMouseLeave(event);\n    }\n\n    clearTimeout(enterTimer.current);\n    clearTimeout(leaveTimer.current);\n    event.persist();\n    leaveTimer.current = setTimeout(() => {\n      handleClose(event);\n    }, leaveDelay);\n  };\n\n  const handleTouchStart = event => {\n    ignoreNonTouchEvents.current = true;\n    const childrenProps = children.props;\n\n    if (childrenProps.onTouchStart) {\n      childrenProps.onTouchStart(event);\n    }\n\n    clearTimeout(leaveTimer.current);\n    clearTimeout(closeTimer.current);\n    clearTimeout(touchTimer.current);\n    event.persist();\n    touchTimer.current = setTimeout(() => {\n      handleEnter(event);\n    }, enterTouchDelay);\n  };\n\n  const handleTouchEnd = event => {\n    if (children.props.onTouchEnd) {\n      children.props.onTouchEnd(event);\n    }\n\n    clearTimeout(touchTimer.current);\n    clearTimeout(leaveTimer.current);\n    event.persist();\n    leaveTimer.current = setTimeout(() => {\n      handleClose(event);\n    }, leaveTouchDelay);\n  };\n\n  const handleUseRef = useForkRef(setChildNode, ref);\n  const handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);\n  // can be removed once we drop support for non ref forwarding class components\n  const handleOwnRef = React.useCallback(\n    instance => {\n      // #StrictMode ready\n      setRef(handleFocusRef, ReactDOM.findDOMNode(instance));\n    },\n    [handleFocusRef],\n  );\n  const handleRef = useForkRef(children.ref, handleOwnRef);\n\n  let open = isControlled ? openProp : openState;\n\n  // There is no point in displaying an empty tooltip.\n  if (title === '') {\n    open = false;\n  }\n\n  // For accessibility and SEO concerns, we render the title to the DOM node when\n  // the tooltip is hidden. However, we have made a tradeoff when\n  // `disableHoverListener` is set. This title logic is disabled.\n  // It's allowing us to keep the implementation size minimal.\n  // We are open to change the tradeoff.\n  const shouldShowNativeTitle = !open && !disableHoverListener;\n  const childrenProps = {\n    'aria-describedby': open ? id || defaultId.current : null,\n    title: shouldShowNativeTitle && typeof title === 'string' ? title : null,\n    ...other,\n    ...children.props,\n    className: clsx(other.className, children.props.className),\n  };\n\n  if (!disableTouchListener) {\n    childrenProps.onTouchStart = handleTouchStart;\n    childrenProps.onTouchEnd = handleTouchEnd;\n  }\n\n  if (!disableHoverListener) {\n    childrenProps.onMouseOver = handleEnter;\n    childrenProps.onMouseLeave = handleLeave;\n  }\n\n  if (!disableFocusListener) {\n    childrenProps.onFocus = handleFocus;\n    childrenProps.onBlur = handleLeave;\n  }\n\n  const interactiveWrapperListeners = interactive\n    ? {\n        onMouseOver: childrenProps.onMouseOver,\n        onMouseLeave: childrenProps.onMouseLeave,\n        onFocus: childrenProps.onFocus,\n        onBlur: childrenProps.onBlur,\n      }\n    : {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (children.props.title) {\n      console.error(\n        [\n          'Material-UI: you have provided a `title` prop to the child of <Tooltip />.',\n          `Remove this title prop \\`${children.props.title}\\` or the Tooltip component.`,\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {React.cloneElement(children, { ref: handleRef, ...childrenProps })}\n      <Popper\n        className={clsx(classes.popper, {\n          [classes.popperInteractive]: interactive,\n        })}\n        placement={placement}\n        anchorEl={childNode}\n        open={childNode ? open : false}\n        id={childrenProps['aria-describedby']}\n        transition\n        {...interactiveWrapperListeners}\n        {...PopperProps}\n      >\n        {({ placement: placementInner, TransitionProps: TransitionPropsInner }) => (\n          <TransitionComponent\n            timeout={theme.transitions.duration.shorter}\n            {...TransitionPropsInner}\n            {...TransitionProps}\n          >\n            <div\n              className={clsx(\n                classes.tooltip,\n                {\n                  [classes.touch]: ignoreNonTouchEvents.current,\n                },\n                classes[`tooltipPlacement${capitalize(placementInner.split('-')[0])}`],\n              )}\n            >\n              {title}\n            </div>\n          </TransitionComponent>\n        )}\n      </Popper>\n    </React.Fragment>\n  );\n});\n\nTooltip.propTypes = {\n  /**\n   * Tooltip reference element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * Do not respond to focus events.\n   */\n  disableFocusListener: PropTypes.bool,\n  /**\n   * Do not respond to hover events.\n   */\n  disableHoverListener: PropTypes.bool,\n  /**\n   * Do not respond to long press touch events.\n   */\n  disableTouchListener: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before showing the tooltip.\n   * This prop won't impact the enter touch delay (`enterTouchDelay`).\n   */\n  enterDelay: PropTypes.number,\n  /**\n   * The number of milliseconds a user must touch the element before showing the tooltip.\n   */\n  enterTouchDelay: PropTypes.number,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * Makes a tooltip interactive, i.e. will not close when the user\n   * hovers over the tooltip before the `leaveDelay` is expired.\n   */\n  interactive: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before hiding the tooltip.\n   * This prop won't impact the leave touch delay (`leaveTouchDelay`).\n   */\n  leaveDelay: PropTypes.number,\n  /**\n   * The number of milliseconds after the user stops touching an element before hiding the tooltip.\n   */\n  leaveTouchDelay: PropTypes.number,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be open.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the tooltip is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * Tooltip placement.\n   */\n  placement: PropTypes.oneOf([\n    'bottom-end',\n    'bottom-start',\n    'bottom',\n    'left-end',\n    'left-start',\n    'left',\n    'right-end',\n    'right-start',\n    'right',\n    'top-end',\n    'top-start',\n    'top',\n  ]),\n  /**\n   * Props applied to the [`Popper`](/api/popper/) element.\n   */\n  PopperProps: PropTypes.object,\n  /**\n   * Tooltip title. Zero-length titles string are never displayed.\n   */\n  title: PropTypes.node.isRequired,\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * Props applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiTooltip' })(Tooltip);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Tooltip/Tooltip.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tooltips"
      ]
    },
    "SpeedDial": {
      "description": "",
      "methods": [],
      "props": {
        "ariaLabel": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The aria-label of the button element.\nAlso used to provide the `id` for the `SpeedDial` element and its children.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "SpeedDialActions to display when the SpeedDial is `open`.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'down'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'up'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The direction the actions open relative to the floating action button.",
          "defaultValue": {
            "value": "'up'",
            "computed": false
          },
          "tags": []
        },
        "FabProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Fab`](/api/fab/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the SpeedDial will be hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component\nprovides a default Icon with animation.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be:`\"toggle\"`, `\"blur\"`, `\"mouseLeave\"`, `\"escapeKeyDown\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be open.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be:`\"toggle\"`, `\"focus\"`, `\"mouseEnter\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the SpeedDial is open.",
          "tags": []
        },
        "openIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display in the SpeedDial Fab when the SpeedDial is open.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.",
          "defaultValue": {
            "value": "Zoom",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "appear": {
                    "name": "number",
                    "required": false
                  },
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `Transition` element.",
          "tags": []
        }
      },
      "name": "SpeedDial",
      "styles": {
        "classes": [
          "root",
          "fab",
          "directionUp",
          "directionDown",
          "directionLeft",
          "directionRight",
          "actions",
          "actionsClosed"
        ],
        "name": "MuiSpeedDial",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "fab": "Styles applied to the Fab component.",
          "directionUp": "Styles applied to the root if direction=\"up\"",
          "directionDown": "Styles applied to the root if direction=\"down\"",
          "directionLeft": "Styles applied to the root if direction=\"left\"",
          "directionRight": "Styles applied to the root if direction=\"right\"",
          "actions": "Styles applied to the actions (`children` wrapper) element.",
          "actionsClosed": "Styles applied to the actions (`children` wrapper) element if `open={false}`."
        },
        "globalClasses": {
          "root": "MuiSpeedDial-root",
          "fab": "MuiSpeedDial-fab",
          "directionUp": "MuiSpeedDial-directionUp",
          "directionDown": "MuiSpeedDial-directionDown",
          "directionLeft": "MuiSpeedDial-directionLeft",
          "directionRight": "MuiSpeedDial-directionRight",
          "actions": "MuiSpeedDial-actions",
          "actionsClosed": "MuiSpeedDial-actionsClosed"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { duration, withStyles } from '@material-ui/core/styles';\nimport Zoom from '@material-ui/core/Zoom';\nimport Fab from '@material-ui/core/Fab';\nimport { capitalize, isMuiElement, useForkRef } from '@material-ui/core/utils';\n\nfunction getOrientation(direction) {\n  if (direction === 'up' || direction === 'down') {\n    return 'vertical';\n  }\n  if (direction === 'right' || direction === 'left') {\n    return 'horizontal';\n  }\n  return undefined;\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nconst dialRadius = 32;\nconst spacingActions = 16;\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    zIndex: theme.zIndex.speedDial,\n    display: 'flex',\n    alignItems: 'center',\n    pointerEvents: 'none',\n  },\n  /* Styles applied to the Fab component. */\n  fab: {\n    pointerEvents: 'auto',\n  },\n  /* Styles applied to the root if direction=\"up\" */\n  directionUp: {\n    flexDirection: 'column-reverse',\n    '& $actions': {\n      flexDirection: 'column-reverse',\n      marginBottom: -dialRadius,\n      paddingBottom: spacingActions + dialRadius,\n    },\n  },\n  /* Styles applied to the root if direction=\"down\" */\n  directionDown: {\n    flexDirection: 'column',\n    '& $actions': {\n      flexDirection: 'column',\n      marginTop: -dialRadius,\n      paddingTop: spacingActions + dialRadius,\n    },\n  },\n  /* Styles applied to the root if direction=\"left\" */\n  directionLeft: {\n    flexDirection: 'row-reverse',\n    '& $actions': {\n      flexDirection: 'row-reverse',\n      marginRight: -dialRadius,\n      paddingRight: spacingActions + dialRadius,\n    },\n  },\n  /* Styles applied to the root if direction=\"right\" */\n  directionRight: {\n    flexDirection: 'row',\n    '& $actions': {\n      flexDirection: 'row',\n      marginLeft: -dialRadius,\n      paddingLeft: spacingActions + dialRadius,\n    },\n  },\n  /* Styles applied to the actions (`children` wrapper) element. */\n  actions: {\n    display: 'flex',\n    pointerEvents: 'auto',\n  },\n  /* Styles applied to the actions (`children` wrapper) element if `open={false}`. */\n  actionsClosed: {\n    transition: 'top 0s linear 0.2s',\n    pointerEvents: 'none',\n  },\n});\n\nconst SpeedDial = React.forwardRef(function SpeedDial(props, ref) {\n  const {\n    ariaLabel,\n    FabProps: { ref: origDialButtonRef, ...FabProps } = {},\n    children: childrenProp,\n    classes,\n    className,\n    direction = 'up',\n    hidden = false,\n    icon,\n    onBlur,\n    onClose,\n    onFocus,\n    onKeyDown,\n    onMouseEnter,\n    onMouseLeave,\n    onOpen,\n    open,\n    openIcon,\n    TransitionComponent = Zoom,\n    transitionDuration = {\n      enter: duration.enteringScreen,\n      exit: duration.leavingScreen,\n    },\n    TransitionProps,\n    ...other\n  } = props;\n\n  const eventTimer = React.useRef();\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(eventTimer.current);\n    };\n  }, []);\n\n  /**\n   * an index in actions.current\n   */\n  const focusedAction = React.useRef(0);\n\n  /**\n   * pressing this key while the focus is on a child SpeedDialAction focuses\n   * the next SpeedDialAction.\n   * It is equal to the first arrow key pressed while focus is on the SpeedDial\n   * that is not orthogonal to the direction.\n   * @type {utils.ArrowKey?}\n   */\n  const nextItemArrowKey = React.useRef();\n\n  /**\n   * refs to the Button that have an action associated to them in this SpeedDial\n   * [Fab, ...(SpeedDialActions > Button)]\n   * @type {HTMLButtonElement[]}\n   */\n  const actions = React.useRef([]);\n  actions.current = [actions.current[0]];\n\n  const handleOwnFabRef = React.useCallback(fabFef => {\n    actions.current[0] = fabFef;\n  }, []);\n  const handleFabRef = useForkRef(origDialButtonRef, handleOwnFabRef);\n\n  /**\n   * creates a ref callback for the Button in a SpeedDialAction\n   * Is called before the original ref callback for Button that was set in buttonProps\n   *\n   * @param dialActionIndex {number}\n   * @param origButtonRef {React.RefObject?}\n   */\n  const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef) => {\n    return buttonRef => {\n      actions.current[dialActionIndex + 1] = buttonRef;\n      if (origButtonRef) {\n        origButtonRef(buttonRef);\n      }\n    };\n  };\n\n  const handleKeyDown = event => {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    const key = event.key.replace('Arrow', '').toLowerCase();\n    const { current: nextItemArrowKeyCurrent = key } = nextItemArrowKey;\n\n    if (event.key === 'Escape') {\n      if (onClose) {\n        actions.current[0].focus();\n        onClose(event, 'escapeKeyDown');\n      }\n      return;\n    }\n\n    if (\n      getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) &&\n      getOrientation(key) !== undefined\n    ) {\n      event.preventDefault();\n\n      const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1;\n\n      // stay within array indices\n      const nextAction = clamp(focusedAction.current + actionStep, 0, actions.current.length - 1);\n      actions.current[nextAction].focus();\n      focusedAction.current = nextAction;\n      nextItemArrowKey.current = nextItemArrowKeyCurrent;\n    }\n  };\n\n  React.useEffect(() => {\n    // actions were closed while navigation state was not reset\n    if (!open) {\n      focusedAction.current = 0;\n      nextItemArrowKey.current = undefined;\n    }\n  }, [open]);\n\n  const handleClose = event => {\n    if (event.type === 'mouseleave' && onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    if (event.type === 'blur' && onBlur) {\n      onBlur(event);\n    }\n\n    clearTimeout(eventTimer.current);\n\n    if (onClose) {\n      if (event.type === 'blur') {\n        event.persist();\n        eventTimer.current = setTimeout(() => {\n          onClose(event, 'blur');\n        });\n      } else {\n        onClose(event, 'mouseLeave');\n      }\n    }\n  };\n\n  const handleClick = event => {\n    if (FabProps.onClick) {\n      FabProps.onClick(event);\n    }\n\n    clearTimeout(eventTimer.current);\n\n    if (open) {\n      if (onClose) {\n        onClose(event, 'toggle');\n      }\n    } else if (onOpen) {\n      onOpen(event, 'toggle');\n    }\n  };\n\n  const handleOpen = event => {\n    if (event.type === 'mouseenter' && onMouseEnter) {\n      onMouseEnter(event);\n    }\n\n    if (event.type === 'focus' && onFocus) {\n      onFocus(event);\n    }\n\n    // When moving the focus between two items,\n    // a chain if blur and focus event is triggered.\n    // We only handle the last event.\n    clearTimeout(eventTimer.current);\n\n    if (onOpen && !open) {\n      event.persist();\n      // Wait for a future focus or click event\n      eventTimer.current = setTimeout(() => {\n        const eventMap = {\n          focus: 'focus',\n          mouseenter: 'mouseEnter',\n        };\n\n        onOpen(event, eventMap[event.type]);\n      });\n    }\n  };\n\n  // Filter the label for valid id characters.\n  const id = ariaLabel.replace(/^[^a-z]+|[^\\w:.-]+/gi, '');\n\n  const allItems = React.Children.toArray(childrenProp).filter(child => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (child.type === React.Fragment) {\n        console.error(\n          [\n            \"Material-UI: the SpeedDial component doesn't accept a Fragment as a child.\",\n            'Consider providing an array instead.',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    return React.isValidElement(child);\n  });\n\n  const children = allItems.map((child, index) => {\n    const { FabProps: { ref: origButtonRef, ...ChildFabProps } = {} } = child.props;\n\n    return React.cloneElement(child, {\n      FabProps: {\n        ...ChildFabProps,\n        ref: createHandleSpeedDialActionButtonRef(index, origButtonRef),\n      },\n      delay: 30 * (open ? index : allItems.length - index),\n      open,\n      id: `${id}-action-${index}`,\n    });\n  });\n\n  return (\n    <div\n      className={clsx(classes.root, classes[`direction${capitalize(direction)}`], className)}\n      ref={ref}\n      role=\"presentation\"\n      onKeyDown={handleKeyDown}\n      onBlur={handleClose}\n      onFocus={handleOpen}\n      onMouseEnter={handleOpen}\n      onMouseLeave={handleClose}\n      {...other}\n    >\n      <TransitionComponent\n        in={!hidden}\n        timeout={transitionDuration}\n        unmountOnExit\n        {...TransitionProps}\n      >\n        <Fab\n          color=\"primary\"\n          aria-label={ariaLabel}\n          aria-haspopup=\"true\"\n          aria-expanded={open}\n          aria-controls={`${id}-actions`}\n          {...FabProps}\n          onClick={handleClick}\n          className={clsx(classes.fab, FabProps.className)}\n          ref={handleFabRef}\n        >\n          {React.isValidElement(icon) && isMuiElement(icon, ['SpeedDialIcon'])\n            ? React.cloneElement(icon, { open })\n            : icon}\n        </Fab>\n      </TransitionComponent>\n      <div\n        id={`${id}-actions`}\n        role=\"menu\"\n        aria-orientation={getOrientation(direction)}\n        className={clsx(classes.actions, { [classes.actionsClosed]: !open })}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n\nSpeedDial.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The aria-label of the button element.\n   * Also used to provide the `id` for the `SpeedDial` element and its children.\n   */\n  ariaLabel: PropTypes.string.isRequired,\n  /**\n   * SpeedDialActions to display when the SpeedDial is `open`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The direction the actions open relative to the floating action button.\n   */\n  direction: PropTypes.oneOf(['down', 'left', 'right', 'up']),\n  /**\n   * Props applied to the [`Fab`](/api/fab/) element.\n   */\n  FabProps: PropTypes.object,\n  /**\n   * If `true`, the SpeedDial will be hidden.\n   */\n  hidden: PropTypes.bool,\n  /**\n   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component\n   * provides a default Icon with animation.\n   */\n  icon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be:`\"toggle\"`, `\"blur\"`, `\"mouseLeave\"`, `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be open.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be:`\"toggle\"`, `\"focus\"`, `\"mouseEnter\"`.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the SpeedDial is open.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * The icon to display in the SpeedDial Fab when the SpeedDial is open.\n   */\n  openIcon: PropTypes.node,\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      appear: PropTypes.number,\n      enter: PropTypes.number,\n      exit: PropTypes.number,\n    }),\n  ]),\n  /**\n   * Props applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiSpeedDial' })(SpeedDial);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui-lab/src/SpeedDial/SpeedDial.js",
      "inheritance": null,
      "usedInPages": [
        "/components/speed-dial"
      ]
    },
    "Chip": {
      "description": "Chips represent complex entities in small blocks, such as a contact.",
      "methods": [],
      "props": {
        "avatar": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Avatar element.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "unsupportedProp"
          },
          "required": false,
          "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "clickable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, the chip will appear clickable, and will raise when pressed,\neven if the onClick prop is not defined.\nIf false, the chip will not be clickable, even if onClick prop is defined.\nThis can be used, for example,\nalong with the component prop to indicate an anchor Chip is clickable.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "tags": []
        },
        "deleteIcon": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Override the default delete icon element. Shown only if `onDelete` is set.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the chip should be displayed in a disabled state.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "icon": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "Icon element.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the label.",
          "tags": []
        },
        "onDelete": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function fired when the delete icon is clicked.\nIf set, the delete icon will be shown.",
          "tags": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The size of the chip.",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Chip",
      "styles": {
        "classes": [
          "root",
          "sizeSmall",
          "colorPrimary",
          "colorSecondary",
          "disabled",
          "clickable",
          "clickableColorPrimary",
          "clickableColorSecondary",
          "deletable",
          "deletableColorPrimary",
          "deletableColorSecondary",
          "outlined",
          "outlinedPrimary",
          "outlinedSecondary",
          "avatar",
          "avatarSmall",
          "avatarColorPrimary",
          "avatarColorSecondary",
          "icon",
          "iconSmall",
          "iconColorPrimary",
          "iconColorSecondary",
          "label",
          "labelSmall",
          "deleteIcon",
          "deleteIconSmall",
          "deleteIconColorPrimary",
          "deleteIconColorSecondary",
          "deleteIconOutlinedColorPrimary",
          "deleteIconOutlinedColorSecondary"
        ],
        "name": "MuiChip",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "clickable": "Styles applied to the root element if `onClick` is defined or `clickable={true}`.",
          "clickableColorPrimary": "Styles applied to the root element if `onClick` and `color=\"primary\"` is defined or `clickable={true}`.",
          "clickableColorSecondary": "Styles applied to the root element if `onClick` and `color=\"secondary\"` is defined or `clickable={true}`.",
          "deletable": "Styles applied to the root element if `onDelete` is defined.",
          "deletableColorPrimary": "Styles applied to the root element if `onDelete` and `color=\"primary\"` is defined.",
          "deletableColorSecondary": "Styles applied to the root element if `onDelete` and `color=\"secondary\"` is defined.",
          "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
          "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
          "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
          "avatar": "Styles applied to the `avatar` element.",
          "avatarColorPrimary": "Styles applied to the `avatar` element if `color=\"primary\"`.",
          "avatarColorSecondary": "Styles applied to the `avatar` element if `color=\"secondary\"`.",
          "icon": "Styles applied to the `icon` element.",
          "iconSmall": "Styles applied to the `icon` element if `size=\"small\"`.",
          "iconColorPrimary": "Styles applied to the `icon` element if `color=\"primary\"`.",
          "iconColorSecondary": "Styles applied to the `icon` element if `color=\"secondary\"`.",
          "label": "Styles applied to the label `span` element`.",
          "deleteIcon": "Styles applied to the `deleteIcon` element.",
          "deleteIconSmall": "Styles applied to the `deleteIcon` element if `size=\"small\"`.",
          "deleteIconColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"default\"`.",
          "deleteIconColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"default\"`.",
          "deleteIconOutlinedColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"outlined\"`.",
          "deleteIconOutlinedColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiChip-root",
          "sizeSmall": "MuiChip-sizeSmall",
          "colorPrimary": "MuiChip-colorPrimary",
          "colorSecondary": "MuiChip-colorSecondary",
          "disabled": "Mui-disabled",
          "clickable": "MuiChip-clickable",
          "clickableColorPrimary": "MuiChip-clickableColorPrimary",
          "clickableColorSecondary": "MuiChip-clickableColorSecondary",
          "deletable": "MuiChip-deletable",
          "deletableColorPrimary": "MuiChip-deletableColorPrimary",
          "deletableColorSecondary": "MuiChip-deletableColorSecondary",
          "outlined": "MuiChip-outlined",
          "outlinedPrimary": "MuiChip-outlinedPrimary",
          "outlinedSecondary": "MuiChip-outlinedSecondary",
          "avatar": "MuiChip-avatar",
          "avatarSmall": "MuiChip-avatarSmall",
          "avatarColorPrimary": "MuiChip-avatarColorPrimary",
          "avatarColorSecondary": "MuiChip-avatarColorSecondary",
          "icon": "MuiChip-icon",
          "iconSmall": "MuiChip-iconSmall",
          "iconColorPrimary": "MuiChip-iconColorPrimary",
          "iconColorSecondary": "MuiChip-iconColorSecondary",
          "label": "MuiChip-label",
          "labelSmall": "MuiChip-labelSmall",
          "deleteIcon": "MuiChip-deleteIcon",
          "deleteIconSmall": "MuiChip-deleteIconSmall",
          "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
          "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
          "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
          "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CancelIcon from '../internal/svg-icons/Cancel';\nimport withStyles from '../styles/withStyles';\nimport { emphasize, fade } from '../styles/colorManipulator';\nimport useForkRef from '../utils/useForkRef';\nimport unsupportedProp from '../utils/unsupportedProp';\nimport capitalize from '../utils/capitalize';\nimport ButtonBase from '../ButtonBase';\nimport '../Avatar'; // So we don't have any override priority issue.\n\nexport const styles = theme => {\n  const backgroundColor =\n    theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];\n  const deleteIconColor = fade(theme.palette.text.primary, 0.26);\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(13),\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: 32,\n      color: theme.palette.getContrastText(backgroundColor),\n      backgroundColor,\n      borderRadius: 32 / 2,\n      whiteSpace: 'nowrap',\n      transition: theme.transitions.create(['background-color', 'box-shadow']),\n      // label will inherit this from root, then `clickable` class overrides this for both\n      cursor: 'default',\n      // We disable the focus ring for mouse, touch and keyboard users.\n      outline: 0,\n      textDecoration: 'none',\n      border: 'none', // Remove `button` border\n      padding: 0, // Remove `button` padding\n      verticalAlign: 'middle',\n      boxSizing: 'border-box',\n      '&$disabled': {\n        opacity: 0.5,\n        pointerEvents: 'none',\n      },\n    },\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      height: 24,\n    },\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText,\n    },\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n    },\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the root element if `onClick` is defined or `clickable={true}`. */\n    clickable: {\n      userSelect: 'none',\n      WebkitTapHighlightColor: 'transparent', // Remove grey highlight\n      cursor: 'pointer',\n      '&:hover, &:focus': {\n        backgroundColor: emphasize(backgroundColor, 0.08),\n      },\n      '&:active': {\n        boxShadow: theme.shadows[1],\n      },\n    },\n    /* Styles applied to the root element if `onClick` and `color=\"primary\"` is defined or `clickable={true}`. */\n    clickableColorPrimary: {\n      '&:hover, &:focus': {\n        backgroundColor: emphasize(theme.palette.primary.main, 0.08),\n      },\n    },\n    /* Styles applied to the root element if `onClick` and `color=\"secondary\"` is defined or `clickable={true}`. */\n    clickableColorSecondary: {\n      '&:hover, &:focus': {\n        backgroundColor: emphasize(theme.palette.secondary.main, 0.08),\n      },\n    },\n    /* Styles applied to the root element if `onDelete` is defined. */\n    deletable: {\n      '&:focus': {\n        backgroundColor: emphasize(backgroundColor, 0.08),\n      },\n    },\n    /* Styles applied to the root element if `onDelete` and `color=\"primary\"` is defined. */\n    deletableColorPrimary: {\n      '&:focus': {\n        backgroundColor: emphasize(theme.palette.primary.main, 0.2),\n      },\n    },\n    /* Styles applied to the root element if `onDelete` and `color=\"secondary\"` is defined. */\n    deletableColorSecondary: {\n      '&:focus': {\n        backgroundColor: emphasize(theme.palette.secondary.main, 0.2),\n      },\n    },\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      backgroundColor: 'transparent',\n      border: `1px solid ${\n        theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'\n      }`,\n      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {\n        backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n      },\n      '& $avatar': {\n        marginLeft: 4,\n      },\n      '& $avatarSmall': {\n        marginLeft: 2,\n      },\n      '& $icon': {\n        marginLeft: 4,\n      },\n      '& $iconSmall': {\n        marginLeft: 2,\n      },\n      '& $deleteIcon': {\n        marginRight: 5,\n      },\n      '& $deleteIconSmall': {\n        marginRight: 3,\n      },\n    },\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n    outlinedPrimary: {\n      color: theme.palette.primary.main,\n      border: `1px solid ${theme.palette.primary.main}`,\n      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n      },\n    },\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    outlinedSecondary: {\n      color: theme.palette.secondary.main,\n      border: `1px solid ${theme.palette.secondary.main}`,\n      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n      },\n    },\n    /* Styles applied to the `avatar` element. */\n    avatar: {\n      marginLeft: 5,\n      marginRight: -6,\n      width: 24,\n      height: 24,\n      color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],\n      fontSize: theme.typography.pxToRem(12),\n    },\n    avatarSmall: {\n      marginLeft: 4,\n      marginRight: -4,\n      width: 18,\n      height: 18,\n      fontSize: theme.typography.pxToRem(10),\n    },\n    /* Styles applied to the `avatar` element if `color=\"primary\"`. */\n    avatarColorPrimary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.dark,\n    },\n    /* Styles applied to the `avatar` element if `color=\"secondary\"`. */\n    avatarColorSecondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.dark,\n    },\n    /* Styles applied to the `icon` element. */\n    icon: {\n      color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],\n      marginLeft: 5,\n      marginRight: -6,\n    },\n    /* Styles applied to the `icon` element if `size=\"small\"`. */\n    iconSmall: {\n      width: 18,\n      height: 18,\n      marginLeft: 4,\n      marginRight: -4,\n    },\n    /* Styles applied to the `icon` element if `color=\"primary\"`. */\n    iconColorPrimary: {\n      color: 'inherit',\n    },\n    /* Styles applied to the `icon` element if `color=\"secondary\"`. */\n    iconColorSecondary: {\n      color: 'inherit',\n    },\n    /* Styles applied to the label `span` element`. */\n    label: {\n      display: 'flex',\n      alignItems: 'center',\n      paddingLeft: 12,\n      paddingRight: 12,\n      whiteSpace: 'nowrap',\n    },\n    labelSmall: {\n      paddingLeft: 8,\n      paddingRight: 8,\n    },\n    /* Styles applied to the `deleteIcon` element. */\n    deleteIcon: {\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      color: deleteIconColor,\n      height: 22,\n      width: 22,\n      cursor: 'pointer',\n      margin: '0 5px 0 -6px',\n      '&:hover': {\n        color: fade(deleteIconColor, 0.4),\n      },\n    },\n    /* Styles applied to the `deleteIcon` element if `size=\"small\"`. */\n    deleteIconSmall: {\n      height: 16,\n      width: 16,\n      marginRight: 4,\n      marginLeft: -4,\n    },\n    /* Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"default\"`. */\n    deleteIconColorPrimary: {\n      color: fade(theme.palette.primary.contrastText, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.primary.contrastText,\n      },\n    },\n    /* Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"default\"`. */\n    deleteIconColorSecondary: {\n      color: fade(theme.palette.secondary.contrastText, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.secondary.contrastText,\n      },\n    },\n    /* Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"outlined\"`. */\n    deleteIconOutlinedColorPrimary: {\n      color: fade(theme.palette.primary.main, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.primary.main,\n      },\n    },\n    /* Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"outlined\"`. */\n    deleteIconOutlinedColorSecondary: {\n      color: fade(theme.palette.secondary.main, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.secondary.main,\n      },\n    },\n  };\n};\n\n/**\n * Chips represent complex entities in small blocks, such as a contact.\n */\nconst Chip = React.forwardRef(function Chip(props, ref) {\n  const {\n    avatar: avatarProp,\n    classes,\n    className,\n    clickable: clickableProp,\n    color = 'default',\n    component: ComponentProp,\n    deleteIcon: deleteIconProp,\n    disabled = false,\n    icon: iconProp,\n    label,\n    onClick,\n    onDelete,\n    onKeyDown,\n    onKeyUp,\n    size = 'medium',\n    variant = 'default',\n    ...other\n  } = props;\n\n  const chipRef = React.useRef(null);\n  const handleRef = useForkRef(chipRef, ref);\n\n  const handleDeleteIconClick = event => {\n    // Stop the event from bubbling up to the `Chip`\n    event.stopPropagation();\n    if (onDelete) {\n      onDelete(event);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget !== event.target) {\n      return;\n    }\n\n    if ([' ', 'Enter', 'Backspace', 'Delete', 'Escape'].indexOf(event.key) !== -1) {\n      event.preventDefault();\n    }\n  };\n\n  const handleKeyUp = event => {\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget !== event.target) {\n      return;\n    }\n\n    const key = event.key;\n    if (onDelete && (key === 'Backspace' || key === 'Delete')) {\n      onDelete(event);\n    } else if (key === 'Escape' && chipRef.current) {\n      chipRef.current.blur();\n    }\n  };\n\n  const clickable = clickableProp !== false && onClick ? true : clickableProp;\n  const small = size === 'small';\n\n  const Component = ComponentProp || (clickable ? ButtonBase : 'div');\n  const moreProps = Component === ButtonBase ? { component: 'div' } : {};\n\n  let deleteIcon = null;\n  if (onDelete) {\n    const customClasses = clsx({\n      [classes.deleteIconSmall]: small,\n      [classes[`deleteIconColor${capitalize(color)}`]]:\n        color !== 'default' && variant !== 'outlined',\n      [classes[`deleteIconOutlinedColor${capitalize(color)}`]]:\n        color !== 'default' && variant === 'outlined',\n    });\n\n    deleteIcon =\n      deleteIconProp && React.isValidElement(deleteIconProp) ? (\n        React.cloneElement(deleteIconProp, {\n          className: clsx(deleteIconProp.props.className, classes.deleteIcon, customClasses),\n          onClick: handleDeleteIconClick,\n        })\n      ) : (\n        <CancelIcon\n          className={clsx(classes.deleteIcon, customClasses)}\n          onClick={handleDeleteIconClick}\n        />\n      );\n  }\n\n  let avatar = null;\n  if (avatarProp && React.isValidElement(avatarProp)) {\n    avatar = React.cloneElement(avatarProp, {\n      className: clsx(classes.avatar, avatarProp.props.className, {\n        [classes.avatarSmall]: small,\n        [classes[`avatarColor${capitalize(color)}`]]: color !== 'default',\n      }),\n    });\n  }\n\n  let icon = null;\n  if (iconProp && React.isValidElement(iconProp)) {\n    icon = React.cloneElement(iconProp, {\n      className: clsx(classes.icon, iconProp.props.className, {\n        [classes.iconSmall]: small,\n        [classes[`iconColor${capitalize(color)}`]]: color !== 'default',\n      }),\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (avatar && icon) {\n      console.error(\n        'Material-UI: the Chip component can not handle the avatar ' +\n          'and the icon prop at the same time. Pick one.',\n      );\n    }\n  }\n\n  return (\n    <Component\n      role={clickable || onDelete ? 'button' : undefined}\n      className={clsx(\n        classes.root,\n        {\n          [classes.disabled]: disabled,\n          [classes.sizeSmall]: small,\n          [classes[`color${capitalize(color)}`]]: color !== 'default',\n          [classes.clickable]: clickable,\n          [classes[`clickableColor${capitalize(color)}`]]: clickable && color !== 'default',\n          [classes.deletable]: onDelete,\n          [classes[`deletableColor${capitalize(color)}`]]: onDelete && color !== 'default',\n          [classes.outlined]: variant === 'outlined',\n          [classes.outlinedPrimary]: variant === 'outlined' && color === 'primary',\n          [classes.outlinedSecondary]: variant === 'outlined' && color === 'secondary',\n        },\n        className,\n      )}\n      aria-disabled={disabled ? true : undefined}\n      tabIndex={clickable || onDelete ? 0 : undefined}\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      ref={handleRef}\n      {...moreProps}\n      {...other}\n    >\n      {avatar || icon}\n      <span\n        className={clsx(classes.label, {\n          [classes.labelSmall]: small,\n        })}\n      >\n        {label}\n      </span>\n      {deleteIcon}\n    </Component>\n  );\n});\n\nChip.propTypes = {\n  /**\n   * Avatar element.\n   */\n  avatar: PropTypes.element,\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If true, the chip will appear clickable, and will raise when pressed,\n   * even if the onClick prop is not defined.\n   * If false, the chip will not be clickable, even if onClick prop is defined.\n   * This can be used, for example,\n   * along with the component prop to indicate an anchor Chip is clickable.\n   */\n  clickable: PropTypes.bool,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Override the default delete icon element. Shown only if `onDelete` is set.\n   */\n  deleteIcon: PropTypes.element,\n  /**\n   * If `true`, the chip should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Icon element.\n   */\n  icon: PropTypes.element,\n  /**\n   * The content of the label.\n   */\n  label: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * Callback function fired when the delete icon is clicked.\n   * If set, the delete icon will be shown.\n   */\n  onDelete: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * The size of the chip.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['default', 'outlined']),\n};\n\nexport default withStyles(styles, { name: 'MuiChip' })(Chip);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Chip/Chip.js",
      "inheritance": null,
      "usedInPages": [
        "/components/chips"
      ]
    },
    "InputBase": {
      "description": "`InputBase` contains as few styles as possible.\nIt aims to be a simple building block for creating an input.\nIt contains a load of style reset and some state logic.",
      "methods": [],
      "props": {
        "autoComplete": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
          "tags": []
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be focused during the first mount.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The CSS class name of the wrapper element.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default `input` element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be disabled.",
          "tags": []
        },
        "endAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "End `InputAdornment` for this component.",
          "tags": []
        },
        "error": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "fullWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the input will take up the full width of its container.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the `input` element.",
          "tags": []
        },
        "inputComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the `input` element.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'input'",
            "computed": false
          },
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "inputRef": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Pass a ref to the `input` element.",
          "tags": []
        },
        "margin": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'dense'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
          "tags": []
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a textarea element will be rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value is changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The short hint displayed in the input before the user enters a value.",
          "tags": []
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
          "tags": []
        },
        "required": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the `input` element will be required.",
          "tags": []
        },
        "rows": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "rowsMax": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Maximum number of rows to display when multiline option is set to true.",
          "tags": []
        },
        "select": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Should be `true` when the component hosts a select.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "startAdornment": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Start `InputAdornment` for this component.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the `input` element, required for a controlled component.",
          "tags": []
        }
      },
      "name": "InputBase",
      "styles": {
        "classes": [
          "root",
          "formControl",
          "focused",
          "disabled",
          "adornedStart",
          "adornedEnd",
          "error",
          "marginDense",
          "multiline",
          "colorSecondary",
          "fullWidth",
          "input",
          "inputMarginDense",
          "inputSelect",
          "inputMultiline",
          "inputTypeSearch",
          "inputAdornedStart",
          "inputAdornedEnd",
          "inputHiddenLabel"
        ],
        "name": "MuiInputBase",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
          "focused": "Styles applied to the root element if the component is focused.",
          "disabled": "Styles applied to the root element if `disabled={true}`.",
          "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
          "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
          "error": "Styles applied to the root element if `error={true}`.",
          "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "multiline": "Styles applied to the root element if `multiline={true}`.",
          "colorSecondary": "Styles applied to the root element if the color is secondary.",
          "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
          "input": "Styles applied to the `input` element.",
          "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
          "inputSelect": "Styles applied to the `input` element if `select={true}`.",
          "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
          "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`.",
          "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
          "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided.",
          "inputHiddenLabel": "Styles applied to the `input` element if `hiddenLabel={true}`."
        },
        "globalClasses": {
          "root": "MuiInputBase-root",
          "formControl": "MuiInputBase-formControl",
          "focused": "Mui-focused",
          "disabled": "Mui-disabled",
          "adornedStart": "MuiInputBase-adornedStart",
          "adornedEnd": "MuiInputBase-adornedEnd",
          "error": "Mui-error",
          "marginDense": "MuiInputBase-marginDense",
          "multiline": "MuiInputBase-multiline",
          "colorSecondary": "MuiInputBase-colorSecondary",
          "fullWidth": "MuiInputBase-fullWidth",
          "input": "MuiInputBase-input",
          "inputMarginDense": "MuiInputBase-inputMarginDense",
          "inputSelect": "MuiInputBase-inputSelect",
          "inputMultiline": "MuiInputBase-inputMultiline",
          "inputTypeSearch": "MuiInputBase-inputTypeSearch",
          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel"
        }
      },
      "src": "/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport formControlState from '../FormControl/formControlState';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport TextareaAutosize from '../TextareaAutosize';\nimport { isFilled } from './utils';\n\nexport const styles = theme => {\n  const light = theme.palette.type === 'light';\n  const placeholder = {\n    color: 'currentColor',\n    opacity: light ? 0.42 : 0.5,\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.shorter,\n    }),\n  };\n  const placeholderHidden = {\n    opacity: '0 !important',\n  };\n  const placeholderVisible = {\n    opacity: light ? 0.42 : 0.5,\n  };\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      // Mimics the default input display property used by browsers for an input.\n      fontFamily: theme.typography.fontFamily,\n      color: theme.palette.text.primary,\n      fontSize: theme.typography.pxToRem(16),\n      lineHeight: '1.1875em', // Reset (19px), match the native input line-height\n      boxSizing: 'border-box', // Prevent padding issue with fullWidth.\n      position: 'relative',\n      cursor: 'text',\n      display: 'inline-flex',\n      alignItems: 'center',\n      '&$disabled': {\n        color: theme.palette.text.disabled,\n        cursor: 'default',\n      },\n    },\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {},\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {},\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {},\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: `${8 - 2}px 0 ${8 - 1}px`,\n      '&$marginDense': {\n        paddingTop: 4 - 1,\n      },\n    },\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {},\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%',\n    },\n    /* Styles applied to the `input` element. */\n    input: {\n      font: 'inherit',\n      color: 'currentColor',\n      padding: `${8 - 2}px 0 ${8 - 1}px`,\n      border: 0,\n      boxSizing: 'content-box',\n      background: 'none',\n      height: '1.1875em', // Reset (19px), match the native input line-height\n      margin: 0, // Reset for Safari\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      display: 'block',\n      // Make the flex item shrink with Firefox\n      minWidth: 0,\n      width: '100%', // Fix IE 11 width issue\n      animationName: '$auto-fill-cancel',\n      '&::-webkit-input-placeholder': placeholder,\n      '&::-moz-placeholder': placeholder, // Firefox 19+\n      '&:-ms-input-placeholder': placeholder, // IE 11\n      '&::-ms-input-placeholder': placeholder, // Edge\n      '&:focus': {\n        outline: 0,\n      },\n      // Reset Firefox invalid required input style\n      '&:invalid': {\n        boxShadow: 'none',\n      },\n      '&::-webkit-search-decoration': {\n        // Remove the padding when type=search.\n        '-webkit-appearance': 'none',\n      },\n      // Show and hide the placeholder logic\n      'label[data-shrink=false] + $formControl &': {\n        '&::-webkit-input-placeholder': placeholderHidden,\n        '&::-moz-placeholder': placeholderHidden, // Firefox 19+\n        '&:-ms-input-placeholder': placeholderHidden, // IE 11\n        '&::-ms-input-placeholder': placeholderHidden, // Edge\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\n        '&:focus::-moz-placeholder': placeholderVisible, // Firefox 19+\n        '&:focus:-ms-input-placeholder': placeholderVisible, // IE 11\n        '&:focus::-ms-input-placeholder': placeholderVisible, // Edge\n      },\n      '&$disabled': {\n        opacity: 1, // Reset iOS opacity\n      },\n      '&:-webkit-autofill': {\n        animationDuration: '5000s',\n        animationName: '$auto-fill',\n      },\n    },\n    '@keyframes auto-fill': {\n      from: {},\n    },\n    '@keyframes auto-fill-cancel': {\n      from: {},\n    },\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 4 - 1,\n    },\n    /* Styles applied to the `input` element if `select={true}`. */\n    inputSelect: {\n      paddingRight: 24,\n    },\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      height: 'auto',\n      resize: 'none',\n      padding: 0,\n    },\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {\n      // Improve type search style.\n      '-moz-appearance': 'textfield',\n      '-webkit-appearance': 'textfield',\n    },\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {},\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {},\n    /* Styles applied to the `input` element if `hiddenLabel={true}`. */\n    inputHiddenLabel: {},\n  };\n};\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\n/**\n * `InputBase` contains as few styles as possible.\n * It aims to be a simple building block for creating an input.\n * It contains a load of style reset and some state logic.\n */\nconst InputBase = React.forwardRef(function InputBase(props, ref) {\n  const {\n    'aria-describedby': ariaDescribedby,\n    autoComplete,\n    autoFocus,\n    classes,\n    className,\n    color,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    fullWidth = false,\n    id,\n    inputComponent = 'input',\n    inputProps: inputPropsProp = {},\n    inputRef: inputRefProp,\n    margin,\n    multiline = false,\n    name,\n    onBlur,\n    onChange,\n    onClick,\n    onFocus,\n    onKeyDown,\n    onKeyUp,\n    placeholder,\n    readOnly,\n    renderSuffix,\n    rows,\n    rowsMax,\n    select = false,\n    startAdornment,\n    type = 'text',\n    value: valueProp,\n    ...other\n  } = props;\n\n  const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;\n  const { current: isControlled } = React.useRef(value != null);\n\n  const inputRef = React.useRef();\n  const handleInputRefWarning = React.useCallback(instance => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (instance && !(instance instanceof HTMLInputElement) && !instance.focus) {\n        console.error(\n          [\n            'Material-UI: you have provided a `inputComponent` to the input component',\n            'that does not correctly handle the `inputRef` prop.',\n            'Make sure the `inputRef` prop is called with a HTMLInputElement.',\n          ].join('\\n'),\n        );\n      }\n    }\n  }, []);\n  const handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);\n  const handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);\n  const handleInputRef = useForkRef(inputRef, handleInputRefProp);\n\n  const [focused, setFocused] = React.useState(false);\n  const muiFormControl = useFormControl();\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (muiFormControl) {\n        return muiFormControl.registerEffect();\n      }\n\n      return undefined;\n    }, [muiFormControl]);\n  }\n\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['color', 'disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled'],\n  });\n  fcs.focused = muiFormControl ? muiFormControl.focused : focused;\n\n  // The blur won't fire when the disabled state is set on a focused input.\n  // We need to book keep the focused state manually.\n  React.useEffect(() => {\n    if (!muiFormControl && disabled && focused) {\n      setFocused(false);\n      if (onBlur) {\n        onBlur();\n      }\n    }\n  }, [muiFormControl, disabled, focused, onBlur]);\n\n  const onFilled = muiFormControl && muiFormControl.onFilled;\n  const onEmpty = muiFormControl && muiFormControl.onEmpty;\n\n  const checkDirty = React.useCallback(\n    obj => {\n      if (isFilled(obj)) {\n        if (onFilled) {\n          onFilled();\n        }\n      } else if (onEmpty) {\n        onEmpty();\n      }\n    },\n    [onFilled, onEmpty],\n  );\n\n  useEnhancedEffect(() => {\n    if (isControlled) {\n      checkDirty({ value });\n    }\n  }, [value, checkDirty, isControlled]);\n\n  const handleFocus = event => {\n    // Fix a bug with IE 11 where the focus/blur events are triggered\n    // while the input is disabled.\n    if (fcs.disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n    if (inputPropsProp.onFocus) {\n      inputPropsProp.onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    } else {\n      setFocused(true);\n    }\n  };\n\n  const handleBlur = event => {\n    if (onBlur) {\n      onBlur(event);\n    }\n    if (inputPropsProp.onBlur) {\n      inputPropsProp.onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    } else {\n      setFocused(false);\n    }\n  };\n\n  const handleChange = (event, ...args) => {\n    if (!isControlled) {\n      const element = event.target || inputRef.current;\n      if (element == null) {\n        throw new TypeError(\n          'Material-UI: Expected valid input target. ' +\n            'Did you use a custom `inputComponent` and forget to forward refs? ' +\n            'See https://material-ui.com/r/input-component-ref-interface for more info.',\n        );\n      }\n\n      checkDirty({\n        value: element.value,\n      });\n    }\n\n    if (inputPropsProp.onChange) {\n      inputPropsProp.onChange(event, ...args);\n    }\n\n    // Perform in the willUpdate\n    if (onChange) {\n      onChange(event, ...args);\n    }\n  };\n\n  // Check the input state on mount, in case it was filled by the user\n  // or auto filled by the browser before the hydration (for SSR).\n  React.useEffect(() => {\n    checkDirty(inputRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleClick = event => {\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  let InputComponent = inputComponent;\n  let inputProps = {\n    ...inputPropsProp,\n    ref: handleInputRef,\n  };\n\n  if (typeof InputComponent !== 'string') {\n    inputProps = {\n      // Rename ref to inputRef as we don't know the\n      // provided `inputComponent` structure.\n      inputRef: handleInputRef,\n      type,\n      ...inputProps,\n      ref: null,\n    };\n  } else if (multiline) {\n    if (rows && !rowsMax) {\n      InputComponent = 'textarea';\n    } else {\n      inputProps = {\n        rows,\n        rowsMax,\n        ...inputProps,\n      };\n      InputComponent = TextareaAutosize;\n    }\n  } else {\n    inputProps = {\n      type,\n      ...inputProps,\n    };\n  }\n\n  const handleAutoFill = event => {\n    // Provide a fake value as Chrome might not let you access it for security reasons.\n    checkDirty(\n      event.animationName.indexOf('auto-fill-cancel') !== -1 ? inputRef.current : { value: 'x' },\n    );\n  };\n\n  React.useEffect(() => {\n    if (muiFormControl) {\n      muiFormControl.setAdornedStart(Boolean(startAdornment));\n    }\n  }, [muiFormControl, startAdornment]);\n\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        classes[`color${capitalize(fcs.color || 'primary')}`],\n        {\n          [classes.disabled]: fcs.disabled,\n          [classes.error]: fcs.error,\n          [classes.fullWidth]: fullWidth,\n          [classes.focused]: fcs.focused,\n          [classes.formControl]: muiFormControl,\n          [classes.marginDense]: fcs.margin === 'dense',\n          [classes.multiline]: multiline,\n          [classes.adornedStart]: startAdornment,\n          [classes.adornedEnd]: endAdornment,\n        },\n        className,\n      )}\n      onClick={handleClick}\n      ref={ref}\n      {...other}\n    >\n      {startAdornment}\n      <FormControlContext.Provider value={null}>\n        <InputComponent\n          aria-invalid={fcs.error}\n          aria-describedby={ariaDescribedby}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          defaultValue={defaultValue}\n          disabled={fcs.disabled}\n          id={id}\n          onAnimationStart={handleAutoFill}\n          name={name}\n          placeholder={placeholder}\n          readOnly={readOnly}\n          required={fcs.required}\n          rows={rows}\n          value={value}\n          onKeyDown={onKeyDown}\n          onKeyUp={onKeyUp}\n          {...inputProps}\n          className={clsx(\n            classes.input,\n            {\n              [classes.disabled]: fcs.disabled,\n              [classes.inputTypeSearch]: type === 'search',\n              [classes.inputMultiline]: multiline,\n              [classes.inputSelect]: select,\n              [classes.inputMarginDense]: fcs.margin === 'dense',\n              [classes.inputHiddenLabel]: fcs.hiddenLabel,\n              [classes.inputAdornedStart]: startAdornment,\n              [classes.inputAdornedEnd]: endAdornment,\n            },\n            inputPropsProp.className,\n          )}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          onFocus={handleFocus}\n        />\n      </FormControlContext.Provider>\n      {endAdornment}\n      {renderSuffix\n        ? renderSuffix({\n            ...fcs,\n            startAdornment,\n          })\n        : null}\n    </div>\n  );\n});\n\nInputBase.propTypes = {\n  /**\n   * @ignore\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  renderSuffix: PropTypes.func,\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Should be `true` when the component hosts a select.\n   */\n  select: PropTypes.bool,\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n};\n\nexport default withStyles(styles, { name: 'MuiInputBase' })(InputBase);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/InputBase/InputBase.js",
      "inheritance": null,
      "usedInPages": [
        "/components/text-fields"
      ]
    },
    "Modal": {
      "description": "Modal is a lower-level construct that is leveraged by the following components:\n\n- [Dialog](/api/dialog/)\n- [Drawer](/api/drawer/)\n- [Menu](/api/menu/)\n- [Popover](/api/popover/)\n\nIf you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\nrather than directly using Modal.\n\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).",
      "methods": [],
      "props": {
        "BackdropComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "A backdrop component. This prop enables custom backdrop rendering.",
          "defaultValue": {
            "value": "SimpleBackdrop",
            "computed": true
          },
          "tags": []
        },
        "BackdropProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Backdrop`](/api/backdrop/) element.",
          "tags": []
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "elementAcceptingRef.isRequired"
          },
          "required": false,
          "description": "A single child content element.",
          "tags": []
        },
        "closeAfterTransition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "When set to true the Modal waits until a nested Transition is completed before closing.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will have the portal children appended to it.",
          "tags": []
        },
        "disableAutoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableBackdropClick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, clicking the backdrop will not fire any callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableEnforceFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the modal will not prevent focus from leaving the modal while open.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableEscapeKeyDown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, hitting escape will not fire any callback.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disablePortal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRestoreFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the modal will not restore focus to previously focused element once\nmodal is hidden.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableScrollLock": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the scroll lock behavior.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "hideBackdrop": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the backdrop is not rendered.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "keepMounted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Modal.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onBackdropClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the backdrop is clicked.",
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEscapeKeyDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the escape key is pressed,\n`disableEscapeKeyDown` is false and the modal is in focus.",
          "tags": []
        },
        "onRendered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired once the children has been mounted into the `container`.\nIt signals that the `open={true}` prop took effect.\n\nThis prop will be deprecated and removed in v5, the ref can be used instead.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the modal is open.",
          "tags": []
        }
      },
      "name": "Modal",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nimport { elementAcceptingRef } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport Portal from '../Portal';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport zIndex from '../styles/zIndex';\nimport ModalManager, { ariaHidden } from './ModalManager';\nimport TrapFocus from './TrapFocus';\nimport SimpleBackdrop from './SimpleBackdrop';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(container);\n}\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n}\n\n// A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\nconst defaultManager = new ModalManager();\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0,\n  },\n  /* Styles applied to the root element if the `Modal` has exited. */\n  hidden: {\n    visibility: 'hidden',\n  },\n});\n\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * - [Dialog](/api/dialog/)\n * - [Drawer](/api/drawer/)\n * - [Menu](/api/menu/)\n * - [Popover](/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n */\nconst Modal = React.forwardRef(function Modal(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({ name: 'MuiModal', props: { ...inProps }, theme });\n  const {\n    BackdropComponent = SimpleBackdrop,\n    BackdropProps,\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableBackdropClick = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    manager = defaultManager,\n    onBackdropClick,\n    onClose,\n    onEscapeKeyDown,\n    onRendered,\n    open,\n    ...other\n  } = props;\n\n  const [exited, setExited] = React.useState(true);\n  const modal = React.useRef({});\n  const mountNodeRef = React.useRef(null);\n  const modalRef = React.useRef(null);\n  const handleRef = useForkRef(modalRef, ref);\n  const hasTransition = getHasTransition(props);\n\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mountNode = mountNodeRef.current;\n    return modal.current;\n  };\n\n  const handleMounted = () => {\n    manager.mount(getModal(), { disableScrollLock });\n\n    // Fix a bug on Chrome where the scroll isn't initially 0.\n    modalRef.current.scrollTop = 0;\n  };\n\n  const handleOpen = useEventCallback(() => {\n    const resolvedContainer = getContainer(container) || getDoc().body;\n\n    manager.add(getModal(), resolvedContainer);\n\n    // The element was already mounted.\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n\n  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);\n\n  const handlePortalRef = useEventCallback(node => {\n    mountNodeRef.current = node;\n\n    if (!node) {\n      return;\n    }\n\n    if (onRendered) {\n      onRendered();\n    }\n\n    if (open && isTopModal()) {\n      handleMounted();\n    } else {\n      ariaHidden(modalRef.current, true);\n    }\n  });\n\n  const handleClose = React.useCallback(() => {\n    manager.remove(getModal());\n  }, [manager]);\n\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n\n  React.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  const handleExited = () => {\n    setExited(true);\n\n    if (closeAfterTransition) {\n      handleClose();\n    }\n  };\n\n  const handleBackdropClick = event => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (!disableBackdropClick && onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  const handleKeyDown = event => {\n    // We don't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviours like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    }\n\n    // Swallow the event, in case someone is listening for the escape key on the body.\n    event.stopPropagation();\n\n    if (onEscapeKeyDown) {\n      onEscapeKeyDown(event);\n    }\n\n    if (!disableEscapeKeyDown && onClose) {\n      onClose(event, 'escapeKeyDown');\n    }\n  };\n\n  const inlineStyle = styles(theme || { zIndex });\n  const childProps = {};\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = children.props.tabIndex || '-1';\n  }\n\n  // It's a Transition like component\n  if (hasTransition) {\n    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);\n    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);\n  }\n\n  return (\n    <Portal ref={handlePortalRef} container={container} disablePortal={disablePortal}>\n      {/*\n          Marking an element with the role presentation indicates to assistive technology\n          that this element should be ignored; it exists to support the web application and\n          is not meant for humans to interact with directly.\n          https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md\n        */}\n      <div\n        data-mui-test=\"Modal\"\n        ref={handleRef}\n        onKeyDown={handleKeyDown}\n        role=\"presentation\"\n        {...other}\n        style={{\n          ...inlineStyle.root,\n          ...(!open && exited ? inlineStyle.hidden : {}),\n          ...other.style,\n        }}\n      >\n        {hideBackdrop ? null : (\n          <BackdropComponent open={open} onClick={handleBackdropClick} {...BackdropProps} />\n        )}\n        <TrapFocus\n          disableEnforceFocus={disableEnforceFocus}\n          disableAutoFocus={disableAutoFocus}\n          disableRestoreFocus={disableRestoreFocus}\n          getDoc={getDoc}\n          isEnabled={isTopModal}\n          open={open}\n        >\n          {React.cloneElement(children, childProps)}\n        </TrapFocus>\n      </div>\n    </Portal>\n  );\n});\n\nModal.propTypes = {\n  /**\n   * A backdrop component. This prop enables custom backdrop rendering.\n   */\n  BackdropComponent: PropTypes.elementType,\n  /**\n   * Props applied to the [`Backdrop`](/api/backdrop/) element.\n   */\n  BackdropProps: PropTypes.object,\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   */\n  closeAfterTransition: PropTypes.bool,\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n  /**\n   * If `true`, clicking the backdrop will not fire any callback.\n   */\n  disableBackdropClick: PropTypes.bool,\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n  /**\n   * If `true`, hitting escape will not fire any callback.\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n  /**\n   * Disable the scroll lock behavior.\n   */\n  disableScrollLock: PropTypes.bool,\n  /**\n   * If `true`, the backdrop is not rendered.\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   */\n  keepMounted: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  manager: PropTypes.object,\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableEscapeKeyDown` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: PropTypes.func,\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   * It signals that the `open={true}` prop took effect.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func,\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired,\n};\n\nexport default Modal;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Modal/Modal.js",
      "inheritance": null,
      "usedInPages": [
        "/components/modal"
      ]
    },
    "Slider": {
      "description": "",
      "methods": [],
      "props": {
        "aria-label": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.string, props => {\n  const range = Array.isArray(props.value || props.defaultValue);\n\n  if (range && props['aria-label'] != null) {\n    return new Error(\n      'Material-UI: you need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.',\n    );\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "The label of the slider.",
          "tags": []
        },
        "aria-labelledby": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The id of the element containing a label for the slider.",
          "tags": []
        },
        "aria-valuetext": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.string, props => {\n  const range = Array.isArray(props.value || props.defaultValue);\n\n  if (range && props['aria-valuetext'] != null) {\n    return new Error(\n      'Material-UI: you need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.',\n    );\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "A string value that provides a user-friendly name for the current value of the slider.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The color of the component. It supports those theme colors that make sense for this component.",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "number"
                }
              }
            ]
          },
          "required": false,
          "description": "The default element value. Use when the component is not controlled.",
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the slider will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "getAriaLabel": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.",
          "tags": [
            {
              "title": "param",
              "description": "The thumb label's index to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "getAriaValueText": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.",
          "tags": [
            {
              "title": "param",
              "description": "The thumb label's value to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "value"
            },
            {
              "title": "param",
              "description": "The thumb label's index to format.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ]
        },
        "marks": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "array"
              }
            ]
          },
          "required": false,
          "description": "Marks indicate predetermined values to which the user can move the slider.\nIf `true` the marks will be spaced according the value of the `step` prop.\nIf an array, it should contain objects with `value` and an optional `label` keys.",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "tags": []
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The maximum allowed value of the slider.\nShould not be equal to min.",
          "defaultValue": {
            "value": "100",
            "computed": false
          },
          "tags": []
        },
        "min": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The minimum allowed value of the slider.\nShould not be equal to max.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the hidden `input` element.",
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function that is fired when the slider's value changed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "onChangeCommitted": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function that is fired when the `mouseup` is triggered.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The new value.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The slider orientation.",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        },
        "step": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The granularity with which the slider can step through values. (A \"discrete\" slider.)\nWhen step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "tags": []
        },
        "ThumbComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to display the value label.",
          "defaultValue": {
            "value": "'span'",
            "computed": false
          },
          "tags": []
        },
        "track": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'inverted'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The track presentation:\n\n- `normal` the track will render a bar representing the slider value.\n- `inverted` the track will render a bar representing the remaining slider value.\n- `false` the track will render without a bar.",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "number"
                }
              }
            ]
          },
          "required": false,
          "description": "The value of the slider.\nFor ranged sliders, provide an array with two values.",
          "tags": []
        },
        "ValueLabelComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The value label component.",
          "defaultValue": {
            "value": "ValueLabel",
            "computed": true
          },
          "tags": []
        },
        "valueLabelDisplay": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'on'",
                "computed": false
              },
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "'off'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Controls when the value label is displayed:\n\n- `auto` the value label will display when the thumb is hovered or focused.\n- `on` will display persistently.\n- `off` will never display.",
          "defaultValue": {
            "value": "'off'",
            "computed": false
          },
          "tags": []
        },
        "valueLabelFormat": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "The format function the value label's value.\n\nWhen a function is provided, it should have the following signature:\n\n- {number} value The value label's value to format\n- {number} index The value label's index to format",
          "defaultValue": {
            "value": "x => x",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Slider",
      "styles": {
        "classes": [
          "root",
          "colorPrimary",
          "colorSecondary",
          "marked",
          "vertical",
          "disabled",
          "rail",
          "track",
          "trackFalse",
          "trackInverted",
          "thumb",
          "thumbColorPrimary",
          "thumbColorSecondary",
          "active",
          "focusVisible",
          "valueLabel",
          "mark",
          "markActive",
          "markLabel",
          "markLabelActive"
        ],
        "name": "MuiSlider",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
          "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
          "marked": "Styles applied to the root element if `marks` is provided with at least one label.",
          "vertical": "Pseudo-class applied to the root element if `orientation=\"vertical\"`.",
          "disabled": "Pseudo-class applied to the root and thumb element if `disabled={true}`.",
          "rail": "Styles applied to the rail element.",
          "track": "Styles applied to the track element.",
          "trackFalse": "Styles applied to the track element if `track={false}`.",
          "trackInverted": "Styles applied to the track element if `track=\"inverted\"`.",
          "thumb": "Styles applied to the thumb element.",
          "thumbColorPrimary": "Styles applied to the thumb element if `color=\"primary\"`.",
          "thumbColorSecondary": "Styles applied to the thumb element if `color=\"secondary\"`.",
          "active": "Pseudo-class applied to the thumb element if it's active.",
          "focusVisible": "Pseudo-class applied to the thumb element if keyboard focused.",
          "valueLabel": "Styles applied to the thumb label element.",
          "mark": "Styles applied to the mark element.",
          "markActive": "Styles applied to the mark element if active (depending on the value).",
          "markLabel": "Styles applied to the mark label element.",
          "markLabelActive": "Styles applied to the mark label element if active (depending on the value)."
        },
        "globalClasses": {
          "root": "MuiSlider-root",
          "colorPrimary": "MuiSlider-colorPrimary",
          "colorSecondary": "MuiSlider-colorSecondary",
          "marked": "MuiSlider-marked",
          "vertical": "MuiSlider-vertical",
          "disabled": "Mui-disabled",
          "rail": "MuiSlider-rail",
          "track": "MuiSlider-track",
          "trackFalse": "MuiSlider-trackFalse",
          "trackInverted": "MuiSlider-trackInverted",
          "thumb": "MuiSlider-thumb",
          "thumbColorPrimary": "MuiSlider-thumbColorPrimary",
          "thumbColorSecondary": "MuiSlider-thumbColorSecondary",
          "active": "MuiSlider-active",
          "focusVisible": "Mui-focusVisible",
          "valueLabel": "MuiSlider-valueLabel",
          "mark": "MuiSlider-mark",
          "markActive": "MuiSlider-markActive",
          "markLabel": "MuiSlider-markLabel",
          "markLabelActive": "MuiSlider-markLabelActive"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport useTheme from '../styles/useTheme';\nimport { fade, lighten, darken } from '../styles/colorManipulator';\nimport { useIsFocusVisible } from '../utils/focusVisible';\nimport useEventCallback from '../utils/useEventCallback';\nimport useForkRef from '../utils/useForkRef';\nimport capitalize from '../utils/capitalize';\nimport ValueLabel from './ValueLabel';\n\nfunction asc(a, b) {\n  return a - b;\n}\n\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nfunction findClosest(values, currentValue) {\n  const { index: closestIndex } = values.reduce((acc, value, index) => {\n    const distance = Math.abs(currentValue - value);\n\n    if (acc === null || distance < acc.distance || distance === acc.distance) {\n      return {\n        distance,\n        index,\n      };\n    }\n\n    return acc;\n  }, null);\n  return closestIndex;\n}\n\nfunction trackFinger(event, touchId) {\n  if (touchId.current !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === touchId.current) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY,\n        };\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    x: event.clientX,\n    y: event.clientY,\n  };\n}\n\nfunction valueToPercent(value, min, max) {\n  return ((value - min) * 100) / (max - min);\n}\n\nfunction percentToValue(percent, min, max) {\n  return (max - min) * percent + min;\n}\n\nfunction getDecimalPrecision(num) {\n  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.\n  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split('e-');\n    const matissaDecimalPart = parts[0].split('.')[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n}\n\nfunction roundValueToStep(value, step) {\n  const nearest = Math.round(value / step) * step;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n}\n\nfunction setValueIndex({ values, source, newValue, index }) {\n  // Performance shortcut\n  if (values[index] === newValue) {\n    return source;\n  }\n\n  const output = [...values];\n  output[index] = newValue;\n  return output;\n}\n\nfunction focusThumb({ sliderRef, activeIndex, setActive }) {\n  if (\n    !sliderRef.current.contains(document.activeElement) ||\n    Number(document.activeElement.getAttribute('data-index')) !== activeIndex\n  ) {\n    sliderRef.current.querySelector(`[data-index=\"${activeIndex}\"]`).focus();\n  }\n\n  if (setActive) {\n    setActive(activeIndex);\n  }\n}\n\nconst axisProps = {\n  horizontal: {\n    offset: percent => ({ left: `${percent}%` }),\n    leap: percent => ({ width: `${percent}%` }),\n  },\n  'horizontal-reverse': {\n    offset: percent => ({ right: `${percent}%` }),\n    leap: percent => ({ width: `${percent}%` }),\n  },\n  vertical: {\n    offset: percent => ({ bottom: `${percent}%` }),\n    leap: percent => ({ height: `${percent}%` }),\n  },\n};\n\nconst defaultMarks = [];\nconst Identity = x => x;\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    height: 2,\n    width: '100%',\n    boxSizing: 'content-box',\n    padding: '11px 0',\n    display: 'inline-block',\n    position: 'relative',\n    cursor: 'pointer',\n    touchAction: 'none',\n    color: theme.palette.primary.main,\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    '&$disabled': {\n      pointerEvents: 'none',\n      cursor: 'default',\n      color: theme.palette.grey[400],\n    },\n    '&$vertical': {\n      width: 2,\n      height: '100%',\n      padding: '0 11px',\n    },\n  },\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    // TODO v5, move the style here\n  },\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main,\n  },\n  /* Styles applied to the root element if `marks` is provided with at least one label. */\n  marked: {\n    marginBottom: 20,\n    '&$vertical': {\n      marginBottom: 'auto',\n      marginRight: 20,\n    },\n  },\n  /* Pseudo-class applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {},\n  /* Pseudo-class applied to the root and thumb element if `disabled={true}`. */\n  disabled: {},\n  /* Styles applied to the rail element. */\n  rail: {\n    display: 'block',\n    position: 'absolute',\n    width: '100%',\n    height: 2,\n    borderRadius: 1,\n    backgroundColor: 'currentColor',\n    opacity: 0.38,\n    '$vertical &': {\n      height: '100%',\n      width: 2,\n    },\n  },\n  /* Styles applied to the track element. */\n  track: {\n    display: 'block',\n    position: 'absolute',\n    height: 2,\n    borderRadius: 1,\n    backgroundColor: 'currentColor',\n    '$vertical &': {\n      width: 2,\n    },\n  },\n  /* Styles applied to the track element if `track={false}`. */\n  trackFalse: {\n    '& $track': {\n      display: 'none',\n    },\n  },\n  /* Styles applied to the track element if `track=\"inverted\"`. */\n  trackInverted: {\n    '& $track': {\n      backgroundColor:\n        // Same logic as the LinearProgress track color\n        theme.palette.type === 'light'\n          ? lighten(theme.palette.primary.main, 0.62)\n          : darken(theme.palette.primary.main, 0.5),\n    },\n    '& $rail': {\n      opacity: 1,\n    },\n  },\n  /* Styles applied to the thumb element. */\n  thumb: {\n    position: 'absolute',\n    width: 12,\n    height: 12,\n    marginLeft: -6,\n    marginTop: -5,\n    boxSizing: 'border-box',\n    borderRadius: '50%',\n    outline: 0,\n    backgroundColor: 'currentColor',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    transition: theme.transitions.create(['box-shadow'], {\n      duration: theme.transitions.duration.shortest,\n    }),\n    '&$focusVisible,&:hover': {\n      boxShadow: `0px 0px 0px 8px ${fade(theme.palette.primary.main, 0.16)}`,\n      '@media (hover: none)': {\n        boxShadow: 'none',\n      },\n    },\n    '&$active': {\n      boxShadow: `0px 0px 0px 14px ${fade(theme.palette.primary.main, 0.16)}`,\n    },\n    '&$disabled': {\n      width: 8,\n      height: 8,\n      marginLeft: -4,\n      marginTop: -3,\n      '&:hover': {\n        boxShadow: 'none',\n      },\n    },\n    '$vertical &': {\n      marginLeft: -5,\n      marginBottom: -6,\n    },\n    '$vertical &$disabled': {\n      marginLeft: -3,\n      marginBottom: -4,\n    },\n  },\n  /* Styles applied to the thumb element if `color=\"primary\"`. */\n  thumbColorPrimary: {\n    // TODO v5, move the style here\n  },\n  /* Styles applied to the thumb element if `color=\"secondary\"`. */\n  thumbColorSecondary: {\n    '&$focusVisible,&:hover': {\n      boxShadow: `0px 0px 0px 8px ${fade(theme.palette.secondary.main, 0.16)}`,\n    },\n    '&$active': {\n      boxShadow: `0px 0px 0px 14px ${fade(theme.palette.secondary.main, 0.16)}`,\n    },\n  },\n  /* Pseudo-class applied to the thumb element if it's active. */\n  active: {},\n  /* Pseudo-class applied to the thumb element if keyboard focused. */\n  focusVisible: {},\n  /* Styles applied to the thumb label element. */\n  valueLabel: {},\n  /* Styles applied to the mark element. */\n  mark: {\n    position: 'absolute',\n    width: 2,\n    height: 2,\n    borderRadius: 1,\n    backgroundColor: 'currentColor',\n  },\n  /* Styles applied to the mark element if active (depending on the value). */\n  markActive: {\n    backgroundColor: theme.palette.background.paper,\n    opacity: 0.8,\n  },\n  /* Styles applied to the mark label element. */\n  markLabel: {\n    ...theme.typography.body2,\n    color: theme.palette.text.secondary,\n    position: 'absolute',\n    top: 22,\n    transform: 'translateX(-50%)',\n    whiteSpace: 'nowrap',\n    '$vertical &': {\n      top: 'auto',\n      left: 22,\n      transform: 'translateY(50%)',\n    },\n  },\n  /* Styles applied to the mark label element if active (depending on the value). */\n  markLabelActive: {\n    color: theme.palette.text.primary,\n  },\n});\n\nconst Slider = React.forwardRef(function Slider(props, ref) {\n  const {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-valuetext': ariaValuetext,\n    classes,\n    className,\n    color = 'primary',\n    component: Component = 'span',\n    defaultValue,\n    disabled = false,\n    getAriaLabel,\n    getAriaValueText,\n    marks: marksProp = defaultMarks,\n    max = 100,\n    min = 0,\n    name,\n    onChange,\n    onChangeCommitted,\n    onMouseDown,\n    orientation = 'horizontal',\n    step = 1,\n    ThumbComponent = 'span',\n    track = 'normal',\n    value: valueProp,\n    ValueLabelComponent = ValueLabel,\n    valueLabelDisplay = 'off',\n    valueLabelFormat = Identity,\n    ...other\n  } = props;\n  const theme = useTheme();\n  const { current: isControlled } = React.useRef(valueProp != null);\n  const touchId = React.useRef();\n  // We can't use the :active browser pseudo-classes.\n  // - The active state isn't triggered when clicking on the rail.\n  // - The active state isn't transfered when inversing a range slider.\n  const [active, setActive] = React.useState(-1);\n  const [open, setOpen] = React.useState(-1);\n  const [valueState, setValueState] = React.useState(defaultValue);\n  const valueDerived = isControlled ? valueProp : valueState;\n  const range = Array.isArray(valueDerived);\n  const instanceRef = React.useRef();\n  let values = range ? [...valueDerived].sort(asc) : [valueDerived];\n  values = values.map(value => clamp(value, min, max));\n  const marks =\n    marksProp === true && step !== null\n      ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({\n          value: min + step * index,\n        }))\n      : marksProp;\n\n  instanceRef.current = {\n    source: valueDerived, // Keep track of the input value to leverage immutable state comparison.\n  };\n\n  const { isFocusVisible, onBlurVisible, ref: focusVisibleRef } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(-1);\n\n  const sliderRef = React.useRef();\n  const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);\n  const handleRef = useForkRef(ref, handleFocusRef);\n\n  const handleFocus = useEventCallback(event => {\n    const index = Number(event.currentTarget.getAttribute('data-index'));\n    if (isFocusVisible(event)) {\n      setFocusVisible(index);\n    }\n    setOpen(index);\n  });\n  const handleBlur = useEventCallback(() => {\n    if (focusVisible !== -1) {\n      setFocusVisible(-1);\n      onBlurVisible();\n    }\n    setOpen(-1);\n  });\n  const handleMouseOver = useEventCallback(event => {\n    const index = Number(event.currentTarget.getAttribute('data-index'));\n    setOpen(index);\n  });\n  const handleMouseLeave = useEventCallback(() => {\n    setOpen(-1);\n  });\n\n  const handleKeyDown = useEventCallback(event => {\n    const index = Number(event.currentTarget.getAttribute('data-index'));\n    const value = values[index];\n    const tenPercents = (max - min) / 10;\n    const marksValues = marks.map(mark => mark.value);\n    const marksIndex = marksValues.indexOf(value);\n    let newValue;\n\n    switch (event.key) {\n      case 'Home':\n        newValue = min;\n        break;\n      case 'End':\n        newValue = max;\n        break;\n      case 'PageUp':\n        if (step) {\n          newValue = value + tenPercents;\n        }\n        break;\n      case 'PageDown':\n        if (step) {\n          newValue = value - tenPercents;\n        }\n        break;\n      case 'ArrowRight':\n      case 'ArrowUp':\n        if (step) {\n          newValue = value + step;\n        } else {\n          newValue = marksValues[marksIndex + 1] || marksValues[marksValues.length - 1];\n        }\n        break;\n      case 'ArrowLeft':\n      case 'ArrowDown':\n        if (step) {\n          newValue = value - step;\n        } else {\n          newValue = marksValues[marksIndex - 1] || marksValues[0];\n        }\n        break;\n      default:\n        return;\n    }\n\n    // Prevent scroll of the page\n    event.preventDefault();\n\n    if (step) {\n      newValue = roundValueToStep(newValue, step);\n    }\n\n    newValue = clamp(newValue, min, max);\n\n    if (range) {\n      const previousValue = newValue;\n      newValue = setValueIndex({\n        values,\n        source: valueDerived,\n        newValue,\n        index,\n      }).sort(asc);\n      focusThumb({ sliderRef, activeIndex: newValue.indexOf(previousValue) });\n    }\n\n    if (!isControlled) {\n      setValueState(newValue);\n    }\n\n    setFocusVisible(index);\n\n    if (onChange) {\n      onChange(event, newValue);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(event, newValue);\n    }\n  });\n\n  const previousIndex = React.useRef();\n  let axis = orientation;\n  if (theme.direction === 'rtl' && orientation === 'horizontal') {\n    axis += '-reverse';\n  }\n\n  const getFingerNewValue = React.useCallback(\n    ({ finger, move = false, values: values2, source }) => {\n      const { current: slider } = sliderRef;\n      const { width, height, bottom, left } = slider.getBoundingClientRect();\n      let percent;\n\n      if (axis.indexOf('vertical') === 0) {\n        percent = (bottom - finger.y) / height;\n      } else {\n        percent = (finger.x - left) / width;\n      }\n\n      if (axis.indexOf('-reverse') !== -1) {\n        percent = 1 - percent;\n      }\n\n      let newValue;\n      newValue = percentToValue(percent, min, max);\n      if (step) {\n        newValue = roundValueToStep(newValue, step);\n      } else {\n        const marksValues = marks.map(mark => mark.value);\n        const closestIndex = findClosest(marksValues, newValue);\n        newValue = marksValues[closestIndex];\n      }\n\n      newValue = clamp(newValue, min, max);\n      let activeIndex = 0;\n\n      if (range) {\n        if (!move) {\n          activeIndex = findClosest(values2, newValue);\n        } else {\n          activeIndex = previousIndex.current;\n        }\n\n        const previousValue = newValue;\n        newValue = setValueIndex({\n          values: values2,\n          source,\n          newValue,\n          index: activeIndex,\n        }).sort(asc);\n        activeIndex = newValue.indexOf(previousValue);\n        previousIndex.current = activeIndex;\n      }\n\n      return { newValue, activeIndex };\n    },\n    [max, min, axis, range, step, marks],\n  );\n\n  const handleTouchMove = useEventCallback(event => {\n    const finger = trackFinger(event, touchId);\n\n    if (!finger) {\n      return;\n    }\n\n    const { newValue, activeIndex } = getFingerNewValue({\n      finger,\n      move: true,\n      values,\n      source: valueDerived,\n    });\n\n    focusThumb({ sliderRef, activeIndex, setActive });\n    if (!isControlled) {\n      setValueState(newValue);\n    }\n    if (onChange) {\n      onChange(event, newValue);\n    }\n  });\n\n  const handleTouchEnd = useEventCallback(event => {\n    const finger = trackFinger(event, touchId);\n\n    if (!finger) {\n      return;\n    }\n\n    const { newValue } = getFingerNewValue({ finger, values, source: valueDerived });\n\n    setActive(-1);\n    if (event.type === 'touchend') {\n      setOpen(-1);\n    }\n\n    if (onChangeCommitted) {\n      onChangeCommitted(event, newValue);\n    }\n\n    touchId.current = undefined;\n    document.body.removeEventListener('mousemove', handleTouchMove);\n    document.body.removeEventListener('mouseup', handleTouchEnd);\n    // eslint-disable-next-line no-use-before-define\n    document.body.removeEventListener('mouseenter', handleMouseEnter);\n    document.body.removeEventListener('touchmove', handleTouchMove);\n    document.body.removeEventListener('touchend', handleTouchEnd);\n  });\n\n  const handleMouseEnter = useEventCallback(event => {\n    // If the slider was being interacted with but the mouse went off the window\n    // and then re-entered while unclicked then end the interaction.\n    if (event.buttons === 0) {\n      handleTouchEnd(event);\n    }\n  });\n\n  const handleTouchStart = useEventCallback(event => {\n    // Workaround as Safari has partial support for touchAction: 'none'.\n    event.preventDefault();\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const finger = trackFinger(event, touchId);\n    const { newValue, activeIndex } = getFingerNewValue({ finger, values, source: valueDerived });\n    focusThumb({ sliderRef, activeIndex, setActive });\n\n    if (!isControlled) {\n      setValueState(newValue);\n    }\n    if (onChange) {\n      onChange(event, newValue);\n    }\n\n    document.body.addEventListener('touchmove', handleTouchMove);\n    document.body.addEventListener('touchend', handleTouchEnd);\n  });\n\n  React.useEffect(() => {\n    const { current: slider } = sliderRef;\n    slider.addEventListener('touchstart', handleTouchStart);\n\n    return () => {\n      slider.removeEventListener('touchstart', handleTouchStart);\n      document.body.removeEventListener('mousemove', handleTouchMove);\n      document.body.removeEventListener('mouseup', handleTouchEnd);\n      document.body.removeEventListener('mouseenter', handleMouseEnter);\n      document.body.removeEventListener('touchmove', handleTouchMove);\n      document.body.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [handleMouseEnter, handleTouchEnd, handleTouchMove, handleTouchStart]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled !== (valueProp != null)) {\n        console.error(\n          [\n            `Material-UI: A component is changing ${\n              isControlled ? 'a ' : 'an un'\n            }controlled Slider to be ${isControlled ? 'un' : ''}controlled.`,\n            'Elements should not switch from uncontrolled to controlled (or vice versa).',\n            'Decide between using a controlled or uncontrolled Slider ' +\n              'element for the lifetime of the component.',\n            'More info: https://fb.me/react-controlled-components',\n          ].join('\\n'),\n        );\n      }\n    }, [valueProp, isControlled]);\n  }\n\n  const handleMouseDown = useEventCallback(event => {\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n\n    event.preventDefault();\n    const finger = trackFinger(event, touchId);\n    const { newValue, activeIndex } = getFingerNewValue({ finger, values, source: valueDerived });\n    focusThumb({ sliderRef, activeIndex, setActive });\n\n    if (!isControlled) {\n      setValueState(newValue);\n    }\n    if (onChange) {\n      onChange(event, newValue);\n    }\n\n    document.body.addEventListener('mousemove', handleTouchMove);\n    document.body.addEventListener('mouseenter', handleMouseEnter);\n    document.body.addEventListener('mouseup', handleTouchEnd);\n  });\n\n  const trackOffset = valueToPercent(range ? values[0] : min, min, max);\n  const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;\n  const trackStyle = {\n    ...axisProps[axis].offset(trackOffset),\n    ...axisProps[axis].leap(trackLeap),\n  };\n\n  return (\n    <Component\n      ref={handleRef}\n      className={clsx(\n        classes.root,\n        classes[`color${capitalize(color)}`],\n        {\n          [classes.disabled]: disabled,\n          [classes.marked]: marks.length > 0 && marks.some(mark => mark.label),\n          [classes.vertical]: orientation === 'vertical',\n          [classes.trackInverted]: track === 'inverted',\n          [classes.trackFalse]: track === false,\n        },\n        className,\n      )}\n      onMouseDown={handleMouseDown}\n      {...other}\n    >\n      <span className={classes.rail} />\n      <span className={classes.track} style={trackStyle} />\n      <input value={values.join(',')} name={name} type=\"hidden\" />\n      {marks.map(mark => {\n        const percent = valueToPercent(mark.value, min, max);\n        const style = axisProps[axis].offset(percent);\n\n        let markActive;\n        if (track === false) {\n          markActive = values.indexOf(mark.value) !== -1;\n        } else {\n          const isMarkActive = range\n            ? mark.value >= values[0] && mark.value <= values[values.length - 1]\n            : mark.value <= values[0];\n          markActive =\n            (isMarkActive && track === 'normal') || (!isMarkActive && track === 'inverted');\n        }\n\n        return (\n          <React.Fragment key={mark.value}>\n            <span\n              style={style}\n              className={clsx(classes.mark, {\n                [classes.markActive]: markActive,\n              })}\n            />\n            <span\n              aria-hidden\n              style={style}\n              className={clsx(classes.markLabel, {\n                [classes.markLabelActive]: markActive,\n              })}\n            >\n              {mark.label}\n            </span>\n          </React.Fragment>\n        );\n      })}\n      {values.map((value, index) => {\n        const percent = valueToPercent(value, min, max);\n        const style = axisProps[axis].offset(percent);\n\n        return (\n          <ValueLabelComponent\n            key={index}\n            valueLabelFormat={valueLabelFormat}\n            valueLabelDisplay={valueLabelDisplay}\n            className={classes.valueLabel}\n            value={\n              typeof valueLabelFormat === 'function'\n                ? valueLabelFormat(value, index)\n                : valueLabelFormat\n            }\n            index={index}\n            open={open === index || active === index || valueLabelDisplay === 'on'}\n            disabled={disabled}\n          >\n            <ThumbComponent\n              className={clsx(classes.thumb, classes[`thumbColor${capitalize(color)}`], {\n                [classes.active]: active === index,\n                [classes.disabled]: disabled,\n                [classes.focusVisible]: focusVisible === index,\n              })}\n              tabIndex={disabled ? null : 0}\n              role=\"slider\"\n              style={style}\n              data-index={index}\n              aria-label={getAriaLabel ? getAriaLabel(index) : ariaLabel}\n              aria-labelledby={ariaLabelledby}\n              aria-orientation={orientation}\n              aria-valuemax={max}\n              aria-valuemin={min}\n              aria-valuenow={value}\n              aria-valuetext={getAriaValueText ? getAriaValueText(value, index) : ariaValuetext}\n              onKeyDown={handleKeyDown}\n              onFocus={handleFocus}\n              onBlur={handleBlur}\n              onMouseOver={handleMouseOver}\n              onMouseLeave={handleMouseLeave}\n            />\n          </ValueLabelComponent>\n        );\n      })}\n    </Component>\n  );\n});\n\nSlider.propTypes = {\n  /**\n   * The label of the slider.\n   */\n  'aria-label': chainPropTypes(PropTypes.string, props => {\n    const range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-label'] != null) {\n      return new Error(\n        'Material-UI: you need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.',\n      );\n    }\n\n    return null;\n  }),\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  'aria-valuetext': chainPropTypes(PropTypes.string, props => {\n    const range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-valuetext'] != null) {\n      return new Error(\n        'Material-UI: you need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.',\n      );\n    }\n\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  /**\n   * If `true`, the slider will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   *\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: PropTypes.func,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   *\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: PropTypes.func,\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks will be spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   */\n  marks: PropTypes.oneOfType([PropTypes.bool, PropTypes.array]),\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   */\n  max: PropTypes.number,\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   */\n  min: PropTypes.number,\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value The new value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value The new value.\n   */\n  onChangeCommitted: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n  /**\n   * The slider orientation.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   */\n  step: PropTypes.number,\n  /**\n   * The component used to display the value label.\n   */\n  ThumbComponent: PropTypes.elementType,\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   */\n  track: PropTypes.oneOf(['normal', false, 'inverted']),\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  /**\n   * The value label component.\n   */\n  ValueLabelComponent: PropTypes.elementType,\n  /**\n   * Controls when the value label is displayed:\n   *\n   * - `auto` the value label will display when the thumb is hovered or focused.\n   * - `on` will display persistently.\n   * - `off` will never display.\n   */\n  valueLabelDisplay: PropTypes.oneOf(['on', 'auto', 'off']),\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   */\n  valueLabelFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n};\n\nexport default withStyles(styles, { name: 'MuiSlider' })(Slider);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLSpanElement",
      "filename": "/packages/material-ui/src/Slider/Slider.js",
      "inheritance": null,
      "usedInPages": [
        "/components/slider"
      ]
    },
    "SwipeableDrawer": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "disableBackdropTransition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable the backdrop transition.\nThis can improve the FPS on low-end devices.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableDiscovery": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\nto promote accidental discovery of the swipe gesture.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableSwipeToOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\nnavigation actions. Swipe to open is disabled on iOS browsers by default.",
          "defaultValue": {
            "value": "typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)",
            "computed": false
          },
          "tags": []
        },
        "hysteresis": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Affects how far the drawer must be opened/closed to change his state.\nSpecified as percent (0-1) of the width of the drawer",
          "defaultValue": {
            "value": "0.52",
            "computed": false
          },
          "tags": []
        },
        "minFlingVelocity": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Defines, from which (average) velocity on, the swipe is\ndefined as complete although hysteresis isn't reached.\nGood threshold is between 250 - 1000 px/s",
          "defaultValue": {
            "value": "450",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Callback fired when the component requests to be opened.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the drawer is open.",
          "tags": []
        },
        "SwipeAreaProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the swipe area element.",
          "tags": []
        },
        "swipeAreaWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The width of the left most (or right most) area in pixels where the\ndrawer can be swiped open from.",
          "defaultValue": {
            "value": "20",
            "computed": false
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              }
            ]
          },
          "required": false,
          "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
          "defaultValue": {
            "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "SwipeableDrawer",
      "styles": {
        "classes": [],
        "name": null,
        "descriptions": {}
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport useEventCallback from '../utils/useEventCallback';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport NoSsr from '../NoSsr';\nimport SwipeArea from './SwipeArea';\n\n// This value is closed to what browsers are using internally to\n// trigger a native scroll.\nconst UNCERTAINTY_THRESHOLD = 3; // px\n\n// We can only have one node at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\nlet nodeThatClaimedTheSwipe = null;\n\n// Exported for test purposes.\nexport function reset() {\n  nodeThatClaimedTheSwipe = null;\n}\n\nfunction calculateCurrentX(anchor, touches) {\n  return anchor === 'right' ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches) {\n  return anchor === 'bottom' ? window.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(\n    Math.max(\n      open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate,\n      0,\n    ),\n    maxTranslate,\n  );\n}\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  let domTreeShapes = [];\n\n  while (element && element !== rootNode) {\n    const style = window.getComputedStyle(element);\n\n    if (\n      // Ignore the scroll children if the element is absolute positioned.\n      style.getPropertyValue('position') === 'absolute' ||\n      // Ignore the scroll children if the element has an overflowX hidden\n      style.getPropertyValue('overflow-x') === 'hidden'\n    ) {\n      domTreeShapes = [];\n    } else if (\n      (element.clientWidth > 0 && element.scrollWidth > element.clientWidth) ||\n      (element.clientHeight > 0 && element.scrollHeight > element.clientHeight)\n    ) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentNode;\n  }\n\n  return domTreeShapes;\n}\n\nfunction findNativeHandler({ domTreeShapes, start, current, anchor }) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop',\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight',\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight',\n    },\n  };\n\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = shape[axisProperties.scrollPosition[axis]];\n\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd =\n      scrollPosition + shape[axisProperties.clientLength[axis]] <\n      shape[axisProperties.scrollLength[axis]];\n\n    if ((goingForward && areNotAtEnd) || (!goingForward && areNotAtStart)) {\n      return shape;\n    }\n\n    return null;\n  });\n}\n\nconst disableSwipeToOpenDefault =\n  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = { enter: duration.enteringScreen, exit: duration.leavingScreen };\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nconst SwipeableDrawer = React.forwardRef(function SwipeableDrawer(props, ref) {\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = disableSwipeToOpenDefault,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: { BackdropProps, ...ModalPropsProp } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary', // Mobile first.\n    ...other\n  } = props;\n\n  const theme = useTheme();\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null,\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n\n  const touchDetected = React.useRef(false);\n\n  // Ref for transition duration based on / to match swipe speed\n  const calculatedDurationRef = React.useRef();\n\n  // Use a ref so the open value used is always up to date inside useCallback.\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n\n  const setPosition = React.useCallback(\n    (translate, options = {}) => {\n      const { mode = null, changeTransition = true } = options;\n\n      const anchorRtl = getAnchor(theme, anchor);\n      const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n      const horizontalSwipe = isHorizontal(anchor);\n\n      const transform = horizontalSwipe\n        ? `translate(${rtlTranslateMultiplier * translate}px, 0)`\n        : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n      const drawerStyle = paperRef.current.style;\n      drawerStyle.webkitTransform = transform;\n      drawerStyle.transform = transform;\n\n      let transition = '';\n\n      if (mode) {\n        transition = theme.transitions.create(\n          'all',\n          getTransitionProps(\n            {\n              timeout: transitionDuration,\n            },\n            {\n              mode,\n            },\n          ),\n        );\n      }\n\n      if (changeTransition) {\n        drawerStyle.webkitTransition = transition;\n        drawerStyle.transition = transition;\n      }\n\n      if (!disableBackdropTransition && !hideBackdrop) {\n        const backdropStyle = backdropRef.current.style;\n        backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n        if (changeTransition) {\n          backdropStyle.webkitTransition = transition;\n          backdropStyle.transition = transition;\n        }\n      }\n    },\n    [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration],\n  );\n\n  const handleBodyTouchEnd = useEventCallback(event => {\n    if (!touchDetected.current) {\n      return;\n    }\n    nodeThatClaimedTheSwipe = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false);\n\n    // The swipe wasn't started.\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, event.changedTouches);\n    } else {\n      current = calculateCurrentY(anchorRtl, event.changedTouches);\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current =\n        Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit',\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter',\n      });\n    }\n  });\n\n  const handleBodyTouchMove = useEventCallback(event => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    }\n\n    // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n    if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {\n      const domTreeShapes = getDomTreeShapes(event.target, paperRef.current);\n      const nativeHandler = findNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor,\n      });\n      if (nativeHandler) {\n        nodeThatClaimedTheSwipe = nativeHandler;\n        return;\n      }\n      nodeThatClaimedTheSwipe = swipeInstance.current;\n    }\n\n    // We don't know yet.\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n\n      // We are likely to be swiping, let's prevent the scroll event on iOS.\n      if (dx > dy) {\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n      }\n\n      const definitelySwiping = horizontalSwipe\n        ? dx > dy && dx > UNCERTAINTY_THRESHOLD\n        : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (\n        definitelySwiping === true ||\n        (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)\n      ) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(event);\n          return;\n        }\n\n        // Shift the starting point.\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n\n        // Compensate for the part of the drawer displayed on touch start.\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= swipeAreaWidth;\n          } else {\n            swipeInstance.current.startY -= swipeAreaWidth;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe\n      ? swipeInstance.current.startX\n      : swipeInstance.current.startY;\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(\n      horizontalSwipe ? currentX : currentY,\n      startLocation,\n      open,\n      maxTranslate,\n    );\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity =\n      ((translate - swipeInstance.current.lastTranslate) /\n        (performance.now() - swipeInstance.current.lastTime)) *\n      1e3;\n\n    // Low Pass filter.\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now();\n\n    // We are swiping, let's prevent the scroll event on iOS.\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n\n  const handleBodyTouchStart = useEventCallback(event => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // We can only have one node at the time claiming ownership for handling the swipe.\n    if (event.muiHandled) {\n      return;\n    }\n\n    // At least one element clogs the drawer interaction zone.\n    if (\n      open &&\n      !backdropRef.current.contains(event.target) &&\n      !paperRef.current.contains(event.target)\n    ) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (!open) {\n      if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {\n        return;\n      }\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    event.muiHandled = true;\n    nodeThatClaimedTheSwipe = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n\n    setMaybeSwiping(true);\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(\n        getMaxTranslate(horizontalSwipe, paperRef.current) +\n          (disableDiscovery ? 20 : -swipeAreaWidth),\n        {\n          changeTransition: false,\n        },\n      );\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n\n    touchDetected.current = true;\n  });\n\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      document.body.addEventListener('touchstart', handleBodyTouchStart);\n      document.body.addEventListener('touchmove', handleBodyTouchMove, { passive: false });\n      document.body.addEventListener('touchend', handleBodyTouchEnd);\n\n      return () => {\n        document.body.removeEventListener('touchstart', handleBodyTouchStart);\n        document.body.removeEventListener('touchmove', handleBodyTouchMove, { passive: false });\n        document.body.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n\n  React.useEffect(\n    () => () => {\n      // We need to release the lock.\n      if (nodeThatClaimedTheSwipe === swipeInstance.current) {\n        nodeThatClaimedTheSwipe = null;\n      }\n    },\n    [],\n  );\n\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n\n  const handleBackdropRef = React.useCallback(instance => {\n    // #StrictMode ready\n    backdropRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n\n  const handlePaperRef = React.useCallback(instance => {\n    // #StrictMode ready\n    paperRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Drawer\n        open={variant === 'temporary' && maybeSwiping ? true : open}\n        variant={variant}\n        ModalProps={{\n          BackdropProps: {\n            ...BackdropProps,\n            ref: handleBackdropRef,\n          },\n          ...ModalPropsProp,\n        }}\n        PaperProps={{\n          ...PaperProps,\n          style: {\n            pointerEvents: variant === 'temporary' && !open ? 'none' : '',\n            ...PaperProps.style,\n          },\n          ref: handlePaperRef,\n        }}\n        anchor={anchor}\n        transitionDuration={calculatedDurationRef.current || transitionDuration}\n        onClose={onClose}\n        ref={ref}\n        {...other}\n      />\n      {!disableSwipeToOpen && variant === 'temporary' && (\n        <NoSsr>\n          <SwipeArea\n            anchor={anchor}\n            ref={swipeAreaRef}\n            width={swipeAreaWidth}\n            {...SwipeAreaProps}\n          />\n        </NoSsr>\n      )}\n    </React.Fragment>\n  );\n});\n\nSwipeableDrawer.propTypes = {\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   */\n  disableBackdropTransition: PropTypes.bool,\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   */\n  disableDiscovery: PropTypes.bool,\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   */\n  disableSwipeToOpen: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   */\n  hysteresis: PropTypes.number,\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   */\n  minFlingVelocity: PropTypes.number,\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef,\n    }),\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object,\n  }),\n  /**\n   * Props applied to the swipe area element.\n   */\n  SwipeAreaProps: PropTypes.object,\n  /**\n   * The width of the left most (or right most) area in pixels where the\n   * drawer can be swiped open from.\n   */\n  swipeAreaWidth: PropTypes.number,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n  ]),\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary']),\n};\n\nexport default SwipeableDrawer;\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/SwipeableDrawer/SwipeableDrawer.js",
      "inheritance": {
        "component": "Drawer",
        "pathname": "/api/drawer"
      },
      "usedInPages": [
        "/components/drawers"
      ]
    },
    "Tabs": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "Callback fired when the component mounts.\nThis is useful when you want to trigger an action programmatically.\nIt supports two actions: `updateIndicator()` and `updateScrollButtons()`",
          "tags": [
            {
              "title": "param",
              "description": "This object contains all possible actions\nthat can be triggered programmatically.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "actions"
            }
          ]
        },
        "centered": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the tabs will be centered.\nThis property is intended for large views.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'div'",
            "computed": false
          },
          "tags": []
        },
        "indicatorColor": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determines the color of the indicator.",
          "defaultValue": {
            "value": "'secondary'",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the value changes.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "We default to the index of the child (number)",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            }
          ]
        },
        "orientation": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The tabs orientation (layout flow direction).",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "tags": []
        },
        "ScrollButtonComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used to render the scroll buttons.",
          "defaultValue": {
            "value": "TabScrollButton",
            "computed": true
          },
          "tags": []
        },
        "scrollButtons": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'auto'",
                "computed": false
              },
              {
                "value": "'desktop'",
                "computed": false
              },
              {
                "value": "'on'",
                "computed": false
              },
              {
                "value": "'off'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine behavior of scroll buttons when tabs are set to scroll:\n\n- `auto` will only present them when not all the items are visible.\n- `desktop` will only present them on medium and larger viewports.\n- `on` will always present them.\n- `off` will never present them.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "TabIndicatorProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the tab indicator element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "textColor": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'inherit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determines the color of the `Tab`.",
          "defaultValue": {
            "value": "'inherit'",
            "computed": false
          },
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The value of the currently selected `Tab`.\nIf you don't want any selected `Tab`, you can set this property to `false`.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'scrollable'",
                "computed": false
              },
              {
                "value": "'fullWidth'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determines additional display behavior of the tabs:\n\n - `scrollable` will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the tab bar.\n -`fullWidth` will make the tabs grow to use all the available space,\n which should be used for small views, like on mobile.\n - `standard` will render the default state.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Tabs",
      "styles": {
        "classes": [
          "root",
          "vertical",
          "flexContainer",
          "flexContainerVertical",
          "centered",
          "scroller",
          "fixed",
          "scrollable",
          "scrollButtons",
          "scrollButtonsDesktop",
          "indicator"
        ],
        "name": "MuiTabs",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
          "flexContainer": "Styles applied to the flex container element.",
          "flexContainerVertical": "Styles applied to the flex container element if `orientation=\"vertical\"`.",
          "centered": "Styles applied to the flex container element if `centered={true}` & `!variant=\"scrollable\"`.",
          "scroller": "Styles applied to the tablist element.",
          "fixed": "Styles applied to the tablist element if `!variant=\"scrollable\"`\b\b\b.",
          "scrollable": "Styles applied to the tablist element if `variant=\"scrollable\"`.",
          "scrollButtons": "Styles applied to the `ScrollButtonComponent` component.",
          "scrollButtonsDesktop": "Styles applied to the `ScrollButtonComponent` component if `scrollButtons=\"auto\"` or scrollButtons=\"desktop\"`.",
          "indicator": "Styles applied to the `TabIndicator` component."
        },
        "globalClasses": {
          "root": "MuiTabs-root",
          "vertical": "MuiTabs-vertical",
          "flexContainer": "MuiTabs-flexContainer",
          "flexContainerVertical": "MuiTabs-flexContainerVertical",
          "centered": "MuiTabs-centered",
          "scroller": "MuiTabs-scroller",
          "fixed": "MuiTabs-fixed",
          "scrollable": "MuiTabs-scrollable",
          "scrollButtons": "MuiTabs-scrollButtons",
          "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
          "indicator": "MuiTabs-indicator"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport debounce from '../utils/debounce';\nimport ownerWindow from '../utils/ownerWindow';\nimport { getNormalizedScrollLeft, detectScrollType } from 'normalize-scroll-left';\nimport animate from '../internal/animate';\nimport ScrollbarSize from './ScrollbarSize';\nimport withStyles from '../styles/withStyles';\nimport TabIndicator from './TabIndicator';\nimport TabScrollButton from './TabScrollButton';\nimport useEventCallback from '../utils/useEventCallback';\nimport useTheme from '../styles/useTheme';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden',\n    minHeight: 48,\n    WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.\n    display: 'flex',\n  },\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column',\n  },\n  /* Styles applied to the flex container element. */\n  flexContainer: {\n    display: 'flex',\n  },\n  /* Styles applied to the flex container element if `orientation=\"vertical\"`. */\n  flexContainerVertical: {\n    flexDirection: 'column',\n  },\n  /* Styles applied to the flex container element if `centered={true}` & `!variant=\"scrollable\"`. */\n  centered: {\n    justifyContent: 'center',\n  },\n  /* Styles applied to the tablist element. */\n  scroller: {\n    position: 'relative',\n    display: 'inline-block',\n    flex: '1 1 auto',\n    whiteSpace: 'nowrap',\n  },\n  /* Styles applied to the tablist element if `!variant=\"scrollable\"`\b\b\b. */\n  fixed: {\n    overflowX: 'hidden',\n    width: '100%',\n  },\n  /* Styles applied to the tablist element if `variant=\"scrollable\"`. */\n  scrollable: {\n    overflowX: 'scroll',\n    // Hide dimensionless scrollbar on MacOS\n    scrollbarWidth: 'none', // Firefox\n    '&::-webkit-scrollbar': {\n      display: 'none', // Safari + Chrome\n    },\n  },\n  /* Styles applied to the `ScrollButtonComponent` component. */\n  scrollButtons: {},\n  /* Styles applied to the `ScrollButtonComponent` component if `scrollButtons=\"auto\"` or scrollButtons=\"desktop\"`. */\n  scrollButtonsDesktop: {\n    [theme.breakpoints.down('xs')]: {\n      display: 'none',\n    },\n  },\n  /* Styles applied to the `TabIndicator` component. */\n  indicator: {},\n});\n\nconst Tabs = React.forwardRef(function Tabs(props, ref) {\n  const {\n    action,\n    centered = false,\n    children: childrenProp,\n    classes,\n    className,\n    component: Component = 'div',\n    indicatorColor = 'secondary',\n    onChange,\n    orientation = 'horizontal',\n    ScrollButtonComponent = TabScrollButton,\n    scrollButtons = 'auto',\n    TabIndicatorProps = {},\n    textColor = 'inherit',\n    value,\n    variant = 'standard',\n    ...other\n  } = props;\n  const theme = useTheme();\n  const scrollable = variant === 'scrollable';\n  const isRtl = theme.direction === 'rtl';\n  const vertical = orientation === 'vertical';\n\n  const scrollStart = vertical ? 'scrollTop' : 'scrollLeft';\n  const start = vertical ? 'top' : 'left';\n  const end = vertical ? 'bottom' : 'right';\n  const clientSize = vertical ? 'clientHeight' : 'clientWidth';\n  const size = vertical ? 'height' : 'width';\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (centered && scrollable) {\n      console.error(\n        'Material-UI: you can not use the `centered={true}` and `variant=\"scrollable\"` properties ' +\n          'at the same time on a `Tabs` component.',\n      );\n    }\n  }\n\n  const [mounted, setMounted] = React.useState(false);\n  const [indicatorStyle, setIndicatorStyle] = React.useState({});\n  const [displayScroll, setDisplayScroll] = React.useState({\n    start: false,\n    end: false,\n  });\n  const [scrollerStyle, setScrollerStyle] = React.useState({\n    overflow: 'hidden',\n    marginBottom: null,\n  });\n  const valueToIndex = new Map();\n  const tabsRef = React.useRef(null);\n  const childrenWrapperRef = React.useRef(null);\n\n  const getTabsMeta = () => {\n    const tabsNode = tabsRef.current;\n    let tabsMeta;\n    if (tabsNode) {\n      const rect = tabsNode.getBoundingClientRect();\n      // create a new object with ClientRect class props + scrollLeft\n      tabsMeta = {\n        clientWidth: tabsNode.clientWidth,\n        scrollLeft: tabsNode.scrollLeft,\n        scrollTop: tabsNode.scrollTop,\n        scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),\n        scrollWidth: tabsNode.scrollWidth,\n        top: rect.top,\n        bottom: rect.bottom,\n        left: rect.left,\n        right: rect.right,\n      };\n    }\n\n    let tabMeta;\n    if (tabsNode && value !== false) {\n      const children = childrenWrapperRef.current.children;\n\n      if (children.length > 0) {\n        const tab = children[valueToIndex.get(value)];\n        if (process.env.NODE_ENV !== 'production') {\n          if (!tab) {\n            console.error(\n              [\n                `Material-UI: the value provided \\`${value}\\` to the Tabs component is invalid.`,\n                'None of the Tabs children have this value.',\n                valueToIndex.keys\n                  ? `You can provide one of the following values: ${Array.from(\n                      valueToIndex.keys(),\n                    ).join(', ')}.`\n                  : null,\n              ].join('\\n'),\n            );\n          }\n        }\n        tabMeta = tab ? tab.getBoundingClientRect() : null;\n      }\n    }\n    return { tabsMeta, tabMeta };\n  };\n\n  const updateIndicatorState = useEventCallback(() => {\n    const { tabsMeta, tabMeta } = getTabsMeta();\n    let startValue = 0;\n\n    if (tabMeta && tabsMeta) {\n      if (vertical) {\n        startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;\n      } else {\n        const correction = isRtl\n          ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth\n          : tabsMeta.scrollLeft;\n        startValue = tabMeta.left - tabsMeta.left + correction;\n      }\n    }\n\n    const newIndicatorStyle = {\n      [start]: startValue,\n      // May be wrong until the font is loaded.\n      [size]: tabMeta ? tabMeta[size] : 0,\n    };\n\n    if (isNaN(indicatorStyle[start]) || isNaN(indicatorStyle[size])) {\n      setIndicatorStyle(newIndicatorStyle);\n    } else {\n      const dStart = Math.abs(indicatorStyle[start] - newIndicatorStyle[start]);\n      const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);\n\n      if (dStart >= 1 || dSize >= 1) {\n        setIndicatorStyle(newIndicatorStyle);\n      }\n    }\n  });\n\n  const scroll = scrollValue => {\n    animate(scrollStart, tabsRef.current, scrollValue);\n  };\n\n  const moveTabsScroll = delta => {\n    let scrollValue = tabsRef.current[scrollStart];\n\n    if (vertical) {\n      scrollValue += delta;\n    } else {\n      scrollValue += delta * (isRtl ? -1 : 1);\n      // Fix for Edge\n      scrollValue *= isRtl && detectScrollType() === 'reverse' ? -1 : 1;\n    }\n\n    scroll(scrollValue);\n  };\n\n  const handleStartScrollClick = () => {\n    moveTabsScroll(-tabsRef.current[clientSize]);\n  };\n\n  const handleEndScrollClick = () => {\n    moveTabsScroll(tabsRef.current[clientSize]);\n  };\n\n  const handleScrollbarSizeChange = React.useCallback(scrollbarHeight => {\n    setScrollerStyle({\n      overflow: null,\n      marginBottom: -scrollbarHeight,\n    });\n  }, []);\n\n  const getConditionalElements = () => {\n    const conditionalElements = {};\n    conditionalElements.scrollbarSizeListener = scrollable ? (\n      <ScrollbarSize className={classes.scrollable} onChange={handleScrollbarSizeChange} />\n    ) : null;\n\n    const scrollButtonsActive = displayScroll.start || displayScroll.end;\n    const showScrollButtons =\n      scrollable &&\n      ((scrollButtons === 'auto' && scrollButtonsActive) ||\n        scrollButtons === 'desktop' ||\n        scrollButtons === 'on');\n\n    conditionalElements.scrollButtonStart = showScrollButtons ? (\n      <ScrollButtonComponent\n        orientation={orientation}\n        direction={isRtl ? 'right' : 'left'}\n        onClick={handleStartScrollClick}\n        visible={displayScroll.start}\n        className={clsx(classes.scrollButtons, {\n          [classes.scrollButtonsDesktop]: scrollButtons !== 'on',\n        })}\n      />\n    ) : null;\n\n    conditionalElements.scrollButtonEnd = showScrollButtons ? (\n      <ScrollButtonComponent\n        orientation={orientation}\n        direction={isRtl ? 'left' : 'right'}\n        onClick={handleEndScrollClick}\n        visible={displayScroll.end}\n        className={clsx(classes.scrollButtons, {\n          [classes.scrollButtonsDesktop]: scrollButtons !== 'on',\n        })}\n      />\n    ) : null;\n\n    return conditionalElements;\n  };\n\n  const scrollSelectedIntoView = useEventCallback(() => {\n    const { tabsMeta, tabMeta } = getTabsMeta();\n\n    if (!tabMeta || !tabsMeta) {\n      return;\n    }\n\n    if (tabMeta[start] < tabsMeta[start]) {\n      // left side of button is out of view\n      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);\n      scroll(nextScrollStart);\n    } else if (tabMeta[end] > tabsMeta[end]) {\n      // right side of button is out of view\n      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);\n      scroll(nextScrollStart);\n    }\n  });\n\n  const updateScrollButtonState = useEventCallback(() => {\n    if (scrollable && scrollButtons !== 'off') {\n      const { scrollTop, scrollHeight, clientHeight, scrollWidth, clientWidth } = tabsRef.current;\n      let showStartScroll;\n      let showEndScroll;\n\n      if (vertical) {\n        showStartScroll = scrollTop > 1;\n        showEndScroll = scrollTop < scrollHeight - clientHeight - 1;\n      } else {\n        const scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme.direction);\n        // use 1 for the potential rounding error with browser zooms.\n        showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;\n        showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;\n      }\n\n      if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {\n        setDisplayScroll({ start: showStartScroll, end: showEndScroll });\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      updateIndicatorState();\n      updateScrollButtonState();\n    });\n\n    const win = ownerWindow(tabsRef.current);\n    win.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      win.removeEventListener('resize', handleResize);\n    };\n  }, [updateIndicatorState, updateScrollButtonState]);\n\n  const handleTabsScroll = React.useCallback(\n    debounce(() => {\n      updateScrollButtonState();\n    }),\n  );\n\n  React.useEffect(() => {\n    return () => {\n      handleTabsScroll.clear();\n    };\n  }, [handleTabsScroll]);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    updateIndicatorState();\n    updateScrollButtonState();\n  });\n\n  React.useEffect(() => {\n    scrollSelectedIntoView();\n  }, [scrollSelectedIntoView, indicatorStyle]);\n\n  React.useImperativeHandle(\n    action,\n    () => ({\n      updateIndicator: updateIndicatorState,\n      updateScrollButtons: updateScrollButtonState,\n    }),\n    [updateIndicatorState, updateScrollButtonState],\n  );\n\n  const indicator = (\n    <TabIndicator\n      className={classes.indicator}\n      orientation={orientation}\n      color={indicatorColor}\n      {...TabIndicatorProps}\n      style={{\n        ...indicatorStyle,\n        ...TabIndicatorProps.style,\n      }}\n    />\n  );\n\n  let childIndex = 0;\n  const children = React.Children.map(childrenProp, child => {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (child.type === React.Fragment) {\n        console.error(\n          [\n            \"Material-UI: the Tabs component doesn't accept a Fragment as a child.\",\n            'Consider providing an array instead.',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    const childValue = child.props.value === undefined ? childIndex : child.props.value;\n    valueToIndex.set(childValue, childIndex);\n    const selected = childValue === value;\n\n    childIndex += 1;\n    return React.cloneElement(child, {\n      fullWidth: variant === 'fullWidth',\n      indicator: selected && !mounted && indicator,\n      selected,\n      onChange,\n      textColor,\n      value: childValue,\n    });\n  });\n\n  const conditionalElements = getConditionalElements();\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes.vertical]: vertical,\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    >\n      {conditionalElements.scrollButtonStart}\n      {conditionalElements.scrollbarSizeListener}\n      <div\n        className={clsx(classes.scroller, {\n          [classes.fixed]: !scrollable,\n          [classes.scrollable]: scrollable,\n        })}\n        style={scrollerStyle}\n        ref={tabsRef}\n        onScroll={handleTabsScroll}\n      >\n        <div\n          className={clsx(classes.flexContainer, {\n            [classes.flexContainerVertical]: vertical,\n            [classes.centered]: centered && !scrollable,\n          })}\n          ref={childrenWrapperRef}\n          role=\"tablist\"\n        >\n          {children}\n        </div>\n        {mounted && indicator}\n      </div>\n      {conditionalElements.scrollButtonEnd}\n    </Component>\n  );\n});\n\nTabs.propTypes = {\n  /**\n   * Callback fired when the component mounts.\n   * This is useful when you want to trigger an action programmatically.\n   * It supports two actions: `updateIndicator()` and `updateScrollButtons()`\n   *\n   * @param {object} actions This object contains all possible actions\n   * that can be triggered programmatically.\n   */\n  action: refType,\n  /**\n   * If `true`, the tabs will be centered.\n   * This property is intended for large views.\n   */\n  centered: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Determines the color of the indicator.\n   */\n  indicatorColor: PropTypes.oneOf(['secondary', 'primary']),\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {any} value We default to the index of the child (number)\n   */\n  onChange: PropTypes.func,\n  /**\n   * The tabs orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The component used to render the scroll buttons.\n   */\n  ScrollButtonComponent: PropTypes.elementType,\n  /**\n   * Determine behavior of scroll buttons when tabs are set to scroll:\n   *\n   * - `auto` will only present them when not all the items are visible.\n   * - `desktop` will only present them on medium and larger viewports.\n   * - `on` will always present them.\n   * - `off` will never present them.\n   */\n  scrollButtons: PropTypes.oneOf(['auto', 'desktop', 'on', 'off']),\n  /**\n   * Props applied to the tab indicator element.\n   */\n  TabIndicatorProps: PropTypes.object,\n  /**\n   * Determines the color of the `Tab`.\n   */\n  textColor: PropTypes.oneOf(['secondary', 'primary', 'inherit']),\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this property to `false`.\n   */\n  value: PropTypes.any,\n  /**\n   *  Determines additional display behavior of the tabs:\n   *\n   *  - `scrollable` will invoke scrolling properties and allow for horizontally\n   *  scrolling (or swiping) of the tab bar.\n   *  -`fullWidth` will make the tabs grow to use all the available space,\n   *  which should be used for small views, like on mobile.\n   *  - `standard` will render the default state.\n   */\n  variant: PropTypes.oneOf(['standard', 'scrollable', 'fullWidth']),\n};\n\nexport default withStyles(styles, { name: 'MuiTabs' })(Tabs);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Tabs/Tabs.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tabs"
      ]
    },
    "TreeItem": {
      "description": "",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "collapseIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon used to collapse the node.",
          "tags": []
        },
        "endIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon displayed next to a end node.",
          "tags": []
        },
        "expandIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon used to expand the node.",
          "tags": []
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The icon to display next to the tree node's label.",
          "tags": []
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The tree node label.",
          "tags": []
        },
        "nodeId": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The id of the node.",
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.",
          "defaultValue": {
            "value": "Collapse",
            "computed": true
          },
          "tags": []
        }
      },
      "name": "TreeItem",
      "styles": {
        "classes": [
          "root",
          "expanded",
          "group",
          "content",
          "iconContainer",
          "label"
        ],
        "name": "MuiTreeItem",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "expanded": "Pseudo-class applied to the root element when expanded.",
          "group": "Styles applied to the `role=\"group\"` element.",
          "content": "Styles applied to the tree node content.",
          "iconContainer": "Styles applied to the tree node icon and collapse/expand icon.",
          "label": "Styles applied to the label element."
        },
        "globalClasses": {
          "root": "MuiTreeItem-root",
          "expanded": "Mui-expanded",
          "group": "MuiTreeItem-group",
          "content": "MuiTreeItem-content",
          "iconContainer": "MuiTreeItem-iconContainer",
          "label": "MuiTreeItem-label"
        }
      },
      "src": "/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions  */\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { withStyles } from '@material-ui/core/styles';\nimport { useForkRef } from '@material-ui/core/utils';\nimport TreeViewContext from '../TreeView/TreeViewContext';\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    outline: 0,\n    '&:focus > $content': {\n      backgroundColor: theme.palette.grey[400],\n    },\n  },\n  /* Pseudo-class applied to the root element when expanded. */\n  expanded: {},\n  /* Styles applied to the `role=\"group\"` element. */\n  group: {\n    margin: 0,\n    padding: 0,\n    marginLeft: 26,\n  },\n  /* Styles applied to the tree node content. */\n  content: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n  /* Styles applied to the tree node icon and collapse/expand icon. */\n  iconContainer: {\n    marginRight: 2,\n    width: 24,\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  /* Styles applied to the label element. */\n  label: {\n    width: '100%',\n  },\n});\n\nconst isPrintableCharacter = str => {\n  return str && str.length === 1 && str.match(/\\S/);\n};\n\nconst TreeItem = React.forwardRef(function TreeItem(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    collapseIcon,\n    endIcon,\n    expandIcon,\n    icon: iconProp,\n    label,\n    nodeId,\n    onClick,\n    onFocus,\n    onKeyDown,\n    TransitionComponent = Collapse,\n    ...other\n  } = props;\n\n  const {\n    expandAllSiblings,\n    focus,\n    focusFirstNode,\n    focusLastNode,\n    focusNextNode,\n    focusPreviousNode,\n    handleFirstChars,\n    handleLeftArrow,\n    handleNodeMap,\n    icons: contextIcons,\n    isExpanded,\n    isFocused,\n    isTabable,\n    setFocusByFirstCharacter,\n    toggle,\n  } = React.useContext(TreeViewContext);\n\n  const nodeRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const handleRef = useForkRef(nodeRef, ref);\n\n  let icon = iconProp;\n\n  const expandable = Boolean(children);\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const tabable = isTabable ? isTabable(nodeId) : false;\n  const icons = contextIcons || {};\n\n  if (!icon) {\n    if (expandable) {\n      if (!expanded) {\n        icon = expandIcon || icons.defaultExpandIcon;\n      } else {\n        icon = collapseIcon || icons.defaultCollapseIcon;\n      }\n\n      if (!icon) {\n        icon = icons.defaultParentIcon;\n      }\n    } else {\n      icon = endIcon || icons.defaultEndIcon;\n    }\n  }\n\n  const handleClick = event => {\n    if (!focused) {\n      focus(nodeId);\n    }\n\n    if (expandable) {\n      toggle(nodeId);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const handleKeyDown = event => {\n    let flag = false;\n    const key = event.key;\n\n    const printableCharacter = () => {\n      if (key === '*') {\n        expandAllSiblings(nodeId);\n        flag = true;\n      } else if (isPrintableCharacter(key)) {\n        setFocusByFirstCharacter(nodeId, key);\n        flag = true;\n      }\n    };\n\n    if (event.altKey || event.ctrlKey || event.metaKey) {\n      return;\n    }\n    if (event.shift) {\n      if (key === ' ' || key === 'Enter') {\n        event.stopPropagation();\n      } else if (isPrintableCharacter(key)) {\n        printableCharacter();\n      }\n    } else {\n      switch (key) {\n        case 'Enter':\n        case ' ':\n          if (nodeRef.current === event.currentTarget && expandable) {\n            toggle();\n            flag = true;\n          }\n          event.stopPropagation();\n          break;\n        case 'ArrowDown':\n          focusNextNode(nodeId);\n          flag = true;\n          break;\n        case 'ArrowUp':\n          focusPreviousNode(nodeId);\n          flag = true;\n          break;\n        case 'ArrowRight':\n          if (expandable) {\n            if (expanded) {\n              focusNextNode(nodeId);\n            } else {\n              toggle();\n            }\n          }\n          flag = true;\n          break;\n        case 'ArrowLeft':\n          handleLeftArrow(nodeId, event);\n          break;\n        case 'Home':\n          focusFirstNode();\n          flag = true;\n          break;\n        case 'End':\n          focusLastNode();\n          flag = true;\n          break;\n        default:\n          if (isPrintableCharacter(key)) {\n            printableCharacter();\n          }\n      }\n    }\n\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleFocus = event => {\n    if (!focused && tabable) {\n      focus(nodeId);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  React.useEffect(() => {\n    const childIds = React.Children.map(children, child => child.props.nodeId);\n    if (handleNodeMap) {\n      handleNodeMap(nodeId, childIds);\n    }\n  }, [children, nodeId, handleNodeMap]);\n\n  React.useEffect(() => {\n    if (handleFirstChars && label) {\n      handleFirstChars(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n    }\n  }, [handleFirstChars, nodeId, label]);\n\n  React.useEffect(() => {\n    if (focused) {\n      nodeRef.current.focus();\n    }\n  }, [focused]);\n\n  return (\n    <li\n      className={clsx(classes.root, className, {\n        [classes.expanded]: expanded,\n      })}\n      role=\"treeitem\"\n      onKeyDown={handleKeyDown}\n      onFocus={handleFocus}\n      aria-expanded={expandable ? expanded : null}\n      ref={handleRef}\n      tabIndex={tabable ? 0 : -1}\n      {...other}\n    >\n      <div className={classes.content} onClick={handleClick} ref={contentRef}>\n        {icon ? <div className={classes.iconContainer}>{icon}</div> : null}\n        <Typography component=\"div\" className={classes.label}>\n          {label}\n        </Typography>\n      </div>\n      {children && (\n        <TransitionComponent\n          unmountOnExit\n          className={classes.group}\n          in={expanded}\n          component=\"ul\"\n          role=\"group\"\n        >\n          {children}\n        </TransitionComponent>\n      )}\n    </li>\n  );\n});\n\nTreeItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType,\n};\n\nexport default withStyles(styles, { name: 'MuiTreeItem' })(TreeItem);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLLIElement",
      "filename": "/packages/material-ui-lab/src/TreeItem/TreeItem.js",
      "inheritance": null,
      "usedInPages": [
        "/components/tree-view"
      ]
    },
    "ButtonBase": {
      "description": "`ButtonBase` contains as few styles as possible.\nIt aims to be a simple building block for creating a button.\nIt contains a load of style reset and some focus/ripple logic.",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",
          "tags": []
        },
        "centerRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripples will be centered.\nThey won't start at the cursor interaction position.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "component": {
          "type": {
            "name": "custom",
            "raw": "elementTypeAcceptingRef"
          },
          "required": false,
          "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the base button will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the ripple effect will be disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "disableTouchRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the touch ripple effect will be disabled.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "focusRipple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the base button will have a keyboard focus ripple.\n`disableRipple` must also be `false`.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "focusVisibleClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "This prop can help a person know which element has the keyboard focus.\nThe class name will be applied when the element gain the focus through a keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\nif needed.",
          "tags": []
        },
        "onFocusVisible": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",
          "tags": []
        },
        "TouchRippleProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `TouchRipple` element.",
          "tags": []
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'submit'",
                "computed": false
              },
              {
                "value": "'reset'",
                "computed": false
              },
              {
                "value": "'button'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Used to control the button's purpose.\nThis prop passes the value to the `type` attribute of the native button component.",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "ButtonBase",
      "styles": {
        "classes": [
          "root",
          "disabled",
          "focusVisible"
        ],
        "name": "MuiButtonBase",
        "descriptions": {
          "root": "Styles applied to the root element.",
          "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
          "focusVisible": "Pseudo-class applied to the root element if keyboard focused."
        },
        "globalClasses": {
          "root": "MuiButtonBase-root",
          "disabled": "Mui-disabled",
          "focusVisible": "Mui-focusVisible"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef, refType } from '@material-ui/utils';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport withStyles from '../styles/withStyles';\nimport NoSsr from '../NoSsr';\nimport { useIsFocusVisible } from '../utils/focusVisible';\nimport TouchRipple from './TouchRipple';\n\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'relative',\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent', // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0, // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0, // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none', // Reset\n    '-webkit-appearance': 'none', // Reset\n    textDecoration: 'none',\n    // So we take precedent over the style of a native <a /> element.\n    color: 'inherit',\n    '&::-moz-focus-inner': {\n      borderStyle: 'none', // Remove Firefox dotted outline.\n    },\n    '&$disabled': {\n      pointerEvents: 'none', // Disable link interactions\n      cursor: 'default',\n    },\n  },\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n  /* Pseudo-class applied to the root element if keyboard focused. */\n  focusVisible: {},\n};\n\n/**\n * `ButtonBase` contains as few styles as possible.\n * It aims to be a simple building block for creating a button.\n * It contains a load of style reset and some focus/ripple logic.\n */\nconst ButtonBase = React.forwardRef(function ButtonBase(props, ref) {\n  const {\n    action,\n    buttonRef: buttonRefProp,\n    centerRipple = false,\n    children,\n    classes,\n    className,\n    component = 'button',\n    disabled = false,\n    disableRipple = false,\n    disableTouchRipple = false,\n    focusRipple = false,\n    focusVisibleClassName,\n    onBlur,\n    onClick,\n    onFocus,\n    onFocusVisible,\n    onKeyDown,\n    onKeyUp,\n    onMouseDown,\n    onMouseLeave,\n    onMouseUp,\n    onTouchEnd,\n    onTouchMove,\n    onTouchStart,\n    onDragLeave,\n    tabIndex = 0,\n    TouchRippleProps,\n    type = 'button',\n    ...other\n  } = props;\n\n  const buttonRef = React.useRef(null);\n  function getButtonNode() {\n    // #StrictMode ready\n    return ReactDOM.findDOMNode(buttonRef.current);\n  }\n\n  const rippleRef = React.useRef(null);\n\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  const { isFocusVisible, onBlurVisible, ref: focusVisibleRef } = useIsFocusVisible();\n\n  React.useImperativeHandle(\n    action,\n    () => ({\n      focusVisible: () => {\n        setFocusVisible(true);\n        buttonRef.current.focus();\n      },\n    }),\n    [],\n  );\n\n  React.useEffect(() => {\n    if (focusVisible && focusRipple && !disableRipple) {\n      rippleRef.current.pulsate();\n    }\n  }, [disableRipple, focusRipple, focusVisible]);\n\n  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {\n    return useEventCallback(event => {\n      if (eventCallback) {\n        eventCallback(event);\n      }\n\n      const ignore = skipRippleAction;\n      if (!ignore && rippleRef.current) {\n        rippleRef.current[rippleAction](event);\n      }\n\n      return true;\n    });\n  }\n\n  const handleMouseDown = useRippleHandler('start', onMouseDown);\n  const handleDragLeave = useRippleHandler('stop', onDragLeave);\n  const handleMouseUp = useRippleHandler('stop', onMouseUp);\n  const handleMouseLeave = useRippleHandler('stop', event => {\n    if (focusVisible) {\n      event.preventDefault();\n    }\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n  });\n  const handleTouchStart = useRippleHandler('start', onTouchStart);\n  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);\n  const handleTouchMove = useRippleHandler('stop', onTouchMove);\n  const handleBlur = useRippleHandler(\n    'stop',\n    event => {\n      if (focusVisible) {\n        onBlurVisible(event);\n        setFocusVisible(false);\n      }\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    false,\n  );\n  const handleFocus = useEventCallback(event => {\n    if (disabled) {\n      return;\n    }\n\n    // Fix for https://github.com/facebook/react/issues/7769\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n\n      if (onFocusVisible) {\n        onFocusVisible(event);\n      }\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  });\n\n  /**\n   * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat\n   */\n  const keydownRef = React.useRef(false);\n  const handleKeyDown = useEventCallback(event => {\n    // Check if key is already down to avoid repeats being counted as multiple activations\n    if (\n      focusRipple &&\n      !keydownRef.current &&\n      focusVisible &&\n      rippleRef.current &&\n      event.key === ' '\n    ) {\n      keydownRef.current = true;\n      event.persist();\n      rippleRef.current.stop(event, () => {\n        rippleRef.current.start(event);\n      });\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    const button = getButtonNode();\n    // Keyboard accessibility for non interactive elements\n    if (\n      event.target === event.currentTarget &&\n      component &&\n      component !== 'button' &&\n      (event.key === ' ' || event.key === 'Enter') &&\n      !(button.tagName === 'A' && button.href)\n    ) {\n      event.preventDefault();\n      if (onClick) {\n        onClick(event);\n      }\n    }\n  });\n  const handleKeyUp = useEventCallback(event => {\n    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible) {\n      keydownRef.current = false;\n      event.persist();\n      rippleRef.current.stop(event, () => {\n        rippleRef.current.pulsate(event);\n      });\n    }\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n  });\n\n  let ComponentProp = component;\n\n  if (ComponentProp === 'button' && other.href) {\n    ComponentProp = 'a';\n  }\n\n  const buttonProps = {};\n  if (ComponentProp === 'button') {\n    buttonProps.type = type;\n    buttonProps.disabled = disabled;\n  } else {\n    if (ComponentProp !== 'a' || !other.href) {\n      buttonProps.role = 'button';\n    }\n    buttonProps['aria-disabled'] = disabled;\n  }\n\n  const handleUserRef = useForkRef(buttonRefProp, ref);\n  const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);\n  const handleRef = useForkRef(handleUserRef, handleOwnRef);\n\n  return (\n    <ComponentProp\n      className={clsx(\n        classes.root,\n        {\n          [classes.disabled]: disabled,\n          [classes.focusVisible]: focusVisible,\n          [focusVisibleClassName]: focusVisible,\n        },\n        className,\n      )}\n      onBlur={handleBlur}\n      onClick={onClick}\n      onFocus={handleFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onMouseDown={handleMouseDown}\n      onMouseLeave={handleMouseLeave}\n      onMouseUp={handleMouseUp}\n      onDragLeave={handleDragLeave}\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n      ref={handleRef}\n      tabIndex={disabled ? -1 : tabIndex}\n      {...buttonProps}\n      {...other}\n    >\n      {children}\n      {!disableRipple && !disabled ? (\n        <NoSsr>\n          {/* TouchRipple is only needed client-side, x2 boost on the server. */}\n          <TouchRipple ref={rippleRef} center={centerRipple} {...TouchRippleProps} />\n        </NoSsr>\n      ) : null}\n    </ComponentProp>\n  );\n});\n\nButtonBase.propTypes = {\n  /**\n   * A ref for imperative actions.\n   * It currently only supports `focusVisible()` action.\n   */\n  action: refType,\n  /**\n   * @ignore\n   *\n   * Use that prop to pass a ref to the native button component.\n   * @deprecated Use `ref` instead.\n   */\n  buttonRef: refType,\n  /**\n   * If `true`, the ripples will be centered.\n   * They won't start at the cursor interaction position.\n   */\n  centerRipple: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * If `true`, the base button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `focusVisibleClassName`.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the touch ripple effect will be disabled.\n   */\n  disableTouchRipple: PropTypes.bool,\n  /**\n   * If `true`, the base button will have a keyboard focus ripple.\n   * `disableRipple` must also be `false`.\n   */\n  focusRipple: PropTypes.bool,\n  /**\n   * This prop can help a person know which element has the keyboard focus.\n   * The class name will be applied when the element gain the focus through a keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onDragLeave: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Callback fired when the component is focused with a keyboard.\n   * We trigger a `onFocus` callback too.\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseUp: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchEnd: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchMove: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchStart: PropTypes.func,\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Props applied to the `TouchRipple` element.\n   */\n  TouchRippleProps: PropTypes.object,\n  /**\n   * Used to control the button's purpose.\n   * This prop passes the value to the `type` attribute of the native button component.\n   */\n  type: PropTypes.oneOf(['submit', 'reset', 'button']),\n};\n\nexport default withStyles(styles, { name: 'MuiButtonBase' })(ButtonBase);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLButtonElement",
      "filename": "/packages/material-ui/src/ButtonBase/ButtonBase.js",
      "inheritance": null,
      "usedInPages": [
        "/components/buttons"
      ]
    },
    "Popover": {
      "description": "",
      "methods": [],
      "props": {
        "action": {
          "type": {
            "name": "custom",
            "raw": "refType"
          },
          "required": false,
          "description": "A ref for imperative actions.\nIt currently only supports updatePosition() action.",
          "tags": []
        },
        "anchorEl": {
          "type": {
            "name": "custom",
            "raw": "chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n  if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {\n    const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n    const containerWindow = ownerWindow(resolvedAnchorEl);\n\n    if (resolvedAnchorEl instanceof containerWindow.Element) {\n      const box = resolvedAnchorEl.getBoundingClientRect();\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        box.top === 0 &&\n        box.left === 0 &&\n        box.right === 0 &&\n        box.bottom === 0\n      ) {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            'The anchor element should be part of the document layout.',\n            \"Make sure the element is present in the document or that it's not display none.\",\n          ].join('\\n'),\n        );\n      }\n    } else {\n      return new Error(\n        [\n          'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n          `It should be an Element instance but it's \\`${resolvedAnchorEl}\\` instead.`,\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return null;\n})"
          },
          "required": false,
          "description": "This is the DOM element, or a function that returns the DOM element,\nthat may be used to set the position of the popover.",
          "tags": []
        },
        "anchorOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'left'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'right'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'top'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'bottom'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "This is the point on the anchor where the popover's\n`anchorEl` will attach to. This is not used when the\nanchorReference is 'anchorPosition'.\n\nOptions:\nvertical: [top, center, bottom];\nhorizontal: [left, center, right].",
          "defaultValue": {
            "value": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
            "computed": false
          },
          "tags": []
        },
        "anchorPosition": {
          "type": {
            "name": "shape",
            "value": {
              "left": {
                "name": "number",
                "required": true
              },
              "top": {
                "name": "number",
                "required": true
              }
            }
          },
          "required": false,
          "description": "This is the position that may be used\nto set the position of the popover.\nThe coordinates are relative to\nthe application's client area.",
          "tags": []
        },
        "anchorReference": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'anchorEl'",
                "computed": false
              },
              {
                "value": "'anchorPosition'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'anchorEl'",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The content of the component.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "A node, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time.",
          "tags": []
        },
        "elevation": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The elevation of the popover.",
          "defaultValue": {
            "value": "8",
            "computed": false
          },
          "tags": []
        },
        "getContentAnchorEl": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "This function is called in order to retrieve the content anchor element.\nIt's the opposite of the `anchorEl` prop.\nThe content anchor element should be an element inside the popover.\nIt's used to correctly scroll and set the position of the popover.\nThe positioning strategy tries to make the content anchor element just above the\nanchor element.",
          "tags": []
        },
        "marginThreshold": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Specifies how close to the edge of the window the popover can appear.",
          "defaultValue": {
            "value": "16",
            "computed": false
          },
          "tags": []
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "reason"
            }
          ]
        },
        "onEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the component is entering.",
          "tags": []
        },
        "onEntered": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component has entered.",
          "tags": []
        },
        "onEntering": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component is entering.",
          "tags": []
        },
        "onExit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired before the component is exiting.",
          "tags": []
        },
        "onExited": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component has exited.",
          "tags": []
        },
        "onExiting": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component is exiting.",
          "tags": []
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "If `true`, the popover is visible.",
          "tags": []
        },
        "PaperProps": {
          "type": {
            "name": "shape",
            "value": {
              "component": {
                "name": "custom",
                "raw": "elementTypeAcceptingRef",
                "required": false
              }
            }
          },
          "required": false,
          "description": "Props applied to the [`Paper`](/api/paper/) element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        },
        "transformOrigin": {
          "type": {
            "name": "shape",
            "value": {
              "horizontal": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'left'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'right'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              },
              "vertical": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'top'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'bottom'",
                        "computed": false
                      }
                    ]
                  }
                ],
                "required": true
              }
            }
          },
          "required": false,
          "description": "This is the point on the popover which\nwill attach to the anchor's origin.\n\nOptions:\nvertical: [top, center, bottom, x(px)];\nhorizontal: [left, center, right, x(px)].",
          "defaultValue": {
            "value": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
            "computed": false
          },
          "tags": []
        },
        "TransitionComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The component used for the transition.",
          "defaultValue": {
            "value": "Grow",
            "computed": true
          },
          "tags": []
        },
        "transitionDuration": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "shape",
                "value": {
                  "enter": {
                    "name": "number",
                    "required": false
                  },
                  "exit": {
                    "name": "number",
                    "required": false
                  }
                }
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "Set to 'auto' to automatically calculate transition time based on height.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "tags": []
        },
        "TransitionProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the `Transition` element.",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Popover",
      "styles": {
        "classes": [
          "root",
          "paper"
        ],
        "name": "MuiPopover",
        "descriptions": {
          "root": "Styles applied to the root element",
          "paper": "Styles applied to the `Paper` component."
        },
        "globalClasses": {
          "root": "MuiPopover-root",
          "paper": "MuiPopover-paper"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport debounce from '../utils/debounce';\nimport clsx from 'clsx';\nimport { chainPropTypes, elementTypeAcceptingRef, refType } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport withStyles from '../styles/withStyles';\nimport Modal from '../Modal';\nimport Grow from '../Grow';\nimport Paper from '../Paper';\n\nexport function getOffsetTop(rect, vertical) {\n  let offset = 0;\n\n  if (typeof vertical === 'number') {\n    offset = vertical;\n  } else if (vertical === 'center') {\n    offset = rect.height / 2;\n  } else if (vertical === 'bottom') {\n    offset = rect.height;\n  }\n\n  return offset;\n}\n\nexport function getOffsetLeft(rect, horizontal) {\n  let offset = 0;\n\n  if (typeof horizontal === 'number') {\n    offset = horizontal;\n  } else if (horizontal === 'center') {\n    offset = rect.width / 2;\n  } else if (horizontal === 'right') {\n    offset = rect.width;\n  }\n\n  return offset;\n}\n\nfunction getTransformOriginValue(transformOrigin) {\n  return [transformOrigin.horizontal, transformOrigin.vertical]\n    .map(n => (typeof n === 'number' ? `${n}px` : n))\n    .join(' ');\n}\n\n// Sum the scrollTop between two elements.\nfunction getScrollParent(parent, child) {\n  let element = child;\n  let scrollTop = 0;\n\n  while (element && element !== parent) {\n    element = element.parentNode;\n    scrollTop += element.scrollTop;\n  }\n  return scrollTop;\n}\n\nfunction getAnchorEl(anchorEl) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\n\nexport const styles = {\n  /* Styles applied to the root element */\n  root: {},\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    position: 'absolute',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    // So we see the popover when it's empty.\n    // It's most likely on issue on userland.\n    minWidth: 16,\n    minHeight: 16,\n    maxWidth: 'calc(100% - 32px)',\n    maxHeight: 'calc(100% - 32px)',\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n  },\n};\n\nconst Popover = React.forwardRef(function Popover(props, ref) {\n  const {\n    action,\n    anchorEl,\n    anchorOrigin = {\n      vertical: 'top',\n      horizontal: 'left',\n    },\n    anchorPosition,\n    anchorReference = 'anchorEl',\n    children,\n    classes,\n    className,\n    container: containerProp,\n    elevation = 8,\n    getContentAnchorEl,\n    marginThreshold = 16,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExited,\n    onExiting,\n    open,\n    PaperProps = {},\n    transformOrigin = {\n      vertical: 'top',\n      horizontal: 'left',\n    },\n    TransitionComponent = Grow,\n    transitionDuration: transitionDurationProp = 'auto',\n    TransitionProps = {},\n    ...other\n  } = props;\n  const paperRef = React.useRef();\n\n  // Returns the top/left offset of the position\n  // to attach to on the anchor element (or body if none is provided)\n  const getAnchorOffset = React.useCallback(\n    contentAnchorOffset => {\n      if (anchorReference === 'anchorPosition') {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!anchorPosition) {\n            console.error(\n              'Material-UI: you need to provide a `anchorPosition` prop when using ' +\n                '<Popover anchorReference=\"anchorPosition\" />.',\n            );\n          }\n        }\n        return anchorPosition;\n      }\n\n      const resolvedAnchorEl = getAnchorEl(anchorEl);\n      const containerWindow = ownerWindow(resolvedAnchorEl);\n\n      // If an anchor element wasn't provided, just use the parent body element of this Popover\n      const anchorElement =\n        resolvedAnchorEl instanceof containerWindow.Element\n          ? resolvedAnchorEl\n          : ownerDocument(paperRef.current).body;\n      const anchorRect = anchorElement.getBoundingClientRect();\n\n      if (process.env.NODE_ENV !== 'production') {\n        const box = anchorElement.getBoundingClientRect();\n\n        if (\n          process.env.NODE_ENV !== 'test' &&\n          box.top === 0 &&\n          box.left === 0 &&\n          box.right === 0 &&\n          box.bottom === 0\n        ) {\n          console.warn(\n            [\n              'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n              'The anchor element should be part of the document layout.',\n              \"Make sure the element is present in the document or that it's not display none.\",\n            ].join('\\n'),\n          );\n        }\n      }\n\n      const anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';\n\n      return {\n        top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),\n        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal),\n      };\n    },\n    [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference],\n  );\n\n  // Returns the vertical offset of inner content to anchor the transform on if provided\n  const getContentAnchorOffset = React.useCallback(\n    element => {\n      let contentAnchorOffset = 0;\n\n      if (getContentAnchorEl && anchorReference === 'anchorEl') {\n        const contentAnchorEl = getContentAnchorEl(element);\n\n        if (contentAnchorEl && element.contains(contentAnchorEl)) {\n          const scrollTop = getScrollParent(element, contentAnchorEl);\n          contentAnchorOffset =\n            contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;\n        }\n\n        // != the default value\n        if (process.env.NODE_ENV !== 'production') {\n          if (anchorOrigin.vertical !== 'top') {\n            console.error(\n              [\n                'Material-UI: you can not change the default `anchorOrigin.vertical` value ',\n                'when also providing the `getContentAnchorEl` prop to the popover component.',\n                'Only use one of the two props.',\n                'Set `getContentAnchorEl` to `null | undefined`' +\n                  ' or leave `anchorOrigin.vertical` unchanged.',\n              ].join('\\n'),\n            );\n          }\n        }\n      }\n\n      return contentAnchorOffset;\n    },\n    [anchorOrigin.vertical, anchorReference, getContentAnchorEl],\n  );\n\n  // Return the base transform origin using the element\n  // and taking the content anchor offset into account if in use\n  const getTransformOrigin = React.useCallback(\n    (elemRect, contentAnchorOffset = 0) => {\n      return {\n        vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,\n        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal),\n      };\n    },\n    [transformOrigin.horizontal, transformOrigin.vertical],\n  );\n\n  const getPositioningStyle = React.useCallback(\n    element => {\n      // Check if the parent has requested anchoring on an inner content node\n      const contentAnchorOffset = getContentAnchorOffset(element);\n      const elemRect = {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n      };\n\n      // Get the transform origin point on the element itself\n      const elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);\n\n      if (anchorReference === 'none') {\n        return {\n          top: null,\n          left: null,\n          transformOrigin: getTransformOriginValue(elemTransformOrigin),\n        };\n      }\n\n      // Get the offset of of the anchoring element\n      const anchorOffset = getAnchorOffset(contentAnchorOffset);\n\n      // Calculate element positioning\n      let top = anchorOffset.top - elemTransformOrigin.vertical;\n      let left = anchorOffset.left - elemTransformOrigin.horizontal;\n      const bottom = top + elemRect.height;\n      const right = left + elemRect.width;\n\n      // Use the parent window of the anchorEl if provided\n      const containerWindow = ownerWindow(getAnchorEl(anchorEl));\n\n      // Window thresholds taking required margin into account\n      const heightThreshold = containerWindow.innerHeight - marginThreshold;\n      const widthThreshold = containerWindow.innerWidth - marginThreshold;\n\n      // Check if the vertical axis needs shifting\n      if (top < marginThreshold) {\n        const diff = top - marginThreshold;\n        top -= diff;\n        elemTransformOrigin.vertical += diff;\n      } else if (bottom > heightThreshold) {\n        const diff = bottom - heightThreshold;\n        top -= diff;\n        elemTransformOrigin.vertical += diff;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {\n          console.error(\n            [\n              'Material-UI: the popover component is too tall.',\n              `Some part of it can not be seen on the screen (${elemRect.height -\n                heightThreshold}px).`,\n              'Please consider adding a `max-height` to improve the user-experience.',\n            ].join('\\n'),\n          );\n        }\n      }\n\n      // Check if the horizontal axis needs shifting\n      if (left < marginThreshold) {\n        const diff = left - marginThreshold;\n        left -= diff;\n        elemTransformOrigin.horizontal += diff;\n      } else if (right > widthThreshold) {\n        const diff = right - widthThreshold;\n        left -= diff;\n        elemTransformOrigin.horizontal += diff;\n      }\n\n      return {\n        top: `${top}px`,\n        left: `${left}px`,\n        transformOrigin: getTransformOriginValue(elemTransformOrigin),\n      };\n    },\n    [\n      anchorEl,\n      anchorReference,\n      getAnchorOffset,\n      getContentAnchorOffset,\n      getTransformOrigin,\n      marginThreshold,\n    ],\n  );\n\n  const setPositioningStyles = React.useCallback(\n    element => {\n      const positioning = getPositioningStyle(element);\n\n      if (positioning.top !== null) {\n        element.style.top = positioning.top;\n      }\n      if (positioning.left !== null) {\n        element.style.left = positioning.left;\n      }\n      element.style.transformOrigin = positioning.transformOrigin;\n    },\n    [getPositioningStyle],\n  );\n\n  const handleEntering = (element, isAppearing) => {\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n\n    setPositioningStyles(element);\n  };\n\n  const handlePaperRef = React.useCallback(instance => {\n    // #StrictMode ready\n    paperRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n\n  const updatePosition = React.useMemo(() => {\n    if (!open) {\n      return undefined;\n    }\n\n    return debounce(() => {\n      setPositioningStyles(paperRef.current);\n    });\n  }, [open, setPositioningStyles]);\n\n  React.useImperativeHandle(action, () => (open ? { updatePosition } : null), [\n    open,\n    updatePosition,\n  ]);\n\n  React.useEffect(() => {\n    if (!updatePosition) {\n      return undefined;\n    }\n\n    window.addEventListener('resize', updatePosition);\n    return () => {\n      window.removeEventListener('resize', updatePosition);\n      updatePosition.clear();\n    };\n  }, [updatePosition]);\n\n  let transitionDuration = transitionDurationProp;\n\n  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {\n    transitionDuration = undefined;\n  }\n\n  // If the container prop is provided, use that\n  // If the anchorEl prop is provided, use its parent body element as the container\n  // If neither are provided let the Modal take care of choosing the container\n  const container =\n    containerProp || (anchorEl ? ownerDocument(getAnchorEl(anchorEl)).body : undefined);\n\n  return (\n    <Modal\n      container={container}\n      open={open}\n      ref={ref}\n      BackdropProps={{ invisible: true }}\n      className={clsx(classes.root, className)}\n      {...other}\n    >\n      <TransitionComponent\n        appear\n        in={open}\n        onEnter={onEnter}\n        onEntered={onEntered}\n        onExit={onExit}\n        onExited={onExited}\n        onExiting={onExiting}\n        timeout={transitionDuration}\n        {...TransitionProps}\n        onEntering={createChainedFunction(handleEntering, TransitionProps.onEntering)}\n      >\n        <Paper\n          data-mui-test=\"Popover\"\n          elevation={elevation}\n          ref={handlePaperRef}\n          {...PaperProps}\n          className={clsx(classes.paper, PaperProps.className)}\n        >\n          {children}\n        </Paper>\n      </TransitionComponent>\n    </Modal>\n  );\n});\n\nPopover.propTypes = {\n  /**\n   * A ref for imperative actions.\n   * It currently only supports updatePosition() action.\n   */\n  action: refType,\n  /**\n   * This is the DOM element, or a function that returns the DOM element,\n   * that may be used to set the position of the popover.\n   */\n  anchorEl: chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {\n      const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n      const containerWindow = ownerWindow(resolvedAnchorEl);\n\n      if (resolvedAnchorEl instanceof containerWindow.Element) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n\n        if (\n          process.env.NODE_ENV !== 'test' &&\n          box.top === 0 &&\n          box.left === 0 &&\n          box.right === 0 &&\n          box.bottom === 0\n        ) {\n          return new Error(\n            [\n              'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n              'The anchor element should be part of the document layout.',\n              \"Make sure the element is present in the document or that it's not display none.\",\n            ].join('\\n'),\n          );\n        }\n      } else {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            `It should be an Element instance but it's \\`${resolvedAnchorEl}\\` instead.`,\n          ].join('\\n'),\n        );\n      }\n    }\n\n    return null;\n  }),\n  /**\n   * This is the point on the anchor where the popover's\n   * `anchorEl` will attach to. This is not used when the\n   * anchorReference is 'anchorPosition'.\n   *\n   * Options:\n   * vertical: [top, center, bottom];\n   * horizontal: [left, center, right].\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.oneOf(['left', 'center', 'right']),\n    ]).isRequired,\n    vertical: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['top', 'center', 'bottom'])])\n      .isRequired,\n  }),\n  /**\n   * This is the position that may be used\n   * to set the position of the popover.\n   * The coordinates are relative to\n   * the application's client area.\n   */\n  anchorPosition: PropTypes.shape({\n    left: PropTypes.number.isRequired,\n    top: PropTypes.number.isRequired,\n  }),\n  /*\n   * This determines which anchor prop to refer to to set\n   * the position of the popover.\n   */\n  anchorReference: PropTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will passed to the Modal component.\n   * By default, it uses the body of the anchorEl's top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * The elevation of the popover.\n   */\n  elevation: PropTypes.number,\n  /**\n   * This function is called in order to retrieve the content anchor element.\n   * It's the opposite of the `anchorEl` prop.\n   * The content anchor element should be an element inside the popover.\n   * It's used to correctly scroll and set the position of the popover.\n   * The positioning strategy tries to make the content anchor element just above the\n   * anchor element.\n   */\n  getContentAnchorEl: PropTypes.func,\n  /**\n   * Specifies how close to the edge of the window the popover can appear.\n   */\n  marginThreshold: PropTypes.number,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired before the component is entering.\n   */\n  onEnter: PropTypes.func,\n  /**\n   * Callback fired when the component has entered.\n   */\n  onEntered: PropTypes.func,\n  /**\n   * Callback fired when the component is entering.\n   */\n  onEntering: PropTypes.func,\n  /**\n   * Callback fired before the component is exiting.\n   */\n  onExit: PropTypes.func,\n  /**\n   * Callback fired when the component has exited.\n   */\n  onExited: PropTypes.func,\n  /**\n   * Callback fired when the component is exiting.\n   */\n  onExiting: PropTypes.func,\n  /**\n   * If `true`, the popover is visible.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * Props applied to the [`Paper`](/api/paper/) element.\n   */\n  PaperProps: PropTypes.shape({\n    component: elementTypeAcceptingRef,\n  }),\n  /**\n   * This is the point on the popover which\n   * will attach to the anchor's origin.\n   *\n   * Options:\n   * vertical: [top, center, bottom, x(px)];\n   * horizontal: [left, center, right, x(px)].\n   */\n  transformOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.oneOf(['left', 'center', 'right']),\n    ]).isRequired,\n    vertical: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['top', 'center', 'bottom'])])\n      .isRequired,\n  }),\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  transitionDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({ enter: PropTypes.number, exit: PropTypes.number }),\n    PropTypes.oneOf(['auto']),\n  ]),\n  /**\n   * Props applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object,\n};\n\nexport default withStyles(styles, { name: 'MuiPopover' })(Popover);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Popover/Popover.js",
      "inheritance": {
        "component": "Modal",
        "pathname": "/api/modal"
      },
      "usedInPages": [
        "/components/menus",
        "/components/popover"
      ]
    },
    "Select": {
      "description": "",
      "methods": [],
      "props": {
        "autoWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, the width of the popover will automatically be set according to the items inside the\nmenu, otherwise it will be at least the width of the select input.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The option elements to populate the select with.\nCan be some `MenuItem` when `native` is false and `option` when `native` is true.\n\n⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.",
          "tags": []
        },
        "classes": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details.",
          "tags": []
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The default element value. Use when the component is not controlled.",
          "tags": []
        },
        "displayEmpty": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, a value is displayed even if no items are selected.\n\nIn order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\nYou can only use it when the `native` prop is `false` (default).",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "IconComponent": {
          "type": {
            "name": "elementType"
          },
          "required": false,
          "description": "The icon that displays the arrow.",
          "defaultValue": {
            "value": "ArrowDropDownIcon",
            "computed": true
          },
          "tags": []
        },
        "input": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
          "tags": []
        },
        "inputProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\nWhen `native` is `true`, the attributes are applied on the `select` element.",
          "tags": []
        },
        "labelId": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The idea of an element that acts as an additional label. The Select will\nbe labelled by the additional label and the selected value.",
          "tags": []
        },
        "labelWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The label width to be used on OutlinedInput.\nThis prop is required when the `variant` prop is `outlined`.",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "tags": []
        },
        "MenuProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the [`Menu`](/api/menu/) element.",
          "tags": []
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true, `value` must be an array and the menu will support multiple selections.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "native": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If `true`, the component will be using a native `select` element.",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "tags": []
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback function fired when a menu item is selected.",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (any).",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The react element that was selected when `native` is `false` (default).",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "child"
            }
          ]
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be closed.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the component requests to be opened.\nUse in controlled mode (see open).",
          "tags": [
            {
              "title": "param",
              "description": "The event source of the callback.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "event"
            }
          ]
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Control `select` open state.\nYou can only use it when the `native` prop is `false` (default).",
          "tags": []
        },
        "renderValue": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Render the selected value.\nYou can only use it when the `native` prop is `false` (default).",
          "tags": [
            {
              "title": "param",
              "description": "The `value` provided to the component.",
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "value"
            },
            {
              "title": "returns",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "ReactNode"
              }
            }
          ]
        },
        "SelectDisplayProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Props applied to the clickable div element.",
          "tags": []
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The input value. Providing an empty string will select no options.\nThis prop is required when the `native` prop is `false` (default).\nSet to an empty string `''` if you don't want any of the available options to be selected.\n\nIf the value is an object it must have reference equality with the option in order to be selected.\nIf the value is not an object, the string representation must match with the string representation of the option in order to be selected.",
          "tags": []
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standard'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'filled'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The variant to use.",
          "defaultValue": {
            "value": "'standard'",
            "computed": false
          },
          "tags": []
        }
      },
      "name": "Select",
      "styles": {
        "classes": [
          "root",
          "select",
          "filled",
          "outlined",
          "selectMenu",
          "disabled",
          "icon",
          "iconOpen",
          "iconFilled",
          "iconOutlined"
        ],
        "name": "MuiSelect",
        "descriptions": {
          "root": "Styles applied to the select component `root` class.",
          "select": "Styles applied to the select component `select` class.",
          "filled": "Styles applied to the select component if `variant=\"filled\"`.",
          "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
          "selectMenu": "Styles applied to the select component `selectMenu` class.",
          "disabled": "Pseudo-class applied to the select component `disabled` class.",
          "icon": "Styles applied to the icon component.",
          "iconOpen": "Styles applied to the icon component if the popup is open.",
          "iconFilled": "Styles applied to the icon component if `variant=\"filled\"`.",
          "iconOutlined": "Styles applied to the icon component if `variant=\"outlined\"`."
        },
        "globalClasses": {
          "root": "MuiSelect-root",
          "select": "MuiSelect-select",
          "filled": "MuiSelect-filled",
          "outlined": "MuiSelect-outlined",
          "selectMenu": "MuiSelect-selectMenu",
          "disabled": "Mui-disabled",
          "icon": "MuiSelect-icon",
          "iconOpen": "MuiSelect-iconOpen",
          "iconFilled": "MuiSelect-iconFilled",
          "iconOutlined": "MuiSelect-iconOutlined"
        }
      },
      "src": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\n\nexport const styles = nativeSelectStyles;\n\nconst Select = React.forwardRef(function Select(props, ref) {\n  const {\n    autoWidth = false,\n    children,\n    classes,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    labelId,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'standard',\n    labelWidth = 0,\n    ...other\n  } = props;\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant'],\n  });\n\n  const variant = fcs.variant || variantProps;\n\n  const InputComponent =\n    input ||\n    {\n      standard: <Input />,\n      outlined: <OutlinedInput labelWidth={labelWidth} />,\n      filled: <FilledInput />,\n    }[variant];\n\n  return React.cloneElement(InputComponent, {\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    select: true,\n    inputProps: {\n      children,\n      IconComponent,\n      variant,\n      type: undefined, // We render a select. We can ignore the type provided by the `Input`.\n      multiple,\n      ...(native\n        ? {}\n        : {\n            autoWidth,\n            displayEmpty,\n            labelId,\n            MenuProps,\n            onClose,\n            onOpen,\n            open,\n            renderValue,\n            SelectDisplayProps: { id, ...SelectDisplayProps },\n          }),\n      ...inputProps,\n      classes: inputProps\n        ? mergeClasses({\n            baseClasses: classes,\n            newClasses: inputProps.classes,\n            Component: Select,\n          })\n        : classes,\n      ...(input ? input.props.inputProps : {}),\n    },\n    ref,\n    ...other,\n  });\n});\n\nSelect.propTypes = {\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * The idea of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n  /**\n   * The label width to be used on OutlinedInput.\n   * This prop is required when the `variant` prop is `outlined`.\n   */\n  labelWidth: PropTypes.number,\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n\nSelect.muiName = 'Select';\n\nexport default withStyles(styles, { name: 'MuiSelect' })(Select);\n",
      "spread": true,
      "EOL": "\n",
      "forwardsRefTo": "HTMLDivElement",
      "filename": "/packages/material-ui/src/Select/Select.js",
      "inheritance": {
        "component": "Input",
        "pathname": "/api/input"
      },
      "usedInPages": [
        "/components/selects"
      ]
    }
  }
}
