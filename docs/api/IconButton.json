{
  "description": "Refer to the [Icons](/components/icons/) section of the documentation\r\nregarding the available icon options.",
  "displayName": "IconButton",
  "methods": [],
  "props": {
    "children": {
      "type": {
        "name": "chained",
        "raw": "chainPropTypes(PropTypes.node, (props) => {\r\n  const found = React.Children.toArray(props.children).some(\r\n    (child) => React.isValidElement(child) && child.props.onClick,\r\n  );\r\n\r\n  if (found) {\r\n    return new Error(\r\n      [\r\n        'Material-UI: You are providing an onClick event listener ' +\r\n          'to a child of a button element.',\r\n        'Firefox will never trigger the event.',\r\n        'You should move the onClick listener to the parent button element.',\r\n        'https://github.com/mui-org/material-ui/issues/13957',\r\n      ].join('\\n'),\r\n    );\r\n  }\r\n\r\n  return null;\r\n})",
        "chained": {
          "name": "node"
        }
      },
      "required": false,
      "description": "The icon element.",
      "tags": []
    },
    "classes": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css) below for more details.",
      "tags": []
    },
    "color": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'default'",
            "computed": false
          },
          {
            "value": "'inherit'",
            "computed": false
          },
          {
            "value": "'primary'",
            "computed": false
          },
          {
            "value": "'secondary'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "defaultValue": {
        "value": "'default'",
        "computed": false
      },
      "tags": []
    },
    "disabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the button will be disabled.",
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": []
    },
    "disableFocusRipple": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the  keyboard focus ripple will be disabled.",
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": []
    },
    "disableRipple": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the ripple effect will be disabled.\r\n\r\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\r\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
      "tags": []
    },
    "edge": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'end'",
            "computed": false
          },
          {
            "value": "'start'",
            "computed": false
          },
          {
            "value": "false",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "If given, uses a negative margin to counteract the padding on one\r\nside (this is often helpful for aligning the left or right\r\nside of the icon with content above or below, without ruining the border\r\nsize and shape).",
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": []
    },
    "size": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'medium'",
            "computed": false
          },
          {
            "value": "'small'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The size of the button.\r\n`small` is equivalent to the dense button styling.",
      "defaultValue": {
        "value": "'medium'",
        "computed": false
      },
      "tags": []
    }
  },
  "name": "IconButton",
  "styles": {
    "classes": [
      "root",
      "edgeStart",
      "edgeEnd",
      "colorInherit",
      "colorPrimary",
      "colorSecondary",
      "disabled",
      "sizeSmall",
      "label"
    ],
    "name": "MuiIconButton",
    "descriptions": {
      "root": "Styles applied to the root element.",
      "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
      "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
      "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
      "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
      "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
      "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
      "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
      "label": "Styles applied to the children container element."
    },
    "globalClasses": {
      "root": "MuiIconButton-root",
      "edgeStart": "MuiIconButton-edgeStart",
      "edgeEnd": "MuiIconButton-edgeEnd",
      "colorInherit": "MuiIconButton-colorInherit",
      "colorPrimary": "MuiIconButton-colorPrimary",
      "colorSecondary": "MuiIconButton-colorSecondary",
      "disabled": "Mui-disabled",
      "sizeSmall": "MuiIconButton-sizeSmall",
      "label": "MuiIconButton-label"
    }
  },
  "spread": true,
  "forwardsRefTo": "HTMLButtonElement",
  "filename": "\\packages\\material-ui\\src\\IconButton\\IconButton.js",
  "inheritance": {
    "component": "ButtonBase",
    "pathname": "/api/button-base"
  },
  "usedInPages": [
    "/components/buttons",
    "/components/grid-list"
  ]
}
