{
  "description": "",
  "displayName": "Button",
  "methods": [],
  "props": {
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "The content of the button.",
      "tags": []
    },
    "classes": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Override or extend the styles applied to the component.",
      "tags": []
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "color": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'inherit'",
            "computed": false
          },
          {
            "value": "'primary'",
            "computed": false
          },
          {
            "value": "'secondary'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "jsdocDefaultValue": {
        "value": "'primary'"
      },
      "defaultValue": {
        "value": "'primary'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'primary'"
        }
      ]
    },
    "component": {
      "type": {
        "name": "elementType"
      },
      "required": false,
      "description": "The component used for the root node.\r\nEither a string to use a HTML element or a component.",
      "defaultValue": {
        "value": "'button'",
        "computed": false
      },
      "tags": []
    },
    "disabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the button is disabled.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "disableElevation": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, no elevation is used.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "disableFocusRipple": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the  keyboard focus ripple is disabled.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "disableRipple": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the ripple effect is disabled.\r\n\r\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\r\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "endIcon": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Element placed after the children.",
      "tags": []
    },
    "focusVisibleClassName": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "fullWidth": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the button will take up the full width of its container.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "href": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The URL to link to when the button is clicked.\r\nIf defined, an `a` element will be used as the root node.",
      "tags": []
    },
    "size": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'large'",
            "computed": false
          },
          {
            "value": "'medium'",
            "computed": false
          },
          {
            "value": "'small'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The size of the button.\r\n`small` is equivalent to the dense button styling.",
      "jsdocDefaultValue": {
        "value": "'medium'"
      },
      "defaultValue": {
        "value": "'medium'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'medium'"
        }
      ]
    },
    "startIcon": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Element placed before the children.",
      "tags": []
    },
    "type": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "enum",
            "value": [
              {
                "value": "'button'",
                "computed": false
              },
              {
                "value": "'reset'",
                "computed": false
              },
              {
                "value": "'submit'",
                "computed": false
              }
            ]
          },
          {
            "name": "string"
          }
        ]
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "variant": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "enum",
            "value": [
              {
                "value": "'contained'",
                "computed": false
              },
              {
                "value": "'outlined'",
                "computed": false
              },
              {
                "value": "'text'",
                "computed": false
              }
            ]
          },
          {
            "name": "string"
          }
        ]
      },
      "required": false,
      "description": "The variant to use.",
      "jsdocDefaultValue": {
        "value": "'text'"
      },
      "defaultValue": {
        "value": "'text'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'text'"
        }
      ]
    }
  },
  "name": "Button",
  "styles": {
    "classes": [
      "root",
      "label",
      "text",
      "textPrimary",
      "textSecondary",
      "outlined",
      "outlinedPrimary",
      "outlinedSecondary",
      "contained",
      "containedPrimary",
      "containedSecondary",
      "disableElevation",
      "focusVisible",
      "disabled",
      "colorInherit",
      "textSizeSmall",
      "textSizeLarge",
      "outlinedSizeSmall",
      "outlinedSizeLarge",
      "containedSizeSmall",
      "containedSizeLarge",
      "sizeSmall",
      "sizeLarge",
      "fullWidth",
      "startIcon",
      "endIcon",
      "iconSizeSmall",
      "iconSizeMedium",
      "iconSizeLarge"
    ],
    "name": "MuiButton",
    "descriptions": {
      "root": "Styles applied to the root element.",
      "label": "Styles applied to the span element that wraps the children.",
      "text": "Styles applied to the root element if `variant=\"text\"`.",
      "textPrimary": "Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.",
      "textSecondary": "Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.",
      "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
      "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
      "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
      "contained": "Styles applied to the root element if `variant=\"contained\"`.",
      "containedPrimary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`.",
      "containedSecondary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`.",
      "disableElevation": "Styles applied to the root element if `disableElevation={true}`.",
      "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
      "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
      "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
      "textSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`.",
      "textSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`.",
      "outlinedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`.",
      "outlinedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`.",
      "containedSizeSmall": "Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`.",
      "containedSizeLarge": "Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`.",
      "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
      "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
      "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
      "startIcon": "Styles applied to the startIcon element if supplied.",
      "endIcon": "Styles applied to the endIcon element if supplied.",
      "iconSizeSmall": "Styles applied to the icon element if supplied and `size=\"small\"`.",
      "iconSizeMedium": "Styles applied to the icon element if supplied and `size=\"medium\"`.",
      "iconSizeLarge": "Styles applied to the icon element if supplied and `size=\"large\"`."
    },
    "globalClasses": {
      "root": "MuiButton-root",
      "label": "MuiButton-label",
      "text": "MuiButton-text",
      "textPrimary": "MuiButton-textPrimary",
      "textSecondary": "MuiButton-textSecondary",
      "outlined": "MuiButton-outlined",
      "outlinedPrimary": "MuiButton-outlinedPrimary",
      "outlinedSecondary": "MuiButton-outlinedSecondary",
      "contained": "MuiButton-contained",
      "containedPrimary": "MuiButton-containedPrimary",
      "containedSecondary": "MuiButton-containedSecondary",
      "disableElevation": "MuiButton-disableElevation",
      "focusVisible": "Mui-focusVisible",
      "disabled": "Mui-disabled",
      "colorInherit": "MuiButton-colorInherit",
      "textSizeSmall": "MuiButton-textSizeSmall",
      "textSizeLarge": "MuiButton-textSizeLarge",
      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
      "containedSizeSmall": "MuiButton-containedSizeSmall",
      "containedSizeLarge": "MuiButton-containedSizeLarge",
      "sizeSmall": "MuiButton-sizeSmall",
      "sizeLarge": "MuiButton-sizeLarge",
      "fullWidth": "MuiButton-fullWidth",
      "startIcon": "MuiButton-startIcon",
      "endIcon": "MuiButton-endIcon",
      "iconSizeSmall": "MuiButton-iconSizeSmall",
      "iconSizeMedium": "MuiButton-iconSizeMedium",
      "iconSizeLarge": "MuiButton-iconSizeLarge"
    }
  },
  "spread": true,
  "forwardsRefTo": "HTMLButtonElement",
  "filename": "\\packages\\material-ui\\src\\Button\\Button.js",
  "inheritance": {
    "component": "ButtonBase",
    "pathname": "/api/button-base"
  },
  "usedInPages": [
    "/components/button-group",
    "/components/buttons"
  ]
}
