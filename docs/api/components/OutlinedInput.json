{
  "description": "",
  "displayName": "OutlinedInput",
  "methods": [],
  "props": {
    "autoComplete": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "This prop helps users to fill forms faster, especially on mobile devices.\r\nThe name can be confusing, as it's more like an autofill.\r\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
      "tags": []
    },
    "autoFocus": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the `input` element is focused during the first mount.",
      "tags": []
    },
    "classes": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Override or extend the styles applied to the component.",
      "tags": []
    },
    "color": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'primary'",
            "computed": false
          },
          {
            "value": "'secondary'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The color of the component. It supports those theme colors that make sense for this component.\r\nThe prop defaults to the value (`'primary'`) inherited from the parent FormControl component.",
      "tags": []
    },
    "defaultValue": {
      "type": {
        "name": "any"
      },
      "required": false,
      "description": "The default `input` element value. Use when the component is not controlled.",
      "tags": []
    },
    "disabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the `input` element is disabled.\r\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
      "tags": []
    },
    "endAdornment": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "End `InputAdornment` for this component.",
      "tags": []
    },
    "error": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the input will indicate an error.\r\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
      "tags": []
    },
    "fullWidth": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the input will take up the full width of its container.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "id": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The id of the `input` element.",
      "tags": []
    },
    "inputComponent": {
      "type": {
        "name": "elementType"
      },
      "required": false,
      "description": "The component used for the `input` element.\r\nEither a string to use a HTML element or a component.",
      "jsdocDefaultValue": {
        "value": "'input'"
      },
      "defaultValue": {
        "value": "'input'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'input'"
        }
      ]
    },
    "inputProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
      "tags": [
        {
          "title": "default",
          "description": "{}"
        }
      ]
    },
    "inputRef": {
      "type": {
        "name": "custom",
        "raw": "refType"
      },
      "required": false,
      "description": "Pass a ref to the `input` element.",
      "tags": []
    },
    "label": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "The label of the input. It is only used for layout. The actual labelling\r\nis handled by `InputLabel`. If specified `labelWidth` is ignored.",
      "tags": []
    },
    "labelWidth": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "The width of the label. Is ignored if `label` is provided. Prefer `label`\r\nif the input label appears with a strike through.",
      "jsdocDefaultValue": {
        "value": "0"
      },
      "defaultValue": {
        "value": "0",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "0"
        }
      ]
    },
    "margin": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'dense'",
            "computed": false
          },
          {
            "value": "'none'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\nFormControl.\r\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",
      "tags": []
    },
    "maxRows": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "number"
          },
          {
            "name": "string"
          }
        ]
      },
      "required": false,
      "description": "Maximum number of rows to display when multiline option is set to true.",
      "tags": []
    },
    "minRows": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "number"
          },
          {
            "name": "string"
          }
        ]
      },
      "required": false,
      "description": "Minimum number of rows to display when multiline option is set to true.",
      "tags": []
    },
    "multiline": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, a `textarea` element is rendered.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "name": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Name attribute of the `input` element.",
      "tags": []
    },
    "notched": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the outline is notched to accommodate the label.",
      "tags": []
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Callback fired when the value is changed.",
      "tags": [
        {
          "title": "param",
          "description": "The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value` (string).",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "event"
        }
      ]
    },
    "placeholder": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The short hint displayed in the input before the user enters a value.",
      "tags": []
    },
    "readOnly": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "It prevents the user from changing the value of the field\r\n(not from interacting with the field).",
      "tags": []
    },
    "required": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the `input` element is required.\r\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
      "tags": []
    },
    "rows": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "number"
          },
          {
            "name": "string"
          }
        ]
      },
      "required": false,
      "description": "Number of rows to display when multiline option is set to true.",
      "tags": []
    },
    "startAdornment": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Start `InputAdornment` for this component.",
      "tags": []
    },
    "type": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
      "jsdocDefaultValue": {
        "value": "'text'"
      },
      "defaultValue": {
        "value": "'text'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'text'"
        }
      ]
    },
    "value": {
      "type": {
        "name": "any"
      },
      "required": false,
      "description": "The value of the `input` element, required for a controlled component.",
      "tags": []
    }
  },
  "name": "OutlinedInput",
  "styles": {
    "classes": [
      "root",
      "colorSecondary",
      "focused",
      "disabled",
      "adornedStart",
      "adornedEnd",
      "error",
      "marginDense",
      "multiline",
      "notchedOutline",
      "input",
      "inputMarginDense",
      "inputMultiline",
      "inputAdornedStart",
      "inputAdornedEnd"
    ],
    "name": "MuiOutlinedInput",
    "descriptions": {
      "root": "Styles applied to the root element.",
      "colorSecondary": "Styles applied to the root element if the color is secondary.",
      "focused": "Styles applied to the root element if the component is focused.",
      "disabled": "Styles applied to the root element if `disabled={true}`.",
      "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
      "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
      "error": "Pseudo-class applied to the root element if `error={true}`.",
      "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
      "multiline": "Styles applied to the root element if `multiline={true}`.",
      "notchedOutline": "Styles applied to the `NotchedOutline` element.",
      "input": "Styles applied to the `input` element.",
      "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
      "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
      "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
      "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
    },
    "globalClasses": {
      "root": "MuiOutlinedInput-root",
      "colorSecondary": "MuiOutlinedInput-colorSecondary",
      "focused": "Mui-focused",
      "disabled": "Mui-disabled",
      "adornedStart": "MuiOutlinedInput-adornedStart",
      "adornedEnd": "MuiOutlinedInput-adornedEnd",
      "error": "Mui-error",
      "marginDense": "MuiOutlinedInput-marginDense",
      "multiline": "MuiOutlinedInput-multiline",
      "notchedOutline": "MuiOutlinedInput-notchedOutline",
      "input": "MuiOutlinedInput-input",
      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
      "inputMultiline": "MuiOutlinedInput-inputMultiline",
      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd"
    }
  },
  "spread": true,
  "forwardsRefTo": "HTMLDivElement",
  "filename": "\\packages\\material-ui\\src\\OutlinedInput\\OutlinedInput.js",
  "inheritance": {
    "component": "InputBase",
    "pathname": "/api/input-base"
  },
  "usedInPages": [
    "/components/text-fields"
  ]
}
