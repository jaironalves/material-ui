{
  "description": "",
  "displayName": "SliderUnstyled",
  "methods": [],
  "props": {
    "aria-label": {
      "type": {
        "name": "chained",
        "raw": "chainPropTypes(PropTypes.string, (props) => {\r\n  const range = Array.isArray(props.value || props.defaultValue);\r\n\r\n  if (range && props['aria-label'] != null) {\r\n    return new Error(\r\n      'Material-UI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.',\r\n    );\r\n  }\r\n\r\n  return null;\r\n})",
        "chained": {
          "name": "string"
        }
      },
      "required": false,
      "description": "The label of the slider.",
      "tags": []
    },
    "aria-labelledby": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The id of the element containing a label for the slider.",
      "tags": []
    },
    "aria-valuetext": {
      "type": {
        "name": "chained",
        "raw": "chainPropTypes(PropTypes.string, (props) => {\r\n  const range = Array.isArray(props.value || props.defaultValue);\r\n\r\n  if (range && props['aria-valuetext'] != null) {\r\n    return new Error(\r\n      'Material-UI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.',\r\n    );\r\n  }\r\n\r\n  return null;\r\n})",
        "chained": {
          "name": "string"
        }
      },
      "required": false,
      "description": "A string value that provides a user-friendly name for the current value of the slider.",
      "tags": []
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "color": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'primary'",
            "computed": false
          },
          {
            "value": "'secondary'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "jsdocDefaultValue": {
        "value": "'primary'"
      },
      "defaultValue": {
        "value": "'primary'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'primary'"
        }
      ]
    },
    "component": {
      "type": {
        "name": "elementType"
      },
      "required": false,
      "description": "The component used for the root node.\r\nEither a string to use a HTML element or a component.",
      "defaultValue": {
        "value": "'span'",
        "computed": false
      },
      "tags": []
    },
    "components": {
      "type": {
        "name": "shape",
        "value": {
          "Mark": {
            "name": "elementType",
            "required": false
          },
          "MarkLabel": {
            "name": "elementType",
            "required": false
          },
          "Rail": {
            "name": "elementType",
            "required": false
          },
          "Root": {
            "name": "elementType",
            "required": false
          },
          "Thumb": {
            "name": "elementType",
            "required": false
          },
          "Track": {
            "name": "elementType",
            "required": false
          },
          "ValueLabel": {
            "name": "elementType",
            "required": false
          }
        }
      },
      "required": false,
      "description": "The components used for each slot inside the Slider.\r\nEither a string to use a HTML element or a component.",
      "jsdocDefaultValue": {
        "value": "{}"
      },
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "{}"
        }
      ]
    },
    "componentsProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "The props used for each slot inside the Slider.",
      "jsdocDefaultValue": {
        "value": "{}"
      },
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "{}"
        }
      ]
    },
    "defaultValue": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "arrayOf",
            "value": {
              "name": "number"
            }
          },
          {
            "name": "number"
          }
        ]
      },
      "required": false,
      "description": "The default element value. Use when the component is not controlled.",
      "tags": []
    },
    "disabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the slider is disabled.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "getAriaLabel": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.",
      "tags": [
        {
          "title": "param",
          "description": "The thumb label's index to format.",
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "index"
        },
        {
          "title": "returns",
          "description": null,
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      ]
    },
    "getAriaValueText": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.",
      "tags": [
        {
          "title": "param",
          "description": "The thumb label's value to format.",
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "value"
        },
        {
          "title": "param",
          "description": "The thumb label's index to format.",
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "index"
        },
        {
          "title": "returns",
          "description": null,
          "type": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      ]
    },
    "isRtl": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Indicates whether the theme context has rtl direction. It is set automatically.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "marks": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "arrayOf",
            "value": {
              "name": "shape",
              "value": {
                "label": {
                  "name": "node",
                  "required": false
                },
                "value": {
                  "name": "number",
                  "required": true
                }
              }
            }
          },
          {
            "name": "bool"
          }
        ]
      },
      "required": false,
      "description": "Marks indicate predetermined values to which the user can move the slider.\r\nIf `true` the marks are spaced according the value of the `step` prop.\r\nIf an array, it should contain objects with `value` and an optional `label` keys.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "max": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "The maximum allowed value of the slider.\r\nShould not be equal to min.",
      "jsdocDefaultValue": {
        "value": "100"
      },
      "defaultValue": {
        "value": "100",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "100"
        }
      ]
    },
    "min": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "The minimum allowed value of the slider.\r\nShould not be equal to max.",
      "jsdocDefaultValue": {
        "value": "0"
      },
      "defaultValue": {
        "value": "0",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "0"
        }
      ]
    },
    "name": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Name attribute of the hidden `input` element.",
      "tags": []
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Callback function that is fired when the slider's value changed.",
      "tags": [
        {
          "title": "param",
          "description": "The event source of the callback. **Warning**: This is a generic event not a change event.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "The new value.",
          "type": {
            "type": "UnionType",
            "elements": [
              {
                "type": "NameExpression",
                "name": "number"
              },
              {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            ]
          },
          "name": "value"
        }
      ]
    },
    "onChangeCommitted": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Callback function that is fired when the `mouseup` is triggered.",
      "tags": [
        {
          "title": "param",
          "description": "The event source of the callback. **Warning**: This is a generic event not a change event.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "The new value.",
          "type": {
            "type": "UnionType",
            "elements": [
              {
                "type": "NameExpression",
                "name": "number"
              },
              {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            ]
          },
          "name": "value"
        }
      ]
    },
    "onMouseDown": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "orientation": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'horizontal'",
            "computed": false
          },
          {
            "value": "'vertical'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The slider orientation.",
      "jsdocDefaultValue": {
        "value": "'horizontal'"
      },
      "defaultValue": {
        "value": "'horizontal'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'horizontal'"
        }
      ]
    },
    "scale": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "A transformation function, to change the scale of the slider.",
      "jsdocDefaultValue": {
        "value": "(x) => x"
      },
      "defaultValue": {
        "value": "(x) => x",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "(x) => x"
        }
      ]
    },
    "step": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "The granularity with which the slider can step through values. (A \"discrete\" slider.)\r\nThe `min` prop serves as the origin for the valid values.\r\nWe recommend (max - min) to be evenly divisible by the step.\r\n\r\nWhen step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.",
      "jsdocDefaultValue": {
        "value": "1"
      },
      "defaultValue": {
        "value": "1",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "1"
        }
      ]
    },
    "track": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'inverted'",
            "computed": false
          },
          {
            "value": "'normal'",
            "computed": false
          },
          {
            "value": "false",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The track presentation:\r\n\r\n- `normal` the track will render a bar representing the slider value.\r\n- `inverted` the track will render a bar representing the remaining slider value.\r\n- `false` the track will render without a bar.",
      "jsdocDefaultValue": {
        "value": "'normal'"
      },
      "defaultValue": {
        "value": "'normal'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'normal'"
        }
      ]
    },
    "value": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "arrayOf",
            "value": {
              "name": "number"
            }
          },
          {
            "name": "number"
          }
        ]
      },
      "required": false,
      "description": "The value of the slider.\r\nFor ranged sliders, provide an array with two values.",
      "tags": []
    },
    "valueLabelDisplay": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'auto'",
            "computed": false
          },
          {
            "value": "'off'",
            "computed": false
          },
          {
            "value": "'on'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "Controls when the value label is displayed:\r\n\r\n- `auto` the value label will display when the thumb is hovered or focused.\r\n- `on` will display persistently.\r\n- `off` will never display.",
      "jsdocDefaultValue": {
        "value": "'off'"
      },
      "defaultValue": {
        "value": "'off'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'off'"
        }
      ]
    },
    "valueLabelFormat": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "func"
          },
          {
            "name": "string"
          }
        ]
      },
      "required": false,
      "description": "The format function the value label's value.\r\n\r\nWhen a function is provided, it should have the following signature:\r\n\r\n- {number} value The value label's value to format\r\n- {number} index The value label's index to format",
      "jsdocDefaultValue": {
        "value": "(x) => x"
      },
      "defaultValue": {
        "value": "(x) => x",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "(x) => x"
        }
      ]
    }
  },
  "name": "SliderUnstyled",
  "styles": {
    "classes": [],
    "name": null,
    "descriptions": {},
    "globalClasses": {}
  },
  "spread": true,
  "forwardsRefTo": "HTMLSpanElement",
  "filename": "\\packages\\material-ui-lab\\src\\SliderUnstyled\\SliderUnstyled.js",
  "inheritance": null,
  "usedInPages": [
    "/components/slider-styled"
  ]
}
