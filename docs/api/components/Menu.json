{
  "description": "",
  "displayName": "Menu",
  "methods": [],
  "props": {
    "anchorEl": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "custom",
            "raw": "HTMLElementType"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "A HTML element, or a function that returns it.\r\nIt's used to set the position of the menu.",
      "tags": []
    },
    "autoFocus": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\r\nchildren are not focusable. If you set this prop to `false` focus will be placed\r\non the parent modal container. This has severe accessibility implications\r\nand should only be considered if you manage focus otherwise.",
      "jsdocDefaultValue": {
        "value": "true"
      },
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "true"
        }
      ]
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Menu contents, normally `MenuItem`s.",
      "tags": []
    },
    "classes": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Override or extend the styles applied to the component.",
      "tags": []
    },
    "disableAutoFocusItem": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "When opening the menu will not focus the active item but the `[role=\"menu\"]`\r\nunless `autoFocus` is also set to `false`. Not using the default means not\r\nfollowing WAI-ARIA authoring practices. Please be considerate about possible\r\naccessibility implications.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "MenuListProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Props applied to the [`MenuList`](/api/menu-list/) element.",
      "jsdocDefaultValue": {
        "value": "{}"
      },
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "{}"
        }
      ]
    },
    "onClose": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Callback fired when the component requests to be closed.",
      "tags": [
        {
          "title": "param",
          "description": "The event source of the callback.",
          "type": {
            "type": "NameExpression",
            "name": "object"
          },
          "name": "event"
        },
        {
          "title": "param",
          "description": "Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.",
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "name": "reason"
        }
      ]
    },
    "open": {
      "type": {
        "name": "bool"
      },
      "required": true,
      "description": "If `true`, the menu is visible.",
      "tags": []
    },
    "PaperProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "PopoverClasses": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "`classes` prop applied to the [`Popover`](/api/popover/) element.",
      "tags": []
    },
    "transitionDuration": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "enum",
            "value": [
              {
                "value": "'auto'",
                "computed": false
              }
            ]
          },
          {
            "name": "number"
          },
          {
            "name": "shape",
            "value": {
              "appear": {
                "name": "number",
                "required": false
              },
              "enter": {
                "name": "number",
                "required": false
              },
              "exit": {
                "name": "number",
                "required": false
              }
            }
          }
        ]
      },
      "required": false,
      "description": "The length of the transition in `ms`, or 'auto'",
      "jsdocDefaultValue": {
        "value": "'auto'"
      },
      "defaultValue": {
        "value": "'auto'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'auto'"
        }
      ]
    },
    "TransitionProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Props applied to the transition element.\r\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.",
      "jsdocDefaultValue": {
        "value": "{}"
      },
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "{}"
        }
      ]
    },
    "variant": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'menu'",
            "computed": false
          },
          {
            "value": "'selectedMenu'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\r\nand the vertical alignment relative to the anchor element.",
      "jsdocDefaultValue": {
        "value": "'selectedMenu'"
      },
      "defaultValue": {
        "value": "'selectedMenu'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'selectedMenu'"
        }
      ]
    }
  },
  "name": "Menu",
  "styles": {
    "classes": [
      "paper",
      "list"
    ],
    "name": "MuiMenu",
    "descriptions": {
      "paper": "Styles applied to the `Paper` component.",
      "list": "Styles applied to the `List` component via `MenuList`."
    },
    "globalClasses": {
      "paper": "MuiMenu-paper",
      "list": "MuiMenu-list"
    }
  },
  "spread": true,
  "forwardsRefTo": "HTMLDivElement",
  "filename": "\\packages\\material-ui\\src\\Menu\\Menu.js",
  "inheritance": {
    "component": "Popover",
    "pathname": "/api/popover"
  },
  "usedInPages": [
    "/components/app-bar",
    "/components/menus"
  ]
}
