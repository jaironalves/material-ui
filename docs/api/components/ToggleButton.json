{
  "description": "",
  "displayName": "ToggleButton",
  "methods": [],
  "props": {
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "The content of the button.",
      "tags": []
    },
    "classes": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Override or extend the styles applied to the component.",
      "tags": []
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "disabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the button is disabled.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "disableFocusRipple": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the  keyboard focus ripple is disabled.",
      "jsdocDefaultValue": {
        "value": "false"
      },
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "disableRipple": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the ripple effect is disabled.\r\n\r\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\r\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
      "tags": [
        {
          "title": "default",
          "description": "false"
        }
      ]
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "",
      "tags": [
        {
          "title": "ignore",
          "description": null
        }
      ]
    },
    "selected": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If `true`, the button is rendered in an active state.",
      "tags": []
    },
    "size": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'large'",
            "computed": false
          },
          {
            "value": "'medium'",
            "computed": false
          },
          {
            "value": "'small'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "The size of the button.\r\nThe prop defaults to the value inherited from the parent ToggleButtonGroup component.",
      "jsdocDefaultValue": {
        "value": "'medium'"
      },
      "defaultValue": {
        "value": "'medium'",
        "computed": false
      },
      "tags": [
        {
          "title": "default",
          "description": "'medium'"
        }
      ]
    },
    "value": {
      "type": {
        "name": "any"
      },
      "required": true,
      "description": "The value to associate with the button when selected in a\r\nToggleButtonGroup.",
      "tags": []
    }
  },
  "name": "ToggleButton",
  "styles": {
    "classes": [
      "root",
      "disabled",
      "selected",
      "label",
      "sizeSmall",
      "sizeLarge"
    ],
    "name": "MuiToggleButton",
    "descriptions": {
      "root": "Styles applied to the root element.",
      "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
      "selected": "Pseudo-class applied to the root element if `selected={true}`.",
      "label": "Styles applied to the `label` wrapper element.",
      "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
      "sizeLarge": "Styles applied to the root element if `size=\"large\"`."
    },
    "globalClasses": {
      "root": "MuiToggleButton-root",
      "disabled": "Mui-disabled",
      "selected": "Mui-selected",
      "label": "MuiToggleButton-label",
      "sizeSmall": "MuiToggleButton-sizeSmall",
      "sizeLarge": "MuiToggleButton-sizeLarge"
    }
  },
  "spread": true,
  "forwardsRefTo": "HTMLButtonElement",
  "filename": "\\packages\\material-ui\\src\\ToggleButton\\ToggleButton.js",
  "inheritance": {
    "component": "ButtonBase",
    "pathname": "/api/button-base"
  },
  "usedInPages": [
    "/components/toggle-button"
  ]
}
