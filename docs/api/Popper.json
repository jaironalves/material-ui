{
  "description": "Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v1/) for positioning.",
  "displayName": "Popper",
  "methods": [],
  "props": {
    "anchorEl": {
      "type": {
        "name": "chained",
        "raw": "chainPropTypes/* @chainedAs [\"HTMLElementType\", \"object\", \"func\"] */(\n  PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),\n  (props) => {\n    if (props.open) {\n      const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n\n      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n\n        if (\n          process.env.NODE_ENV !== 'test' &&\n          box.top === 0 &&\n          box.left === 0 &&\n          box.right === 0 &&\n          box.bottom === 0\n        ) {\n          return new Error(\n            [\n              'Material-UI: The `anchorEl` prop provided to the component is invalid.',\n              'The anchor element should be part of the document layout.',\n              \"Make sure the element is present in the document or that it's not display none.\",\n            ].join('\\n'),\n          );\n        }\n      } else if (\n        !resolvedAnchorEl ||\n        typeof resolvedAnchorEl.clientWidth !== 'number' ||\n        typeof resolvedAnchorEl.clientHeight !== 'number' ||\n        typeof resolvedAnchorEl.getBoundingClientRect !== 'function'\n      ) {\n        return new Error(\n          [\n            'Material-UI: The `anchorEl` prop provided to the component is invalid.',\n            'It should be an HTML element instance or a referenceObject ',\n            '(https://popper.js.org/docs/v1/#referenceObject).',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    return null;\n  },\n)",
        "chained": {
          "name": "union",
          "value": [
            {
              "name": "HTMLElementType"
            },
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        }
      },
      "required": false,
      "description": "A HTML element, [referenceObject](https://popper.js.org/docs/v1/#referenceObject),\nor a function that returns either.\nIt's used to set the position of the popper.\nThe return value will passed as the reference object of the Popper instance.",
      "tags": []
    },
    "children": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "node"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": true,
      "description": "Popper render function or node.",
      "tags": []
    },
    "container": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "custom",
            "raw": "HTMLElementType"
          },
          {
            "name": "instanceOf",
            "value": "React.Component"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "A HTML element, component instance, or function that returns either.\nThe `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
      "tags": []
    },
    "disablePortal": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "The `children` will be inside the DOM hierarchy of the parent component.",
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": []
    },
    "keepMounted": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Popper.",
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": []
    },
    "modifiers": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Popper.js is based on a \"plugin-like\" architecture,\nmost of its features are fully encapsulated \"modifiers\".\n\nA modifier is a function that is called each time Popper.js needs to\ncompute the position of the popper.\nFor this reason, modifiers should be very performant to avoid bottlenecks.\nTo learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v1/#modifiers).",
      "tags": []
    },
    "open": {
      "type": {
        "name": "bool"
      },
      "required": true,
      "description": "If `true`, the popper is visible.",
      "tags": []
    },
    "placement": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'bottom-end'",
            "computed": false
          },
          {
            "value": "'bottom-start'",
            "computed": false
          },
          {
            "value": "'bottom'",
            "computed": false
          },
          {
            "value": "'left-end'",
            "computed": false
          },
          {
            "value": "'left-start'",
            "computed": false
          },
          {
            "value": "'left'",
            "computed": false
          },
          {
            "value": "'right-end'",
            "computed": false
          },
          {
            "value": "'right-start'",
            "computed": false
          },
          {
            "value": "'right'",
            "computed": false
          },
          {
            "value": "'top-end'",
            "computed": false
          },
          {
            "value": "'top-start'",
            "computed": false
          },
          {
            "value": "'top'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "Popper placement.",
      "defaultValue": {
        "value": "'bottom'",
        "computed": false
      },
      "tags": []
    },
    "popperOptions": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Options provided to the [`popper.js`](https://popper.js.org/docs/v1/) instance.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "tags": []
    },
    "popperRef": {
      "type": {
        "name": "custom",
        "raw": "refType"
      },
      "required": false,
      "description": "A ref that points to the used popper instance.",
      "tags": []
    },
    "transition": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Help supporting a react-transition-group/Transition component.",
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "tags": []
    }
  },
  "name": "Popper",
  "styles": {
    "classes": [],
    "name": null,
    "descriptions": {}
  },
  "spread": true,
  "forwardsRefTo": "HTMLDivElement",
  "filename": "\\packages\\material-ui\\src\\Popper\\Popper.js",
  "inheritance": null,
  "usedInPages": [
    "/components/autocomplete",
    "/components/menus",
    "/components/popper"
  ]
}
