{
  "propAlignContent": "Defines the `align-content` style property.\r\nIt's applied for all screen sizes.",
  "propAlignItems": "Defines the `align-items` style property.\r\nIt's applied for all screen sizes.",
  "propChildren": "The content of the component.",
  "propClasses": "Override or extend the styles applied to the component.",
  "propComponent": "The component used for the root node.\r\nEither a string to use a HTML element or a component.",
  "propContainer": "If `true`, the component will have the flex *container* behavior.\r\nYou should be wrapping *items* with a *container*.",
  "propDirection": "Defines the `flex-direction` style property.\r\nIt is applied for all screen sizes.",
  "propItem": "If `true`, the component will have the flex *item* behavior.\r\nYou should be wrapping *items* with a *container*.",
  "propJustifyContent": "Defines the `justify-content` style property.\r\nIt is applied for all screen sizes.",
  "propLg": "Defines the number of grids the component is going to use.\r\nIt's applied for the `lg` breakpoint and wider screens if not overridden.",
  "propMd": "Defines the number of grids the component is going to use.\r\nIt's applied for the `md` breakpoint and wider screens if not overridden.",
  "propSm": "Defines the number of grids the component is going to use.\r\nIt's applied for the `sm` breakpoint and wider screens if not overridden.",
  "propSpacing": "Defines the space between the type `item` component.\r\nIt can only be used on a type `container` component.",
  "propWrap": "Defines the `flex-wrap` style property.\r\nIt's applied for all screen sizes.",
  "propXl": "Defines the number of grids the component is going to use.\r\nIt's applied for the `xl` breakpoint and wider screens.",
  "propXs": "Defines the number of grids the component is going to use.\r\nIt's applied for all the screen sizes with the lowest priority.",
  "propZeroMinWidth": "If `true`, it sets `min-width: 0` on the item.\r\nRefer to the limitations section of the documentation to better understand the use case.",
  "stylesRoot": "Styles applied to the root element.",
  "stylesContainer": "Styles applied to the root element if `container={true}`.",
  "stylesItem": "Styles applied to the root element if `item={true}`.",
  "stylesZeroMinWidth": "Styles applied to the root element if `zeroMinWidth={true}`.",
  "styles": "Styles applied to the root element if `justifyContent=\"space-evenly\"`."
}
