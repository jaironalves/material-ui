{
  "description": "Uses an additional container component if `ListItemSecondaryAction` is the last child.",
  "propAlignItems": "Defines the `align-items` style property.",
  "propAutoFocus": "If `true`, the list item is focused during the first mount.\r\nFocus will also be triggered if the value changes from false to true.",
  "propButton": "If `true`, the list item is a button (using `ButtonBase`). Props intended\r\nfor `ButtonBase` can then be applied to `ListItem`.",
  "propChildren": "The content of the component. If a `ListItemSecondaryAction` is used it must\r\nbe the last child.",
  "propClasses": "Override or extend the styles applied to the component.",
  "propComponent": "The component used for the root node.\r\nEither a string to use a HTML element or a component.",
  "propContainerComponent": "The container component used when a `ListItemSecondaryAction` is the last child.",
  "propContainerProps": "Props applied to the container component if used.",
  "propDense": "If `true`, compact vertical padding designed for keyboard and mouse input is used.\r\nThe prop defaults to the value inherited from the parent List component.",
  "propDisabled": "If `true`, the list item is disabled.",
  "propDisableGutters": "If `true`, the left and right padding is removed.",
  "propDivider": "If `true`, a 1px light border is added to the bottom of the list item.",
  "propSelected": "Use to apply selected styling.",
  "stylesRoot": "Styles applied to the (normally root) `component` element. May be wrapped by a `container`.",
  "stylesContainer": "Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`.",
  "stylesFocusVisible": "Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`.",
  "stylesDense": "Styles applied to the `component` element if dense.",
  "stylesAlignItemsFlexStart": "Styles applied to the `component` element if `alignItems=\"flex-start\"`.",
  "stylesDisabled": "Pseudo-class applied to the inner `component` element if `disabled={true}`.",
  "stylesDivider": "Styles applied to the inner `component` element if `divider={true}`.",
  "stylesGutters": "Styles applied to the inner `component` element unless `disableGutters={true}`.",
  "stylesButton": "Styles applied to the inner `component` element if `button={true}`.",
  "stylesSecondaryAction": "Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`.",
  "stylesSelected": "Pseudo-class applied to the root element if `selected={true}`."
}
