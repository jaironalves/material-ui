{
  "propAction": "The action to display. It renders after the message, at the end of the snackbar.",
  "propAnchorOrigin": "The anchor of the `Snackbar`.\r\nOn smaller screens, the component grows to occupy all the available width,\r\nthe horizontal alignment is ignored.",
  "propAutoHideDuration": "The number of milliseconds to wait before automatically calling the\r\n`onClose` function. `onClose` should then set the state of the `open`\r\nprop to hide the Snackbar. This behavior is disabled by default with\r\nthe `null` value.",
  "propChildren": "Replace the `SnackbarContent` component.",
  "propClasses": "Override or extend the styles applied to the component.",
  "propClickAwayListenerProps": "Props applied to the `ClickAwayListener` element.",
  "propContentProps": "Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.",
  "propDisableWindowBlurListener": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
  "propKey": "When displaying multiple consecutive Snackbars from a parent rendering a single\r\n<Snackbar/>, add the key prop to ensure independent treatment of each message.\r\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\r\nfeatures such as autoHideDuration may be canceled.",
  "propMessage": "The message to display.",
  "propOnClose": "Callback fired when the component requests to be closed.\r\nTypically `onClose` is used to set state in the parent component,\r\nwhich is used to control the `Snackbar` `open` prop.\r\nThe `reason` parameter can optionally be used to control the response to `onClose`,\r\nfor example ignoring `clickaway`.",
  "propOpen": "If `true`, `Snackbar` is open.",
  "propResumeHideDuration": "The number of milliseconds to wait before dismissing after user interaction.\r\nIf `autoHideDuration` prop isn't specified, it does nothing.\r\nIf `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\r\nwe default to `autoHideDuration / 2` ms.",
  "propTransitionComponent": "The component used for the transition.\r\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
  "propTransitionDuration": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
  "propTransitionProps": "Props applied to the transition element.\r\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.",
  "stylesRoot": "Styles applied to the root element.",
  "stylesAnchorOriginTopCenter": "Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`.",
  "stylesAnchorOriginBottomCenter": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`.",
  "stylesAnchorOriginTopRight": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`.",
  "stylesAnchorOriginBottomRight": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`.",
  "stylesAnchorOriginTopLeft": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`.",
  "stylesAnchorOriginBottomLeft": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`."
}
